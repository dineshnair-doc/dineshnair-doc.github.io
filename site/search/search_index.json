{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Welcome!  </p> <ul> <li>View My Resume</li> <li>View My Writings</li> </ul>"},{"location":"resumedineshnair/","title":"Resume of Dinesh Nair","text":"<p>LinkedIn: https://www.linkedin.com/in/dineshn1/ </p>"},{"location":"resumedineshnair/#summary","title":"Summary","text":"<p>Experienced technical writer with a passion for creating clear and concise documentation for a developer audience.</p> <p>Looking for a remote work opportunity in India or an in-office role in Hyderabad, India. Please feel free to contact me through LinkedIn.</p>"},{"location":"resumedineshnair/#skills","title":"Skills","text":"<p>Technical Documentation | DITA | Markdown | Git and GitHub | UX Writing | Oxygen | Familiar with Python and SQL | REST API Documentation | Agile | HTML | Snagit | Training Content | Swagger | Confluence</p>"},{"location":"resumedineshnair/#experience","title":"Experience","text":""},{"location":"resumedineshnair/#self-directed-technical-writing-projects","title":"Self-Directed Technical Writing Projects","text":"<p>Oct 2024 - Present</p> <p>Authored a diverse range of technical content on Hashnode, covering topics such as:</p> <ul> <li>Python programming and web development (Flask).</li> <li>Database management (PostgreSQL).</li> <li>API development and documentation (RESTful APIs, Swagger, Postman).</li> <li>Version control and documentation (Git/GitHub, Markdown, reStructuredText).</li> </ul> <p>My explanatory articles on Medium about DITA (Darwin Information Typing Architecture) and Diataxis:</p> <ul> <li>Using DITA for Technical Documentation</li> <li>My Take on the Di\u00e1taxis Approach</li> </ul>"},{"location":"resumedineshnair/#principal-technical-writer","title":"Principal Technical Writer","text":"<p>Oracle, India   | Jan 2004 - Oct 2024</p> <ul> <li>Worked in various areas of user assistance, such as guides, UI labels and messages, release  notes, and REST documentation.</li> <li>Created training content for both instructor-led classes and online learning.</li> </ul>"},{"location":"resumedineshnair/#education","title":"Education","text":"<p>Bachelor of Arts Delhi University</p>"},{"location":"mytechdocs/","title":"Dinesh's Writings","text":"<p>This section contains my technical documentation. Currently, I have the following document available:</p> <ul> <li>Getting Started with Python</li> </ul> <p>Stay tuned for more documents as I continue to expand this collection!</p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/","title":"Getting Started with Python","text":"<p>We'll cover:</p> <ul> <li>How to Set Up the Windows Environment</li> <li>Create and Run Your First Python File</li> <li>Comments</li> <li>Variables</li> <li>If Else</li> <li>Else If</li> <li>For Loop</li> <li>While Loop</li> <li>Functions</li> </ul>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#how-to-set-up-the-windows-environment","title":"How to Set Up the Windows Environment","text":"<p>Install:</p> <ol> <li> <p>Python: https://www.python.org/downloads/</p> </li> <li> <p>Visual Studio Code (VS Code): https://code.visualstudio.com/</p> </li> <li> <p>VS Code Extension for Python: https://marketplace.visualstudio.com/items?itemName=ms-python.python</p> </li> </ol>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#create-and-run-your-first-python-file","title":"Create and Run Your First Python File","text":"<p>Step 1: Open VS Code. Create a new Python file:</p> <p></p> <p>Step 2: Copy and paste this code into the file:</p> <pre><code>print (\"Hello world\")\nItem = \"Rain\"\nitem = \"Thunder\"\nprint (item + ' ' + Item)\n</code></pre> <p>This code is using:</p> <ul> <li><code>print</code> function to display text. A function is a block of code that runs when it\u2019s called.</li> <li>Variables <code>Item</code> and <code>item</code> to store strings Rain and Thunder.</li> </ul> <p>\ud83d\udca1 Tip: Variables are case sensitive. <code>Item</code> and <code>item</code> are two different variables.</p> <p>Step 3: Click Run:</p> <p></p> <p>Here\u2019s what you\u2019ll see when you run the file:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#comments","title":"Comments","text":"<p>Add comments to clarify your code. Python will not execute the comments. You can add a comment by adding # at the start of the line.</p> <p>Step 1: Copy and paste this code into the file:</p> <pre><code># Greet the user\nprint(\"Hi there!\")\n</code></pre> <p>Step 2: Click Run.</p> <p>Here\u2019s what you\u2019ll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#variables","title":"Variables","text":"<p>Earlier, we used two variables <code>Item</code> and <code>item</code> to store string values. Let\u2019s now use variables to store numbers and numeric calculations.</p> <p>Step 1: Copy and paste this code into the file:</p> <pre><code>a = 20\nb = 5\naddition = a + b\nsubtraction = a - b\nmultiply = a * b\ndivision = a / b\nprint (addition)\nprint (subtraction)\nprint (multiply)\nprint (division)\n</code></pre> <p>The code is using variables <code>a</code> and <code>b</code> to store numbers and then variables <code>addition</code>, <code>subtraction</code>, <code>multiply</code>, and <code>division</code> to store the calculations.</p> <p>Step 2: Click Run.</p> <p>Here\u2019s what you\u2019ll see.</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#if-else","title":"If Else","text":"<p>Use If Else for defining conditions and then executing the code based on the conditions.</p> <p>Step 1: Copy and paste this code into the file.</p> <pre><code>item_available = True\nif item_available is False:\n    print (\"The item isn't available\")\nelse:\n    print (\"The item is available\")\nisCollegeOpen = True\nif isCollegeOpen:\n    print (\"The college is open\")\nelse:\n    print (\"The college is closed\")\n</code></pre> <p>The code is using Boolean variables. A Boolean variable can contain a value of <code>True</code> or <code>False</code>.</p> <p>Step 2: Click Run.</p> <p>Here\u2019s what you\u2019ll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#else-if","title":"Else If","text":"<p><code>elif</code> lets you handle multiple conditions. <code>elif</code> stands for else if.</p> <p>Step 1: Copy and paste this code into the file:</p> <pre><code>selected_color = \"yellow\"\nif selected_color == \"blue\":\n    print(\"Blue means calmness.\")\nelif selected_color == \"yellow\":\n    print(\"Yellow means joy and happiness.\")\nelif selected_color == \"green\":\n    print(\"Green means freshness.\")\nelse:\n    print(\"That's a nice color!\")\n</code></pre> <p><code>else</code> catches any condition that\u2019s not caught by <code>if</code> and <code>elif</code>.</p> <p>Step 2: Click Run.</p> <p>Here\u2019s what you\u2019ll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#for-loop","title":"For Loop","text":"<p>For loop repeats actions for each item in a sequence.</p> <p>Step 1: Copy and paste this code into the file:</p> <pre><code>sport_list = [\"hockey\", \"soccer\", \"basketball\"]\nfor sport in sport_list:\n    print (sport)\n</code></pre> <p>The code is looping through the list items using a for loop.</p> <p>Step 2: Click Run.</p> <p>Here\u2019s what you\u2019ll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#while-loop","title":"While Loop","text":"<p>While loop repeats actions as long as the condition is true. Once the condition is false, it stops.</p> <p>Step 1: Copy and paste this code into the file:</p> <pre><code>b = 10\nwhile b &lt; 15:\n    b = b + 1\n    print (b)\n</code></pre> <p>The code initializes <code>b</code> to 10 and enters a while loop that continues as long as <code>b</code> is less than 15. During each loop iteration, <code>b</code> is incremented by 1, and the new value of <code>b</code> is printed.</p> <p>Step 2: Click Run.</p> <p>Here\u2019s what you\u2019ll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python/#functions","title":"Functions","text":"<p>Function is the block of code that runs when it\u2019s called. Define it by using the <code>def</code> keyword. A function can have one or more parameters or none.</p> <p>Step 1: Copy and paste this code into the file:</p> <pre><code>def guess_fruit():\n    while True:\n        user_value = input(\"Enter the fruit I like most: \")\n        if user_value == \"apple\":\n            print(\"That's correct!\")\n            break\n        else:\n            print(\"Nope, that's not the fruit I like. Try again.\")\nguess_fruit()\n</code></pre> <p>The last line calls the function. The function keeps prompting the user to enter the correct value until the guess is correct.</p> <p>The code uses the <code>break</code> keyword to break out of the while loop.</p> <p>Step 2: Click Run.</p> <p>Here\u2019s what you\u2019ll see:</p> <p></p> <p>Step 3: Enter orange. The program will prompt you to try again until the correct answer is entered:</p> <p></p> <p>Step 4: This time enter apple. The program will respond with That\u2019s correct!:</p> <p></p> <p>Now that you know the basics like variables, loops, and functions, you\u2019re ready to dive deeper into the world of Python. Happy coding!</p>"},{"location":"mytechdocs/doc2/techdoc2/","title":"Coming soon!!","text":"<p>Stay tuned for more documents as I continue to expand this collection!</p>"}]}