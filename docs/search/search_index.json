{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Welcome!</p> <p>Hi! I'm Dinesh Nair, and I'm highly motivated to create clear and impactful technical content. Discover more about my experience and recent work.</p> <ul> <li>Resume</li> <li>Technical Writing Portfolio</li> </ul>"},{"location":"my_writings.html","title":"Technical Writing Portfolio","text":"<ul> <li> <p>Python</p> <ul> <li>Getting Started with Python</li> <li>Casting in Python</li> <li>Lists, Dictionaries, Tuples, and Sets</li> <li>Classes and Objects</li> </ul> </li> <li> <p>Postman</p> <ul> <li>Introduction to Postman</li> <li>Obtaining Authorization</li> <li>Sending Requests</li> </ul> </li> <li> <p>Flask</p> <ul> <li>Getting Started with Flask</li> <li>First REST API Using Flask</li> </ul> </li> </ul>"},{"location":"resumedineshnair.html","title":"Resume of Dinesh Nair","text":"<p>LinkedIn: https://www.linkedin.com/in/dineshn1/ Email: techwriterdinesh@protonmail.com</p>"},{"location":"resumedineshnair.html#summary","title":"Summary","text":"<p>Technical writer skilled in enhancing product value through clear and impactful documentation.</p> <p>My approach is hands-on, actively working with the product, as demonstrated by the screenshots and practical examples featured in my recent work. I translate complex tech into clear narratives that empower users and drive sales. I'm here to make your product's brilliance shine by visually demonstrating its use with practical examples, rather than simply describing it.</p> <p>Looking for a remote work opportunity in India or an in-office role in Hyderabad, India. Feel free to connect with me on LinkedIn or reach out to me through email at techwriterdinesh@protonmail.com.</p>"},{"location":"resumedineshnair.html#skills","title":"Skills","text":"<p>Technical Documentation, REST API Documentation, Training Content, UX Writing, DITA, Markdown, Swagger, Postman, Git and GitHub, Oxygen XML Author, Confluence, Visual Studio Code, HTML, Python (Intermediate), SQL (Intermediate)</p>"},{"location":"resumedineshnair.html#experience","title":"Experience","text":""},{"location":"resumedineshnair.html#technical-content-development-and-knowledge-sharing","title":"Technical Content Development and Knowledge Sharing","text":"<p>Oct 2024 - Present</p> <p>Authored a diverse range of technical content on this website, covering topics such as Python, Postman, Flask, and REST API.</p> <p>My explanatory articles on Medium about DITA (Darwin Information Typing Architecture) and Diataxis:</p> <ul> <li>Using DITA for Technical Documentation</li> <li>My Take on the Di\u00e1taxis Approach</li> </ul>"},{"location":"resumedineshnair.html#principal-technical-writer","title":"Principal Technical Writer","text":"<p>Oracle, India   | Jan 2004 - Oct 2024</p> <ul> <li>Worked in various areas of user assistance, such as guides, UI labels and messages, release  notes, and REST documentation.</li> <li>Created training content for both instructor-led classes and online learning.</li> </ul>"},{"location":"resumedineshnair.html#education","title":"Education","text":"<p>Bachelor of Arts Delhi University</p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html","title":"Getting Started with Python","text":"<p>In this document, we'll go over the basics of Python. We'll cover how to set up your Windows environment, run your first Python file, and learn important concepts like comments, variables, conditional statements (if else and else if), loops (for and while), and functions. Let's get started!</p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#how-to-set-up-the-windows-environment","title":"How to Set Up the Windows Environment","text":"<p>To being developing with Python on Windows, you'll need to install:</p> <ol> <li> <p>Python: https://www.python.org/downloads/</p> </li> <li> <p>Visual Studio Code (VS Code): https://code.visualstudio.com/</p> </li> <li> <p>VS Code Extension for Python: https://marketplace.visualstudio.com/items?itemName=ms-python.python</p> </li> </ol>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#create-and-run-your-first-python-file","title":"Create and Run Your First Python File","text":"<p>Step 1: Open VS Code. Create a new Python file:</p> <p></p> <p>Step 2: Copy and paste this code into the file:</p> <pre><code>print (\"Hello world\")\nItem = \"Rain\"\nitem = \"Thunder\"\nprint (item + ' ' + Item)\n</code></pre> <p>This code is using:</p> <ul> <li><code>print</code> function to display text. A function is a block of code that runs when it's called.</li> <li>Variables <code>Item</code> and <code>item</code> to store strings Rain and Thunder.</li> </ul> <p>\ud83d\udca1 Tip: Variables are case sensitive. <code>Item</code> and <code>item</code> are two different variables.</p> <p>Step 3: Click Run:</p> <p></p> <p>Here's what you'll see when you run the file:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#comments","title":"Comments","text":"<p>Add comments to clarify your code. Python will not execute the comments. You can add a comment by adding # at the start of the line.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code># Greet the user\nprint(\"Hi there!\")\n</code></pre> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#variables","title":"Variables","text":"<p>Earlier, we used two variables <code>Item</code> and <code>item</code> to store string values. Let's now use variables to store numbers and numeric calculations.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>a = 20\nb = 5\naddition = a + b\nsubtraction = a - b\nmultiply = a * b\ndivision = a / b\nprint (addition)\nprint (subtraction)\nprint (multiply)\nprint (division)\n</code></pre> <p>The code is using variables <code>a</code> and <code>b</code> to store numbers and then variables <code>addition</code>, <code>subtraction</code>, <code>multiply</code>, and <code>division</code> to store the calculations.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#if-else","title":"If Else","text":"<p>Use If Else for defining conditions and then executing the code based on the conditions.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>item_available = True\nif item_available is False:\n    print (\"The item isn't available\")\nelse:\n    print (\"The item is available\")\nisCollegeOpen = True\nif isCollegeOpen:\n    print (\"The college is open\")\nelse:\n    print (\"The college is closed\")\n</code></pre> <p>The code is using Boolean variables. A Boolean variable can contain a value of <code>True</code> or <code>False</code>.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#else-if","title":"Else If","text":"<p><code>elif</code> lets you handle multiple conditions. <code>elif</code> stands for else if.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>selected_color = \"yellow\"\nif selected_color == \"blue\":\n    print(\"Blue means calmness.\")\nelif selected_color == \"yellow\":\n    print(\"Yellow means joy and happiness.\")\nelif selected_color == \"green\":\n    print(\"Green means freshness.\")\nelse:\n    print(\"That's a nice color!\")\n</code></pre> <p><code>else</code> catches any condition that's not caught by <code>if</code> and <code>elif</code>.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#for-loop","title":"For Loop","text":"<p>For loop repeats actions for each item in a sequence.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>sport_list = [\"hockey\", \"soccer\", \"basketball\"]\nfor sport in sport_list:\n    print (sport)\n</code></pre> <p>The code is looping through the list items using a for loop.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#while-loop","title":"While Loop","text":"<p>While loop repeats actions as long as the condition is true. Once the condition is false, it stops.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>b = 10\nwhile b &lt; 15:\n    b = b + 1\n    print (b)\n</code></pre> <p>The code initializes <code>b</code> to 10 and enters a while loop that continues as long as <code>b</code> is less than 15. During each loop iteration, <code>b</code> is incremented by 1, and the new value of <code>b</code> is printed.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#functions","title":"Functions","text":"<p>Function is the block of code that runs when it\u2019s called. Define it by using the <code>def</code> keyword. A function can have one or more parameters or none.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>def guess_fruit():\n    while True:\n        user_value = input(\"Enter the fruit I like most: \")\n        if user_value == \"apple\":\n            print(\"That's correct!\")\n            break\n        else:\n            print(\"Nope, that's not the fruit I like. Try again.\")\nguess_fruit()\n</code></pre> <p>The last line calls the function. The function keeps prompting the user to enter the correct value until the guess is correct.</p> <p>The code uses the <code>break</code> keyword to break out of the while loop.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p> <p>Step 3: Enter orange. The program will prompt you to try again until the correct answer is entered:</p> <p></p> <p>Step 4: This time enter apple. The program will respond with That\u2019s correct!:</p> <p></p> <p>Now that you know the basics like variables, loops, and functions, you're ready to dive deeper into the world of Python. Happy coding!</p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html","title":"Casting in Python","text":"<p>We'll be discussing the concept of casting and then moving on to practical examples of casting in Python.</p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html#concept-of-casting","title":"Concept of Casting","text":"<p>With casting, you can convert a variable from one type to another.</p> <p>If we use the following code, Python automatically decides x and y to be integer, based on assigned values:</p> <pre><code>x = 20\ny = 5\n</code></pre> <p>However, if x and y were strings, then we'll need to convert them to integers to perform arithmetic operations. In the following code, <code>x = \u201c20\u201d</code> and <code>y = \u201c5\u201d</code> are defined as strings. The code then uses the <code>int()</code> function to cast these strings to integers.</p> <pre><code>x = \"20\"\ny = \"5\"\nx = int(x)\ny = int(y)\ntotal = x + y\nprint(total)\n</code></pre> <p>The output will be:</p> <p></p> <p>If we didn't cast them into integers, then instead of arithmetic operation, the strings will be concatenated. For example, this code isn't casting x and y into integers:</p> <pre><code>x = \"20\"\ny = \"5\"\ntotal = x + y\nprint(total)\n</code></pre> <p>The output will be:</p> <p></p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html#converting-other-data-types","title":"Converting Other Data Types","text":"<p>Now that we've understood the concept of casting, let's see how to convert different data types in Python.</p> <p>In this code, the float value of 3.9 is converted to integer:</p> <pre><code>x = int (3.9)\nprint(x)\n</code></pre> <p>The output will be:</p> <p></p> <p>In this code, the integer value of 7 is converted to float:</p> <pre><code>x = float (7)\nprint(x)\n</code></pre> <p>The output will be:</p> <p></p> <p>In this code, the integer value of 21 is converted to string and concatenated with another string:</p> <pre><code>x = 21\nx = str(x)\nprint (\"Oranges purchased \" + x)\n</code></pre> <p>The output will be:</p> <p></p> <p>You've learned the concept of casting, with examples like string to integer and integer to float. Thanks for reading this short tutorial!</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html","title":"Lists, Dictionaries, Tuples, and Sets in Python","text":"<p>In this document, we'll explore fundamental data structures in Python: lists, dictionaries, tuples, and sets. </p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#lists","title":"Lists","text":"<p>A list can store multiples values. It's written with square brackets [ ].</p> <p>Lists are ordered, changeable, and can contain duplicate items.</p> <p>Here's a list:</p> <pre><code>a_list = [\"Jason\", True, \"Vishal\", \"Vishal\", 211]\nprint (a_list)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-list-item","title":"Access List Item","text":"<p>List items are ordered and accessed through their index number. Index number starts from 0.</p> <p>The following code is printing the second item in the list. Each item can be accessed through the index number.</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\nprint (departments[1])\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#change-list-item","title":"Change List Item","text":"<p>This code is changing the second item to Legal:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments[1] = \"Legal\"\nprint (departments)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-or-remove-list-item","title":"Add or Remove List Item","text":"<p>This code is using the append method to add an item to the list:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments.append(\"Procurement\")\nprint (departments)\n</code></pre> <p>Output:</p> <p></p> <p>To remove an item from the list, you can use the remove method. For example: <code>colors.remove(\u201cgreen\u201d)</code>.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#sort-list-items","title":"Sort List Items","text":"<p>This code is sorting the list in ascending alphabetical order:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments.sort()\nprint (departments)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#dictionaries","title":"Dictionaries","text":"<p>A dictionary stores items in key: value format. Keys must be unique, although values can be duplicates. Dictionary items are ordered and changeable.</p> <p>Dictionary is written with curly brackets { }.</p> <p>Here's a dictionary:</p> <pre><code>a_dict = {\n    \"integer\": 112,\n    \"boolean\": True,\n    \"string\": \"Jane\",\n    \"duplicate_int\": 112,\n}\nprint(a_dict)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#get-a-dictionary-value","title":"Get a Dictionary Value","text":"<p>This code prints the value for the key Fred:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nprint(teacher_subject [\"Fred\"])\n</code></pre> <p>Output:</p> <p></p> <p>Alternatively, you can use the get method to get the value:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nprint(teacher_subject.get(\"Fred\"))\n</code></pre>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#change-a-dictionary-value","title":"Change a Dictionary Value","text":"<p>This code changes the value for the key Jaya:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nteacher_subject [\"Jaya\"] = \"Immunology\"\nprint(teacher_subject)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-a-dictionary-item","title":"Add a Dictionary Item","text":"<p>This can be done by adding a new key and its value:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n}\nteacher_subject [\"Sujith\"] = \"Biochemistry\"\nprint(teacher_subject)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#remove-a-dictionary-item","title":"Remove a Dictionary Item","text":"<p>This can be done by using the pop method:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Sujith\": \"Biochemistry\",\n}\nprint(teacher_subject) #print before removal\nteacher_subject.pop(\"Sujith\")\nprint(teacher_subject) #print after removal\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#tuples","title":"Tuples","text":"<p>A tuple, like a list variable, can store multiple items. In a list, you can add, remove, and modify items. In contrast, once a tuple is created, you cannot change items in the tuple or add or remove items.</p> <p>Tuples are generally faster than list because of their read-only nature.</p> <p>Tuple is written with parenthesis ( ) and can contain duplicates.</p> <p>Here's a tuple:</p> <pre><code>a_tuple = (211, \"Anita\", True, 3.14, 211) \nprint(a_tuple)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-a-tuple-item","title":"Access a Tuple Item","text":"<p>Tuple items are ordered, and you can access them using an index number.</p> <p>This code will print the fourth item in the tuple:</p> <pre><code>departments = (\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\")\nprint (departments[3])\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-a-range-of-tuple-items","title":"Access a Range of Tuple Items","text":"<p>You can access a range of tuple items by using a colon.</p> <p>This code selects the items from 1 to 3 index numbers:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[1:4])\n</code></pre> <p>\ud83d\udca1 Tip: Note that with <code>[1:4]</code>, the selection starts at the start index and goes up to but doesn't include the end index. That means it includes indices 1, 2, and 3 but doesn't include 4.</p> <p>Output:</p> <p></p> <p>This code selects items from Marketing to the end:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[3:])\n</code></pre> <p>Output:</p> <p></p> <p>This code selects items from the beginning to IT:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[:3])\n</code></pre> <p>\ud83d\udca1 Tip: It includes start index (which is 0) but doesn't include end index (which is 3).</p> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#sets","title":"Sets","text":"<p>A set can also have multiple items, but they cannot be duplicates. You cannot change the set items but can add or remove items.</p> <p>A set is written with curly brackets { }.</p> <p>Here's a set:</p> <pre><code>a_set = {\"Jane\", 311, 7.14, True}\nprint(a_set)\n</code></pre> <p>When I run the code, I get this output:</p> <p></p> <p>Sets are unordered. So, again when I run the code, the order of items changes.</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-or-remove-a-set-item","title":"Add or Remove a Set Item","text":"<p>This code adds an item using the add method:</p> <pre><code>departments = {\"Finance\", \"Engineering\", \"IT\", \"Marketing\"}\ndepartments.add(\"Quality Control\")\nprint (departments)\n</code></pre> <p>Output:</p> <p></p> <p>To remove an item from a set, you can use the remove method. For example: <code>colors.remove(\u201cgreen\u201d)</code>.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#join-sets","title":"Join Sets","text":"<p>Use the | operator to join sets:</p> <pre><code>departments_set1 = {\"Finance\", \"Engineering\"}\ndepartments_set2 = {\"Marketing\", \"Legal\"}\ndepartments_set3 = {\"Procurement\", \"Logistics\"}\ncombined_set = departments_set1 | departments_set2 | departments_set3\nprint (combined_set)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#difference","title":"Difference","text":"<p>You can use the difference method to return only those items in the first set that aren't there in the other set.</p> <p>In this code, the difference method will return Legal and IT that aren't there in the other set:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\nset3 = departments_set1.difference(departments_set2)\nprint (set3)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#difference-update","title":"Difference Update","text":"<p>You can use difference_update method to retain only those items in the first set that aren't there in the other set.</p> <p>In this code, the difference_update method updates first set with Legal and IT:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\ndepartments_set1.difference_update(departments_set2)\nprint (departments_set1)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#symmetric-difference","title":"Symmetric Difference","text":"<p>You can use symmetric_difference method to return items that are in one of the sets but not in both:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\nset3 = departments_set1.symmetric_difference(departments_set2)\nprint (set3)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#convert-one-data-structure-into-another","title":"Convert One Data Structure into Another","text":"<p>There could be use cases where you want to convert one data structure into another. Let's cover few such cases.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#list-to-a-tuple","title":"List to a Tuple","text":"<p>For example, to make the data unchangeable, you might want to convert a list to a tuple:</p> <pre><code>a_list = [\"Astronomy\", 211, 71.1, \"History\"]\nprint (a_list)\na_tuple = tuple(a_list)\nprint (a_tuple)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#list-to-a-set","title":"List to a Set","text":"<p>For example, to remove duplicates, you might want to convert a list to a set:</p> <pre><code>a_list = [\"Astronomy\", 211, 71.1, \"History\", \"History\", 211]\nprint (a_list)\na_set = set(a_list)\nprint (a_set)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#dictionary-to-a-tuple","title":"Dictionary to a Tuple","text":"<p>For example, to have the key: value items become unchangeable, you might want to convert a dictionary to a tuple:</p> <pre><code>a_dict = {\"Astronomy\": 1, \"History\": 2}\nprint (a_dict)\na_tuple = tuple(a_dict.items())\nprint (a_tuple)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#tuple-to-a-list","title":"Tuple to a List","text":"<p>For example, to add an item, you might want to convert a tuple to a list:</p> <pre><code>a_tuple = (\"Astronomy\", \"History\", 211, 312)\nprint (a_tuple)\na_list = list(a_tuple)\na_list.append(\"Philosophy\")\nprint (a_list)\n</code></pre> <p>Output:</p> <p></p> <p>In this document, we've looked at the data structures in Python: lists, dictionaries, tuples, and sets. Each of these data structures has unique features. Lists provide ordered, changeable data; dictionaries provide key-value pair storage; tuples provide unchangeable data; and sets provide unique, unordered data.</p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html","title":"Classes and Objects in Python","text":"<p>This document will help you understand Python classes, objects, inheritance, and polymorphism.</p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#create-a-class-and-its-object","title":"Create a Class and its Object","text":"<p>A class defines a set of attributes and methods that its objects can use. A class is like a blueprint for creating objects.</p> <p>The following code:</p> <ul> <li> <p>Creates a class named <code>Customer</code> with customer attributes: name, age, and email address.</p> </li> <li> <p>Creates an instance of the <code>Customer</code> class named <code>customer1</code>; it means <code>customer1</code> is the object of the <code>Customer</code> class.</p> </li> <li> <p>Prints the attributes of the <code>customer1</code> object.</p> </li> </ul> <pre><code>class Customer:\n    # Initializer / Instance attributes\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n# Create an object customer1\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\n# Print values of the customer1 object's attributes\nprint(customer1.name)\nprint(customer1.age)\nprint(customer1.email)\n</code></pre> <p>The code uses the <code>init</code> method to assign values to attributes when the object is being created. The first parameter is <code>instance</code> that represents the instance of the class and allows you to access the class's attributes and methods. You can name this parameter anything like myobject.</p> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#string-representation-of-the-object","title":"String Representation of the Object","text":"<p>In this code, we use the <code>str</code> method to give a string representation of the object:</p> <pre><code>class Customer:\n    # Initializer / Instance Attributes\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    def __str__(instance): \n        return f\"{ instance.name}, {instance.age}, { instance.email}\"\n# Create an object customer1\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\n# Print the customer1 object\nprint(customer1)\n</code></pre> <p>When <code>print(customer1)</code> is called, the <code>str</code> method is invoked.</p> <p>Run the code to see this output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#add-a-method-to-the-class-to-handle-specific-functionality","title":"Add a Method to the Class to Handle Specific Functionality","text":"<p>Let's have a method in the class that checks whether the customer is an adult. In the following example, the <code>is_adult</code> method checks whether the customer is 18 years or older and then prints a message indicating that the customer is adult.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    # Method to check if the customer is an adult\n    def is_adult(instance): \n        if instance.age &gt;= 18: \n            print(instance.name + \" is an adult.\") \n        else: \n            print(instance.name + \" is not an adult.\")\ncustomer1  = Customer(\"James\", 19, \"james@example.com\")\ncustomer2  = Customer(\"Anita\", 17, \"anitha@example.com\")\n# Check if the customers are adults\ncustomer1.is_adult()\ncustomer2.is_adult()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#del-keyword","title":"Del Keyword","text":"<p>To delete the attributes of objects or the object itself, use the <code>del</code> keyword.</p> <p>In this example, we delete the <code>customer1</code> age and then delete the <code>customer2</code> object. We use the <code>try\u2026 except\u2026</code> blocks to catch exceptions that occur when the attribute or object isn't found after deletion and print an error message.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    def __str__(instance): \n        return f\"{ instance.name}, {instance.age}, { instance.email}\"\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\ncustomer2  = Customer(\"Shreya\", 26, \"shreya@example.com\")\n\n# Print both objects once before deletion.\nprint(customer1)\nprint(customer2)\n\n# Delete the age attribute of customer1 object.\ndel customer1.age\n\n# Try to print customer1 age. This will raise an AttributeError exception.\ntry: \n    print(customer1.age) \nexcept AttributeError: \n    print(\"The 'age' attribute of customer1 has been deleted.\")\n\n# Delete the customer2 object.\ndel customer2\n\n# Try to print customer2. This will raise a NameError exception.\ntry: \n    print(customer2) \nexcept NameError: \n    print(\"The customer2 object has been deleted.\")\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#inheritance","title":"Inheritance","text":"<p>With inheritance, a child class can inherit the method and attributes of the parent class.</p> <p>As shown in the following code, when you create the <code>NewCustomer</code> class as a child of the <code>Customer</code> class, it will inherit all the attributes and methods from the <code>Customer</code> class, including the <code>is_adult</code> method and the attributes name, age, and email. When you create an instance of <code>NewCustomer</code>, you can call the <code>isAdult</code> method to check if the customer is an adult. The code also uses the <code>pass</code> keyword to indicate that the child class isn\u2019t adding any method or attributes to itself.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    # Method to check if the customer is an adult\n    def is_adult(instance): \n        if instance.age &gt;= 18: \n            print(instance.name + \" is an adult.\") \n        else: \n            print(instance.name + \" is not an adult.\")\n# Child class\nclass NewCustomer(Customer):\n    pass\nnew_customer1 = NewCustomer(\"Tim\", 16, \"tim@example.com\")\nnew_customer2 = NewCustomer(\"Priya\", 20, \"priya@example.com\")\n# Check if the new customers are adults\nnew_customer1.is_adult()\nnew_customer2.is_adult()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#method-overriding-and-polymorphism","title":"Method Overriding and Polymorphism","text":"<p>When the child class wants a specific implementation of an inherited method, it can override the method.</p> <p>In the following code, <code>greet_customer</code> method is overridden in the <code>NewCustomer</code> class to provide a different greeting message. Objects of both classes call this method to display a different message depending on whether the customer is an existing one or a new one. It also shows polymorphism where the same method name has different forms of implementation.</p> <pre><code>class Customer:\n    def __init__(instance, name):\n        instance.name = name\n    # Method to greet customer\n    def greet_customer(instance): \n        print(\"Hello \" + instance.name + \". It's great to see you again!\")\n\n# Child class\nclass NewCustomer(Customer):\n    # Overriding the greet_customer method from the Customer class\n    def greet_customer(instance): \n        print(\"Hello \" + instance.name + \". Welcome to our platform!\")\n\ncustomer1  = Customer(\"James\")\nnew_customer1 = NewCustomer(\"Priya\")\n\n# Calling the method from the Customer class\ncustomer1.greet_customer()\n# Calling the overridden method from the NewCustomer class\nnew_customer1.greet_customer()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#super-function","title":"Super Function","text":"<p>We can use the <code>super</code> function to invoke methods in the parent class.</p> <p>In the following example, <code>super</code> is used for calling <code>init</code> method of the parent class to set the customer's name. Then, <code>super</code> is again used for calling the <code>get_greeting</code> method of parent class to greet the customer. The child class also adds its own message to the overridden method.</p> <pre><code># Parent class\nclass Customer:\n    def __init__(instance, name):\n        instance.name = name\n\n    def get_greeting(instance):\n        print(\"Hello, \" + instance.name + \"!\")\n\n# Child class inheriting from Customer\nclass NewCustomer(Customer):\n    def __init__(instance, name, customer_id):\n        super().__init__(name)  # Call the __init__ method of the parent class\n        instance.customer_id = customer_id  # Additional attribute for NewCustomer\n\n    def get_greeting(instance):\n        super().get_greeting() # Call the parent class's greeting method\n        print(\"Your Customer ID is: \" + str(instance.customer_id))\n\ncustomer = Customer(\"Alice\")\nnew_customer = NewCustomer(\"Diya\", 12345)\ncustomer.get_greeting()    \nnew_customer.get_greeting()\n</code></pre> <p>Output:</p> <p></p> <p>This document discussed the basic foundation of object-oriented programming, including classes, objects, inheritance, polymorphism, and method overriding. We also covered how to delete objects and attributes that can aid in memory management and the use of the <code>super</code> function for calling the parent class methods.</p>"},{"location":"mytechdocs/doc5/Postman_Intro.html","title":"Introduction to Postman","text":""},{"location":"mytechdocs/doc5/Postman_Intro.html#whats-postman","title":"What\u2019s Postman?","text":"<p>Postman is a tool for creating, testing, and using APIs.</p>"},{"location":"mytechdocs/doc5/Postman_Intro.html#whats-api","title":"What\u2019s API?","text":"<p>API (Application Programming Interface) enables different applications to talk to each other. This happens through a request and response mechanism.</p> <p></p>"},{"location":"mytechdocs/doc5/Postman_Intro.html#sample-api","title":"Sample API","text":"<p>To interact with an API, we'll use Reqres API. Reqres API is a mock API for experimenting and testing.</p> <p>The API endpoint highlighted in the screenshot is for fetching user data. Think of an endpoint as the location your application visits to get this data.</p> <p></p>"},{"location":"mytechdocs/doc5/Postman_Intro.html#get-request","title":"GET Request","text":"<p>A GET request is how one application asks another application for information. For instance, Application 1 might ask Application 2 for a list of users. Application 2 processes this request and sends back the data.</p>"},{"location":"mytechdocs/doc5/Postman_Intro.html#send-a-get-request","title":"Send a GET Request","text":"<p>Let's now send a GET request to the Reqres API to retrieve information about users.</p> <p>Step 1: Open Postman and click the + sign to select a new request.</p> <p>Step 2: In the text box adjacent to GET, enter the Reqres endpoint URL <code>https://reqres.in/api/users?page=1</code>.</p> <p></p> <p>Note the page parameter is 1. When handling APIs that return large sets of data, pagination helps break down the data into manageable chunks. Many APIs provide query parameters to go through pages, like <code>?page=1</code>, <code>?page=2</code>.</p> <p>Step 3: Click Send.</p> <p>Step 4: When you click Send, Postman responds with a 200 OK status and displays the response from the Reqres API. The response contains details of users such as first name and last name of users.</p> <p></p> <p>Step 5: To save this request to a collection, click Save. In Postman we can group requests into collections.</p> <p></p> <p>Step 6: Name the request.</p> <p>Step 7: Save the request in an existing collection or create a new collection.</p> <p>Step 8: After saving the request, it appears in the collection for easy access and future use.</p> <p></p> <p>Congrats! You\u2019ve learned the basics of Postman: what it is, sending GET requests, and creating collections.</p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html","title":"Postman: Obtaining Authorization","text":"<p>This document explains how to use Postman to connect to the Spotify API. We'll walk through the process of obtaining authorization and making authenticated API requests to Spotify.</p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html#401-unauthorized-why-authorization-is-essential","title":"401 Unauthorized: Why Authorization is Essential","text":"<p>Spotify implements the OAuth 2.0 authorization framework. With OAuth 2.0, an application first retrieves an access token for the API, then uses that token to authenticate subsequent requests.</p> <p></p> <p>Let's see what happens when we send a request to Spotify without setting up authorization.</p> <p>Step 1: Copy an endpoint from the Spotify doc.</p> <p></p> <p>Step 2: Open the Postman desktop app, paste the endpoint for GET, and click Send.</p> <p></p> <p>When we click Send, we see a 401 Unauthorized error as the response. That means the request isn't authorized to use Spotify API.</p> <p></p> <p>Let's look at how to obtain authorization from Spotify.</p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html#create-an-app-on-spotify","title":"Create an App on Spotify","text":"<p>Step 1: Once you've signed up for a Spotify Developer account, go to the Dashboard and click Create app.</p> <p>Step 2: Enter the app name and description.</p> <p>Step 3: Enter redirect URL. This is the URL where users can be redirected after authentication. It's also known as callback URL. As you'll see later on, we'll need to enter this URL in Postman as callback URL.</p> <p>I'm using the Postman desktop app, so I entered the localhost URL for callback. </p> <p></p> <p>If you're using Postman online, refer to the authorization topic of the Postman doc to find out the callback URL you should be using.</p> <p>Step 4: Click Save.</p> <p>Step 5: After save, click Settings of the app to copy client ID and secret. We'll use this ID and secret in Postman for configuring the authorization settings.</p> <p></p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html#configure-authorization-settings","title":"Configure Authorization Settings","text":"<p>Step 1: Open Postman. Create a new collection.</p> <p></p> <p>Step 2: Name the collection. For example, I named it Spotify.</p> <p>Step 3: Click the Authorization tab and select OAuth 2.0 as authorization type.</p> <p></p> <p>Next, we'll configure the new access token in the same Authorization tab.</p> <p>Step 4: Leave the default value of grant type as Authorization Code.</p> <p>Step 5: Enter callback URL as the same URL you entered in the Spotify app.</p> <p>Step 6: Enter the Auth URL as <code>https://accounts.spotify.com/authorize</code>. This is the authorization server's URL. You can find this URL in the Spotify doc.</p> <p>Step 7: Enter the access token URL as <code>https://accounts.spotify.com/api/token</code>. You can find this URL in the Spotify doc.</p> <p></p> <p>Step 8: Enter your Spotify app's client ID and secret. Postman suggests using variables to store these values to keep the sensitive data secure.</p> <p></p> <p>Step 9: Enter the scope of values you're requesting. For example, I entered playlist-read-private playlist-modify-private. You can find the list of acceptable scope values in the Spotify doc.</p> <p>Step 10: Click Save.</p> <p>Step 11: Scroll to the bottom of the page and click Get New Access Token.</p> <p>Step 12: Spotify will ask you to sign in. After signing in, you'll see the terms and conditions. Click Agree to proceed.</p> <p></p> <p>Step 13: When you click Agree, a token is automatically generated. You can change the name of the token or use the default name. Click Use Token to set this token to be used for all requests in your collection.</p> <p></p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html#send-an-api-request","title":"Send an API Request","text":"<p>Now that we\u2019ve got the access token, let\u2019s send a request.</p> <p>Step 1: Copy the endpoint of a request from the Spotify doc. For this example, we'll copy <code>https://api.spotify.com/v1/browse/new-releases</code>.</p> <p>Step 2: Create a new request in the Spotify collection and paste the endpoint for GET.</p> <p></p> <p>Step 3: Click Send.</p> <p>Step 4: When you click Send, Postman displays the response from Spotify, indicating that the authorization setup is working.</p> <p></p> <p>You did it! You've now learned how to configure authorization in Postman, and tested that your setup is working correctly.</p>"},{"location":"mytechdocs/doc7/Sending_Requests.html","title":"Postman: Sending Requests","text":"<p>In the previous document, we used Postman to complete the authorization process to gain access to the Spotify service and used the GET method to retrieve data. In this document, we'll extend our knowledge by examining the POST, PUT, and DELETE methods to interact with the Spotify service more comprehensively.</p>"},{"location":"mytechdocs/doc7/Sending_Requests.html#send-a-post-request","title":"Send a POST Request","text":"<p>Let's start with sending a POST request to create a playlist.</p> <p>Step 1: In the Spotify doc, go to the Create Playlist topic and copy the endpoint URL.</p> <p>Step 2: Open the Postman desktop app. We already created the Spotify collection in the previous tutorial. In the Spotify collection, add a new request.</p> <p></p> <p>Step 3: Give a name to the request. For instance, Create my playlist.</p> <p>Step 4: Select POST and paste the endpoint URL you copied from the Spotify doc. You\u2019ll need to replace <code>{user_id}</code> with the username from Spotify.</p> <p></p> <p>Step 5: Go to your account in the Spotify Web Player, then click Edit profile, and copy the username value.</p> <p></p> <p>Step 6: In Postman, replace the <code>{user_id}</code> value of the URL with the copied username. We can use a variable to store that username. Select the pasted username, then click Set as variable, and choose Set as new variable. Name the variable, for example, username, and set the scope of the variable as Collection. Finally, click Set variable. The endpoint will now have the variable in place of <code>{user_id}</code>.</p> <p></p> <p>Step 7: The body of the POST request should contain the data to be created. In the Spotify doc, go to the Create Playlist topic, copy the request body. Note that in request body false means the playlist will be private.</p> <p></p> <p>Step 8: In Postman, click Body, and then raw. Paste the request body. I edited the copied request body to give a name to the playlist and a description.</p> <p></p> <p>Step 9: Click Send.</p> <p>When you click send, you'll see Status 201 appear. This status means the playlist was successfully created. Go ahead and copy the playlist ID from the response - we'll need it for the next step.</p> <p></p> <p>You should now see your new playlist in your Spotify account as well.</p> <p></p> <p>Next, we'll add a couple of songs to the playlist.</p> <p>Step 1: In the Spotify doc, go to the Add Items to Playlist topic and copy the endpoint URL.</p> <p>Step 2: In the Spotify collection of Postman, add a new request. Name the request. For instance, Add songs to my playlist.</p> <p>Step 3: Select POST and paste the endpoint URL you copied from the Spotify doc.</p> <p>Step 4: In the endpoint URL, replace <code>{playlist_id}</code> with the ID of the playlist you just created. We'll use a variable like we used earlier for the username. Select the pasted playlist ID, then click Set as variable, followed by Set as new variable. Give the variable a name, for example, playlistID. Set the scope of the variable as Collection and click Set variable. The endpoint will now have the variable in place of <code>{playlist_id}</code>.</p> <p></p> <p>Step 5: In the Spotify doc, go to the Add Items to Playlist topic and copy the example of the request body.</p> <p></p> <p>Step 6: In Postman, click Body and then raw. Then, paste the request body. I edited the copied request body to add two songs of my choice to the playlist.</p> <p></p> <p>You can find the track ID within the URL of the song on Spotify. For example, if the URL is <code>https://open.spotify.com/track/2va1fTXhffQcr6TfPGf16y</code>, the track ID would be <code>2va1fTXhffQcr6TfPGf16y</code>.</p> <p>Step 7: Click Send.</p> <p>When you click send, you\u2019ll see Status 201 appear. This status means the songs were successfully added to the playlist. Spotify returns the snapshot ID of the playlist's current state.</p> <p></p> <p>You should now see the songs added to your playlist in your Spotify account as well.</p>"},{"location":"mytechdocs/doc7/Sending_Requests.html#send-a-put-request","title":"Send a PUT Request","text":"<p>We'll now use the PUT request to replace the two existing songs in the playlist with two new songs.</p> <p>Step 1: In the Spotify doc, go to the Update Playlist Items topic and copy the endpoint URL.</p> <p>Step 2: In the Spotify collection of Postman, add a new request. Give a name to the request. For instance, Update my playlist.</p> <p>Step 3: Select PUT and paste the endpoint URL you copied from the Spotify doc.</p> <p>Step 4: In the endpoint URL, replace <code>{playlist_id}</code> with the actual ID of the playlist. As we did previously for adding songs, we'll use the variable <code>playlistID</code>.</p> <p>Step 5: Copy the example of the URI array request body from the Spotify doc.</p> <p>Step 6: In Postman, click Body, and then raw. Then, paste the request body. I edited the request body to add the two songs of my choice to the playlist.</p> <p></p> <p>Step 7: Click Send.</p> <p>When you click send, you'll see Status 200 appear. This status means the songs were successfully added to the playlist, replacing the earlier songs. Spotify returns the snapshot ID of the playlist's current state.</p> <p></p> <p>You should now see your updated playlist in your Spotify account as well.</p>"},{"location":"mytechdocs/doc7/Sending_Requests.html#send-a-delete-request","title":"Send a DELETE Request","text":"<p>Let's now use the DELETE request to delete a song from the playlist.</p> <p>Step 1: In the Spotify doc, go to the Remove Playlist Items topic and copy the endpoint URL.</p> <p>Step 2: In the Spotify collection of Postman, add a new request. Give a name to the request. For instance, Delete from my playlist.</p> <p>Step 3: Select DELETE and paste the endpoint URL you copied from the Spotify doc.</p> <p>Step 4: In the endpoint URL, replace <code>{playlist_id}</code> with the actual ID of the playlist. As we did previously for adding songs, we'll use the variable <code>playlistID</code>.</p> <p>Step 5: Copy the example of the URI array request body from the Spotify doc.</p> <p>Step 6: In Postman, click Body, and then raw. Then, paste the request body. I edited the request body to specify the one song that will be deleted from the playlist.</p> <p></p> <p>Step 7: Click Send.</p> <p>When you click send, you'll see Status 200 appear. This status means the song was successfully deleted from the playlist. Spotify returns the snapshot ID of the playlist's current state.</p> <p></p> <p>You should now see your updated playlist in your Spotify account as well. The playlist will no longer include the song we just deleted.</p> <p>In this document, we covered how to use POST, PUT, and DELETE requests with the Spotify API and Postman. We added songs to a playlist with a POST request, updated the playlist with new songs using a PUT request, and deleted a song with a DELETE request. By referencing the Spotify documentation, we learned how to construct our request bodies and understood the endpoints necessary for these operations. This hands-on experience should give you a good understanding of working with APIs.</p>"},{"location":"mytechdocs/doc8/Flask_Intro.html","title":"Getting Started with Flask: Building a Dynamic Web Page","text":"<p>Flask is a Python framework to create web applications. In this guide, we will explore how to build a dynamic web page using Flask.</p>"},{"location":"mytechdocs/doc8/Flask_Intro.html#set-up-the-flask-environment-in-windows","title":"Set Up the Flask Environment in Windows","text":"<p>Step 1: Open the terminal in Visual Studio Code and type: <code>python -m venv venv</code></p> <p>This creates a virtual environment. Using virtual environments ensures that the dependencies for one project don't interfere with the dependencies of other projects.</p> <p>Step 2: Activate the virtual environment: <code>venv\\Scripts\\activate</code></p> <p>Step 3: Install Flask: <code>pip install Flask</code></p>"},{"location":"mytechdocs/doc8/Flask_Intro.html#create-the-flask-application","title":"Create the Flask Application","text":"<p>To illustrate how to make a web page dynamic, we'll create a Flask application that will collect teacher and course names from users and display these names. The application stores this information in a JSON file.</p> <p>Step 1: Create a file named <code>teachers.py</code>.</p> <p>Step 2: Import necessary components and create an instance of the Flask class:</p> <pre><code>import json\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n</code></pre> <ul> <li> <p>We\u2019ve imported Python's built-in <code>json</code> module, which is used for working with JSON (JavaScript Object Notation) data. JSON is a common data format used for transmitting data, especially in web applications. We\u2019re also importing the Flask class that\u2019s used to create a Flask application.</p> </li> <li> <p><code>render_template</code> is a Flask function for working with HTML templates. Flask allows you to use templates (usually <code>.html</code> files) to dynamically generate HTML by passing data to them.</p> </li> <li> <p><code>request</code> is used to access incoming HTTP request data in Flask. When a user submits data through a form, the <code>request</code> object provides access to the data.</p> </li> <li> <p><code>app = Flask(__name__)</code>: Initializes the Flask application.</p> </li> </ul> <p>Step 3: Define the load and save functions for teacher names and their corresponding courses:</p> <pre><code># Function to load teacher and course names from a JSON file\ndef load_teachers():\n    try:\n        with open('teachers.json', 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(\"Currently, there's no record for teachers and their courses.\")\n        return {}\n\n# Function to save teacher and course names to a JSON file\ndef save_teachers(teachers_dict):\n    with open('teachers.json', 'w') as file:\n        json.dump(teachers_dict, file)\n\n# Load initial data\nteachers_dict = load_teachers()\n</code></pre> <ul> <li> <p>When the Flask application is launched, <code>load_teachers()</code> is called to read the data from the <code>teachers.json</code> file and store it in the <code>teachers_dict</code> dictionary.</p> </li> <li> <p>When a user submits the form (POST request), the <code>save_teachers(teachers_dict)</code> function is called to save the updated data to the <code>teachers.json</code> file. If the JSON file doesn't exist, the function creates it.</p> </li> </ul> <p>Step 4: Define the route and handle the HTML form submission:</p> <pre><code>@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        teacher = request.form['teacher']\n        course = request.form['course']\n        teachers_dict[teacher] = course\n        save_teachers(teachers_dict)\n    return render_template('home.html', teachers=teachers_dict)\n</code></pre> <ul> <li> <p><code>'/'</code> in <code>@app.route('/', methods=['GET', 'POST'])</code> indicates the root URL. For example, when the user accesses the page using <code>http://127.0.0.1:5000</code>, the root URL is accessed. When the user accesses the root URL, the <code>home</code> function is triggered. <code>methods=['GET', 'POST']</code> specifies that the route can handle both GET and POST HTTP methods.</p> </li> <li> <p>When a user submits the form (POST request), the <code>save_teachers(teachers_dict)</code> function is called to save the updated data to the <code>teachers.json</code> file.</p> </li> <li> <p>The <code>render_template('home.html', teachers=teachers_dict)</code> function displays the HTML page that the user sees when accessing the root URL (GET request). The function populates the <code>teachers</code> variable in the HTML template with the dictionary data from <code>teachers_dict</code>. <code>teachers_dict</code> contains the data that the <code>load_teachers()</code> function retrieves from the JSON file.</p> </li> </ul> <p>Step 5: Run the application when the <code>teachers.py</code> file is run:</p> <pre><code>if __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>This will run the application locally in the Flask development server with the debug mode on. When you run a Python file directly, the special built-in variable <code>__name__</code> is set to <code>'__main__'</code>.</p>"},{"location":"mytechdocs/doc8/Flask_Intro.html#create-the-html-file","title":"Create the HTML File","text":"<p>Create a <code>templates</code> directory. Then, create<code>home.html</code> inside this directory with this code:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Teachers and Courses&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Teachers and Their Corresponding Courses&lt;/h1&gt;\n    &lt;ul&gt;\n    {% for teacher, course in teachers.items() %}\n        &lt;li&gt;{{ teacher }}: {{ course }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n\n    &lt;h2&gt;Add a New Teacher and Course&lt;/h2&gt;\n    &lt;form method=\"POST\"&gt;\n        &lt;label for=\"teacher\"&gt;Teacher:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"teacher\" name=\"teacher\" required&gt;\n        &lt;br&gt;&lt;br&gt;\n        &lt;label for=\"course\"&gt;Course:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"course\" name=\"course\" required&gt;\n        &lt;br&gt;&lt;br&gt;\n        &lt;button type=\"submit\"&gt;Add&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li> <p>The for loop iterates over the <code>teachers</code> dictionary and displays each teacher and their corresponding course in a list format.</p> </li> <li> <p><code>teachers.items()</code> returns all key-value pairs (teacher-course pairs) from the <code>teachers</code> dictionary.</p> </li> <li> <p><code>teacher</code> represents the key (teacher's name), and <code>course</code> represents the value (course name).</p> </li> </ul>"},{"location":"mytechdocs/doc8/Flask_Intro.html#run-the-application","title":"Run the Application","text":"<p>Take a look at the directory structure in the Explorer pane. This is what the files look like, with the HTML file located in the <code>templates</code> folder:</p> <p></p> <p>Now, let's run the application.</p> <p>Step 1: Click Run for <code>teachers.py</code>.</p> <p>Step 2: Your application should now be running on <code>http://127.0.0.1:5000/</code>.</p> <p>In the terminal, press <code>Ctrl</code> and click the link to open the web page:</p> <p></p> <p>Step 3: Enter the teacher's name and the corresponding course. Once you fill in both fields, click Add.</p> <p></p> <p>Step 4: Keep adding more records. As you add them, the records will appear on the page:</p> <p></p> <p>Even if you stop the server and run the Python file again to start the server, the previously added records will still be displayed on the page. This is because we're storing them in the JSON file that was created and updated by the <code>save_teachers</code> function. You can check the JSON file by clicking on it in the Explorer pane:</p> <p></p> <p>Congratulations! You've learned how to build a dynamic web page using Flask. We created a Python file that allows users to add teacher and course names, stored the added information in a JSON file for data persistence, and displayed the added information on the page.</p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html","title":"Building Your First REST API Using Flask","text":"<p>Flask is a Python web framework. In this walkthrough, we'll create a basic REST API to manage a list of employees. We'll cover the following operations:</p> <ul> <li> <p>GET requests to retrieve employee information</p> </li> <li> <p>POST requests to add new employees</p> </li> <li> <p>PUT requests to update existing employee details</p> </li> <li> <p>DELETE requests to remove employees from the list</p> </li> </ul> <p>By following along, we'll discover the fundamental techniques for creating an API using Flask, including handling HTTP requests and responses, and creating endpoints.</p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#set-up-the-flask-environment-in-windows","title":"Set Up the Flask Environment in Windows","text":"<p>Step 1: Open the terminal in Visual Studio Code and type: <code>python -m venv venv</code></p> <p>This creates a virtual environment. Using virtual environments ensures that the dependencies for one project don't interfere with the dependencies of other projects.</p> <p>Step 2: Activate the virtual environment: <code>venv\\Scripts\\activate</code></p> <p>Step 3: Install Flask: <code>pip install Flask</code></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#create-the-flask-application","title":"Create the Flask Application","text":"<p>Step 1: Create a file named <code>employees.py</code>.</p> <p>Step 2: Import necessary components and create an instance of the Flask class:</p> <pre><code>from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n</code></pre> <ul> <li> <p>Flask is the main class for creating a Flask application.</p> </li> <li> <p>request object handles incoming HTTP requests, such as GET and POST.</p> </li> <li> <p>jsonify function converts Python dictionaries into JSON responses. We will see later that each employee item will be stored as a dictionary and sent as a JSON response.</p> </li> </ul> <p><code>app = Flask(__name__)</code> creates an instance of the Flask class, initializing a new Flask application.</p> <p>Step 3: Define the data structure for storing employee data:</p> <pre><code>employees = [\n    {'id': 1, 'name': 'James Smith', 'role': 'Business Analyst'},\n    {'id': 2, 'name': 'Ananya Patel', 'role': 'Operations Manager'}\n]\n</code></pre> <p>Here, we define a list of dictionaries, where each dictionary represents an employee.</p> <p>Step 4: Create an API endpoint for adding a new employee (POST):</p> <pre><code>@app.route('/employees', methods=['POST'])\ndef add_employee():\n    new_employee = request.json\n    employees.append(new_employee)\n    return jsonify(new_employee), 201\n</code></pre> <p>The <code>def add_employee()</code> function is run when a POST request is made to the <code>/employees</code> endpoint. The function takes the new employee data from the request, adds it to the <code>employees</code> list, and returns the new employee data in JSON format with a <code>201 Created</code> status code.</p> <p>Step 5: Create an API endpoint for getting all employee (GET):</p> <pre><code>@app.route('/employees', methods=['GET'])\ndef get_employees():\n    return jsonify(employees)\n</code></pre> <p>The function returns the list of all employees.</p> <p>Step 6: Create an API endpoint for getting a specific employee (GET):</p> <pre><code>@app.route('/employees/&lt;int:id&gt;', methods=['GET'])\ndef get_employee(id):\n    for employee in employees:\n        if employee['id'] == id:\n            return jsonify(employee)\n    return jsonify({'error': 'Employee not found'}), 404\n</code></pre> <p>The <code>&lt;int:id&gt;</code> part of the route means that the endpoint expects an integer as part of the URL. The integer represents the employee's ID.</p> <p>Flask extracts the <code>id</code> value from the URL and passes it to the <code>get_employee(id)</code> function. For example, if the endpoint is <code>http://localhost:5000/employees/2</code>, Flask assigns <code>2</code> to the variable <code>id</code> and calls the function with <code>id</code> set to <code>2</code>.</p> <p>The function uses a for loop to check if an <code>id</code> matches the <code>id</code> provided through the URL. If a match is found, the function returns the employee's data in JSON format using <code>jsonify(employee)</code>. If no matching employee is found, the function returns a JSON response with an error message and a <code>404 Not Found</code> status.</p> <p>Step 7: Create an API endpoint for updating a specific employee (PUT):</p> <pre><code>@app.route('/employees/&lt;int:id&gt;', methods=['PUT'])\ndef update_employee(id):\n    updated_data = request.json\n    for employee in employees:\n        if employee['id'] == id:\n            employee.update(updated_data)\n            return jsonify(employee)\n    return jsonify({'error': 'Employee not found'}), 404\n</code></pre> <p>Flask extracts the <code>id</code> value from the URL and passes it to the <code>update_employee(id)</code> function.</p> <p>The function uses a for loop to check if an <code>id</code> matches the <code>id</code> provided through the URL. If a match is found, the function updates the employee data and returns the updated data in JSON format using <code>jsonify(employee)</code>. If no matching employee is found, the function returns a JSON response with an error message and a <code>404 Not Found</code> status.</p> <p>Step 8: Create an API endpoint for deleting a specific employee (DELETE):</p> <pre><code>@app.route('/employees/&lt;int:id&gt;', methods=['DELETE'])\ndef delete_employee(id):\n    employee = next((emp for emp in employees if emp['id'] == id), None)\n    if employee:\n        employees.remove(employee)\n        return '', 204\n    else:\n        return jsonify({'error': 'Employee not found'}), 404\n</code></pre> <p>Flask extracts the <code>id</code> value from the URL and passes it to the <code>delete_employee(id)</code> function.</p> <p>This line <code>employee = next((emp for emp in employees if emp['id'] == id), None)</code> uses a generator expression to find the first employee in the <code>employees</code> list whose <code>id</code> matches the given <code>id</code>. If a matching employee is found, it's assigned to the <code>employee</code> variable. If no match is found, <code>employee</code> is set to <code>None</code>.</p> <p>If a matching employee is found, it's removed from the <code>employees</code> list using the <code>remove</code> method.</p> <p>The function then returns an empty response body with a <code>204 No Content</code> status code, indicating that the deletion was successful.</p> <p>Step 9: Run the application when the <code>employees.py</code> file is run:</p> <pre><code>if __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>This ensures that the Flask application runs with debugging enabled when you execute <code>employees.py</code> directly.</p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#run-the-application","title":"Run the Application","text":"<p>On Visual Studio Code, click Run for <code>employees.py</code> to run the Flask application. This will launch the server locally on 127.0.0.1, usually port 5000:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#interacting-with-the-flask-employees-api","title":"Interacting with the Flask Employees API","text":"<p>Once the server is up and running, you can use tools like Postman, cURL, or any other API testing tool to test the endpoints for adding, retrieving, updating, and deleting employee data.</p> <p>We'll use Postman for this walkthrough.</p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-post-request-to-add-a-new-employee","title":"Sending a POST Request to Add a New Employee","text":"<p>Step 1: In Postman, create a new request. You can group all your requests in a collection. For example, I created a collection specific for the Employees API called Dinesh Testing Employees API:</p> <p></p> <p>Step 2: Select the POST method from the dropdown menu.</p> <p>Step 3: Enter the endpoint URL. For example, <code>http://127.0.0.1:5000/employees</code>.</p> <p>Step 4: Click on the Body tab.</p> <p>Step 5: Select the raw radio button.</p> <p>Step 6: Choose JSON from the dropdown menu next to the raw radio button.</p> <p>Step 7: Enter the request body in JSON format. Here's an example of what the body might look like:</p> <pre><code>{\n    \"id\": 3,\n    \"name\": \"David Williams\",\n    \"role\": \"Business Analyst\"\n}\n</code></pre> <p>Step 8: Click Send to submit the request:</p> <p></p> <p>You will get a response in the response pane, showing the newly added employee's data and a <code>201 Created</code> status code:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-get-request-to-retrieve-all-employees","title":"Sending a GET Request to Retrieve All Employees","text":"<p>Step 1: Create a new request.</p> <p>Step 2: Select the GET method from the dropdown menu.</p> <p>Step 3: Enter the endpoint URL. For example, <code>http://127.0.0.1:5000/employees</code>.</p> <p>Step 4: Click Send.</p> <p>You will get a response showing the data of all the employees and a <code>200 OK</code> status code:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-get-request-to-retrieve-a-specific-employee","title":"Sending a GET Request to Retrieve a Specific Employee","text":"<p>Step 1: Create a new request.</p> <p>Step 2: Select the GET method from the dropdown menu.</p> <p>Step 3: Enter the endpoint URL. In this case, we'll enter an endpoint URL with a specific employee ID. For example, <code>http://127.0.0.1:5000/employees/2</code>.</p> <p>Step 4: Click Send.</p> <p>You will get a response showing the data of the employee who has an ID of 2 and a <code>200 OK</code> status code:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-put-request-to-update-an-employees-information","title":"Sending a PUT Request to Update an Employee's Information","text":"<p>Step 1: Create a new request.</p> <p>Step 2: Select the PUT method from the dropdown menu.</p> <p>Step 3: Enter the endpoint URL. In this case, we'll enter an endpoint URL with a specific employee ID. For example, <code>http://127.0.0.1:5000/employees/3</code>.</p> <p>Step 4: Click on the Body tab.</p> <p>Step 5: Select the raw radio button.</p> <p>Step 6: Choose JSON from the dropdown menu next to the raw radio button.</p> <p>Step 7: Enter the request body in JSON format. Here's an example of what the body might look like:</p> <pre><code>{\n  \"id\": 3,\n  \"name\": \"David Williams\",\n  \"role\": \"Senior Business Analyst\"\n}\n</code></pre> <p>We're changing the role from Business Analyst to Senior Business Analyst.</p> <p>Step 8: Click Send.</p> <p>You should receive a response with the updated employee data and a <code>200 OK</code> response code:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-delete-request-to-remove-an-employee","title":"Sending a DELETE Request to Remove an Employee","text":"<p>Step 1: Create a new request.</p> <p>Step 2: Select the DELETE method from the dropdown menu.</p> <p>Step 3: Enter the endpoint URL. In this case, we'll enter an endpoint URL with a specific employee ID. For example, <code>http://127.0.0.1:5000/employees/3</code>.</p> <p>Step 4: Click Send.</p> <p>Upon deletion, you should receive a response with no content and a <code>204 No Content</code> status code:</p> <p></p> <p>Congratulations! By following this walkthrough, we successfully created an Employees API using Flask. By handling GET, POST, PUT, and DELETE requests, this API adheres to the principles of RESTful web services.</p>"}]}