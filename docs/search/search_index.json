{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"<p>Welcome!  </p> <ul> <li>View My Resume</li> <li>View My Writings</li> </ul>"},{"location":"resumedineshnair.html","title":"Resume of Dinesh Nair","text":"<p>LinkedIn: https://www.linkedin.com/in/dineshn1/ </p>"},{"location":"resumedineshnair.html#summary","title":"Summary","text":"<p>Experienced technical writer with a passion for creating clear and concise documentation for a developer audience.</p> <p>Looking for a remote work opportunity in India or an in-office role in Hyderabad, India. Please feel free to contact me through LinkedIn.</p>"},{"location":"resumedineshnair.html#skills","title":"Skills","text":"<p>Technical Documentation, REST API Documentation, Training Content, UX Writing, DITA, Markdown, Swagger, Postman, Git and GitHub, Oxygen XML Author, Confluence, Visual Studio Code, HTML, Python (Intermediate), SQL (Intermediate)</p>"},{"location":"resumedineshnair.html#experience","title":"Experience","text":""},{"location":"resumedineshnair.html#technical-content-development-and-knowledge-sharing","title":"Technical Content Development and Knowledge Sharing","text":"<p>Oct 2024 - Present</p> <p>Authored a diverse range of technical content on Hashnode, covering topics such as:</p> <ul> <li>Python programming and web development (Flask).</li> <li>Database management (PostgreSQL).</li> <li>API development and documentation (RESTful APIs, Swagger, Postman).</li> <li>Version control and documentation (Git/GitHub, Markdown, reStructuredText).</li> </ul> <p>My explanatory articles on Medium about DITA (Darwin Information Typing Architecture) and Diataxis:</p> <ul> <li>Using DITA for Technical Documentation</li> <li>My Take on the Di\u00e1taxis Approach</li> </ul>"},{"location":"resumedineshnair.html#principal-technical-writer","title":"Principal Technical Writer","text":"<p>Oracle, India   | Jan 2004 - Oct 2024</p> <ul> <li>Worked in various areas of user assistance, such as guides, UI labels and messages, release  notes, and REST documentation.</li> <li>Created training content for both instructor-led classes and online learning.</li> </ul>"},{"location":"resumedineshnair.html#education","title":"Education","text":"<p>Bachelor of Arts Delhi University</p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html","title":"Getting Started with Python","text":"<p>In this guide, we'll go over the basics of Python. We'll cover how to set up your Windows environment, run your first Python file, and learn important concepts like comments, variables, conditional statements (if else and else if), loops (for and while), and functions. Let's get started!</p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#how-to-set-up-the-windows-environment","title":"How to Set Up the Windows Environment","text":"<p>To being developing with Python on Windows, you'll need to install:</p> <ol> <li> <p>Python: https://www.python.org/downloads/</p> </li> <li> <p>Visual Studio Code (VS Code): https://code.visualstudio.com/</p> </li> <li> <p>VS Code Extension for Python: https://marketplace.visualstudio.com/items?itemName=ms-python.python</p> </li> </ol>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#create-and-run-your-first-python-file","title":"Create and Run Your First Python File","text":"<p>Step 1: Open VS Code. Create a new Python file:</p> <p></p> <p>Step 2: Copy and paste this code into the file:</p> <pre><code>print (\"Hello world\")\nItem = \"Rain\"\nitem = \"Thunder\"\nprint (item + ' ' + Item)\n</code></pre> <p>This code is using:</p> <ul> <li><code>print</code> function to display text. A function is a block of code that runs when it's called.</li> <li>Variables <code>Item</code> and <code>item</code> to store strings Rain and Thunder.</li> </ul> <p>\ud83d\udca1 Tip: Variables are case sensitive. <code>Item</code> and <code>item</code> are two different variables.</p> <p>Step 3: Click Run:</p> <p></p> <p>Here's what you'll see when you run the file:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#comments","title":"Comments","text":"<p>Add comments to clarify your code. Python will not execute the comments. You can add a comment by adding # at the start of the line.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code># Greet the user\nprint(\"Hi there!\")\n</code></pre> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#variables","title":"Variables","text":"<p>Earlier, we used two variables <code>Item</code> and <code>item</code> to store string values. Let's now use variables to store numbers and numeric calculations.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>a = 20\nb = 5\naddition = a + b\nsubtraction = a - b\nmultiply = a * b\ndivision = a / b\nprint (addition)\nprint (subtraction)\nprint (multiply)\nprint (division)\n</code></pre> <p>The code is using variables <code>a</code> and <code>b</code> to store numbers and then variables <code>addition</code>, <code>subtraction</code>, <code>multiply</code>, and <code>division</code> to store the calculations.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#if-else","title":"If Else","text":"<p>Use If Else for defining conditions and then executing the code based on the conditions.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>item_available = True\nif item_available is False:\n    print (\"The item isn't available\")\nelse:\n    print (\"The item is available\")\nisCollegeOpen = True\nif isCollegeOpen:\n    print (\"The college is open\")\nelse:\n    print (\"The college is closed\")\n</code></pre> <p>The code is using Boolean variables. A Boolean variable can contain a value of <code>True</code> or <code>False</code>.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#else-if","title":"Else If","text":"<p><code>elif</code> lets you handle multiple conditions. <code>elif</code> stands for else if.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>selected_color = \"yellow\"\nif selected_color == \"blue\":\n    print(\"Blue means calmness.\")\nelif selected_color == \"yellow\":\n    print(\"Yellow means joy and happiness.\")\nelif selected_color == \"green\":\n    print(\"Green means freshness.\")\nelse:\n    print(\"That's a nice color!\")\n</code></pre> <p><code>else</code> catches any condition that's not caught by <code>if</code> and <code>elif</code>.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#for-loop","title":"For Loop","text":"<p>For loop repeats actions for each item in a sequence.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>sport_list = [\"hockey\", \"soccer\", \"basketball\"]\nfor sport in sport_list:\n    print (sport)\n</code></pre> <p>The code is looping through the list items using a for loop.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#while-loop","title":"While Loop","text":"<p>While loop repeats actions as long as the condition is true. Once the condition is false, it stops.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>b = 10\nwhile b &lt; 15:\n    b = b + 1\n    print (b)\n</code></pre> <p>The code initializes <code>b</code> to 10 and enters a while loop that continues as long as <code>b</code> is less than 15. During each loop iteration, <code>b</code> is incremented by 1, and the new value of <code>b</code> is printed.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#functions","title":"Functions","text":"<p>Function is the block of code that runs when it\u2019s called. Define it by using the <code>def</code> keyword. A function can have one or more parameters or none.</p> <p>Step 1: Replace the previous content of your file with this code:</p> <pre><code>def guess_fruit():\n    while True:\n        user_value = input(\"Enter the fruit I like most: \")\n        if user_value == \"apple\":\n            print(\"That's correct!\")\n            break\n        else:\n            print(\"Nope, that's not the fruit I like. Try again.\")\nguess_fruit()\n</code></pre> <p>The last line calls the function. The function keeps prompting the user to enter the correct value until the guess is correct.</p> <p>The code uses the <code>break</code> keyword to break out of the while loop.</p> <p>Step 2: Click Run.</p> <p>Here's what you'll see:</p> <p></p> <p>Step 3: Enter orange. The program will prompt you to try again until the correct answer is entered:</p> <p></p> <p>Step 4: This time enter apple. The program will respond with That\u2019s correct!:</p> <p></p> <p>Now that you know the basics like variables, loops, and functions, you're ready to dive deeper into the world of Python. Happy coding!</p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html","title":"Casting in Python","text":"<p>We'll be discussing the concept of casting and then moving on to practical examples of casting in Python.</p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html#concept-of-casting","title":"Concept of Casting","text":"<p>With casting, you can convert a variable from one type to another.</p> <p>If we use the following code, Python automatically decides x and y to be integer, based on assigned values:</p> <pre><code>x = 20\ny = 5\n</code></pre> <p>However, if x and y were strings, then we'll need to convert them to integers to perform arithmetic operations. In the following code, <code>x = \u201c20\u201d</code> and <code>y = \u201c5\u201d</code> are defined as strings. The code then uses the <code>int()</code> function to cast these strings to integers.</p> <pre><code>x = \"20\"\ny = \"5\"\nx = int(x)\ny = int(y)\ntotal = x + y\nprint(total)\n</code></pre> <p>The output will be:</p> <p></p> <p>If we didn't cast them into integers, then instead of arithmetic operation, the strings will be concatenated. For example, this code isn't casting x and y into integers:</p> <pre><code>x = \"20\"\ny = \"5\"\ntotal = x + y\nprint(total)\n</code></pre> <p>The output will be:</p> <p></p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html#converting-other-data-types","title":"Converting Other Data Types","text":"<p>Now that we've understood the concept of casting, let's see how to convert different data types in Python.</p> <p>In this code, the float value of 3.9 is converted to integer:</p> <pre><code>x = int (3.9)\nprint(x)\n</code></pre> <p>The output will be:</p> <p></p> <p>In this code, the integer value of 7 is converted to float:</p> <pre><code>x = float (7)\nprint(x)\n</code></pre> <p>The output will be:</p> <p></p> <p>In this code, the integer value of 21 is converted to string and concatenated with another string:</p> <pre><code>x = 21\nx = str(x)\nprint (\"Oranges purchased \" + x)\n</code></pre> <p>The output will be:</p> <p></p> <p>You've learned the concept of casting, with examples like string to integer and integer to float. Thanks for reading this short tutorial!</p>"},{"location":"mytechdocs/doc22/techdoc2.html","title":"Coming soon!!","text":"<p>Stay tuned for more documents as I continue to expand this collection!</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html","title":"Lists, Dictionaries, Tuples, and Sets in Python","text":"<p>In this document, we'll explore fundamental data structures in Python: lists, dictionaries, tuples, and sets. </p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#lists","title":"Lists","text":"<p>A list can store multiples values. It's written with square brackets [ ].</p> <p>Lists are ordered, changeable, and can contain duplicate items.</p> <p>Here's a list:</p> <pre><code>a_list = [\"Jason\", True, \"Vishal\", \"Vishal\", 211]\nprint (a_list)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-list-item","title":"Access List Item","text":"<p>List items are ordered and accessed through their index number. Index number starts from 0.</p> <p>The following code is printing the second item in the list. Each item can be accessed through the index number.</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\nprint (departments[1])\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#change-list-item","title":"Change List Item","text":"<p>This code is changing the second item to Legal:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments[1] = \"Legal\"\nprint (departments)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-or-remove-list-item","title":"Add or Remove List Item","text":"<p>This code is using the append method to add an item to the list:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments.append(\"Procurement\")\nprint (departments)\n</code></pre> <p>Output:</p> <p></p> <p>To remove an item from the list, you can use the remove method. For example: <code>colors.remove(\u201cgreen\u201d)</code>.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#sort-list-items","title":"Sort List Items","text":"<p>This code is sorting the list in ascending alphabetical order:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments.sort()\nprint (departments)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#dictionaries","title":"Dictionaries","text":"<p>A dictionary stores items in key: value format. Keys must be unique, although values can be duplicates. Dictionary items are ordered and changeable.</p> <p>Dictionary is written with curly brackets { }.</p> <p>Here's a dictionary:</p> <pre><code>a_dict = {\n    \"integer\": 112,\n    \"boolean\": True,\n    \"string\": \"Jane\",\n    \"duplicate_int\": 112,\n}\nprint(a_dict)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#get-a-dictionary-value","title":"Get a Dictionary Value","text":"<p>This code prints the value for the key Fred:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nprint(teacher_subject [\"Fred\"])\n</code></pre> <p>Output:</p> <p></p> <p>Alternatively, you can use the get method to get the value:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nprint(teacher_subject.get(\"Fred\"))\n</code></pre>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#change-a-dictionary-value","title":"Change a Dictionary Value","text":"<p>This code changes the value for the key Jaya:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nteacher_subject [\"Jaya\"] = \"Immunology\"\nprint(teacher_subject)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-a-dictionary-item","title":"Add a Dictionary Item","text":"<p>This can be done by adding a new key and its value:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n}\nteacher_subject [\"Sujith\"] = \"Biochemistry\"\nprint(teacher_subject)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#remove-a-dictionary-item","title":"Remove a Dictionary Item","text":"<p>This can be done by using the pop method:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Sujith\": \"Biochemistry\",\n}\nprint(teacher_subject) #print before removal\nteacher_subject.pop(\"Sujith\")\nprint(teacher_subject) #print after removal\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#tuples","title":"Tuples","text":"<p>A tuple, like a list variable, can store multiple items. In a list, you can add, remove, and modify items. In contrast, once a tuple is created, you cannot change items in the tuple or add or remove items.</p> <p>Tuples are generally faster than list because of their read-only nature.</p> <p>Tuple is written with parenthesis ( ) and can contain duplicates.</p> <p>Here's a tuple:</p> <pre><code>a_tuple = (211, \"Anita\", True, 3.14, 211) \nprint(a_tuple)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-a-tuple-item","title":"Access a Tuple Item","text":"<p>Tuple items are ordered, and you can access them using an index number.</p> <p>This code will print the fourth item in the tuple:</p> <pre><code>departments = (\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\")\nprint (departments[3])\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-a-range-of-tuple-items","title":"Access a Range of Tuple Items","text":"<p>You can access a range of tuple items by using a colon.</p> <p>This code selects the items from 1 to 3 index numbers:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[1:4])\n</code></pre> <p>\ud83d\udca1 Tip: Note that with <code>[1:4]</code>, the selection starts at the start index and goes up to but doesn't include the end index. That means it includes indices 1, 2, and 3 but doesn't include 4.</p> <p>Output:</p> <p></p> <p>This code selects items from Marketing to the end:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[3:])\n</code></pre> <p>Output:</p> <p></p> <p>This code selects items from the beginning to IT:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[:3])\n</code></pre> <p>\ud83d\udca1 Tip: It includes start index (which is 0) but doesn't include end index (which is 3).</p> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#sets","title":"Sets","text":"<p>A set can also have multiple items, but they cannot be duplicates. You cannot change the set items but can add or remove items.</p> <p>A set is written with curly brackets { }.</p> <p>Here's a set:</p> <pre><code>a_set = {\"Jane\", 311, 7.14, True}\nprint(a_set)\n</code></pre> <p>When I run the code, I get this output:</p> <p></p> <p>Sets are unordered. So, again when I run the code, the order of items changes.</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-or-remove-a-set-item","title":"Add or Remove a Set Item","text":"<p>This code adds an item using the add method:</p> <pre><code>departments = {\"Finance\", \"Engineering\", \"IT\", \"Marketing\"}\ndepartments.add(\"Quality Control\")\nprint (departments)\n</code></pre> <p>Output:</p> <p></p> <p>To remove an item from a set, you can use the remove method. For example: <code>colors.remove(\u201cgreen\u201d)</code>.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#join-sets","title":"Join Sets","text":"<p>Use the | operator to join sets:</p> <pre><code>departments_set1 = {\"Finance\", \"Engineering\"}\ndepartments_set2 = {\"Marketing\", \"Legal\"}\ndepartments_set3 = {\"Procurement\", \"Logistics\"}\ncombined_set = departments_set1 | departments_set2 | departments_set3\nprint (combined_set)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#difference","title":"Difference","text":"<p>You can use the difference method to return only those items in the first set that aren't there in the other set.</p> <p>In this code, the difference method will return Legal and IT that aren't there in the other set:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\nset3 = departments_set1.difference(departments_set2)\nprint (set3)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#difference-update","title":"Difference Update","text":"<p>You can use difference_update method to retain only those items in the first set that aren't there in the other set.</p> <p>In this code, the difference_update method updates first set with Legal and IT:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\ndepartments_set1.difference_update(departments_set2)\nprint (departments_set1)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#symmetric-difference","title":"Symmetric Difference","text":"<p>You can use symmetric_difference method to return items that are in one of the sets but not in both:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\nset3 = departments_set1.symmetric_difference(departments_set2)\nprint (set3)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#convert-one-data-structure-into-another","title":"Convert One Data Structure into Another","text":"<p>There could be use cases where you want to convert one data structure into another. Let's cover few such cases.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#list-to-a-tuple","title":"List to a Tuple","text":"<p>For example, to make the data unchangeable, you might want to convert a list to a tuple:</p> <pre><code>a_list = [\"Astronomy\", 211, 71.1, \"History\"]\nprint (a_list)\na_tuple = tuple(a_list)\nprint (a_tuple)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#list-to-a-set","title":"List to a Set","text":"<p>For example, to remove duplicates, you might want to convert a list to a set:</p> <pre><code>a_list = [\"Astronomy\", 211, 71.1, \"History\", \"History\", 211]\nprint (a_list)\na_set = set(a_list)\nprint (a_set)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#dictionary-to-a-tuple","title":"Dictionary to a Tuple","text":"<p>For example, to have the key: value items become unchangeable, you might want to convert a dictionary to a tuple:</p> <pre><code>a_dict = {\"Astronomy\": 1, \"History\": 2}\nprint (a_dict)\na_tuple = tuple(a_dict.items())\nprint (a_tuple)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#tuple-to-a-list","title":"Tuple to a List","text":"<p>For example, to add an item, you might want to convert a tuple to a list:</p> <pre><code>a_tuple = (\"Astronomy\", \"History\", 211, 312)\nprint (a_tuple)\na_list = list(a_tuple)\na_list.append(\"Philosophy\")\nprint (a_list)\n</code></pre> <p>Output:</p> <p></p> <p>In this document, we've looked at the data structures in Python: lists, dictionaries, tuples, and sets. Each of these data structures has unique features. Lists provide ordered, changeable data; dictionaries provide key-value pair storage; tuples provide unchangeable data; and sets provide unique, unordered data.</p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html","title":"Classes and Objects in Python","text":"<p>This document will help you understand Python classes, objects, inheritance, and polymorphism.</p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#create-a-class-and-its-object","title":"Create a Class and its Object","text":"<p>A class defines a set of attributes and methods that its objects can use. A class is like a blueprint for creating objects.</p> <p>The following code:</p> <ul> <li> <p>Creates a class named <code>Customer</code> with customer attributes: name, age, and email address.</p> </li> <li> <p>Creates an instance of the <code>Customer</code> class named <code>customer1</code>; it means <code>customer1</code> is the object of the <code>Customer</code> class.</p> </li> <li> <p>Prints the attributes of the <code>customer1</code> object.</p> </li> </ul> <pre><code>class Customer:\n    # Initializer / Instance attributes\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n# Create an object customer1\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\n# Print values of the customer1 object's attributes\nprint(customer1.name)\nprint(customer1.age)\nprint(customer1.email)\n</code></pre> <p>The code uses the <code>init</code> method to assign values to attributes when the object is being created. The first parameter is <code>instance</code> that represents the instance of the class and allows you to access the class's attributes and methods. You can name this parameter anything like myobject.</p> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#string-representation-of-the-object","title":"String Representation of the Object","text":"<p>In this code, we use the <code>str</code> method to give a string representation of the object:</p> <pre><code>class Customer:\n    # Initializer / Instance Attributes\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    def __str__(instance): \n        return f\"{ instance.name}, {instance.age}, { instance.email}\"\n# Create an object customer1\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\n# Print the customer1 object\nprint(customer1)\n</code></pre> <p>When <code>print(customer1)</code> is called, the <code>str</code> method is invoked.</p> <p>Run the code to see this output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#add-a-method-to-the-class-to-handle-specific-functionality","title":"Add a Method to the Class to Handle Specific Functionality","text":"<p>Let's have a method in the class that checks whether the customer is an adult. In the following example, the <code>is_adult</code> method checks whether the customer is 18 years or older and then prints a message indicating that the customer is adult.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    # Method to check if the customer is an adult\n    def is_adult(instance): \n        if instance.age &gt;= 18: \n            print(instance.name + \" is an adult.\") \n        else: \n            print(instance.name + \" is not an adult.\")\ncustomer1  = Customer(\"James\", 19, \"james@example.com\")\ncustomer2  = Customer(\"Anita\", 17, \"anitha@example.com\")\n# Check if the customers are adults\ncustomer1.is_adult()\ncustomer2.is_adult()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#del-keyword","title":"Del Keyword","text":"<p>To delete the attributes of objects or the object itself, use the <code>del</code> keyword.</p> <p>In this example, we delete the <code>customer1</code> age and then delete the <code>customer2</code> object. We use the <code>try\u2026 except\u2026</code> blocks to catch exceptions that occur when the attribute or object isn't found after deletion and print an error message.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    def __str__(instance): \n        return f\"{ instance.name}, {instance.age}, { instance.email}\"\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\ncustomer2  = Customer(\"Shreya\", 26, \"shreya@example.com\")\n\n# Print both objects once before deletion.\nprint(customer1)\nprint(customer2)\n\n# Delete the age attribute of customer1 object.\ndel customer1.age\n\n# Try to print customer1 age. This will raise an AttributeError exception.\ntry: \n    print(customer1.age) \nexcept AttributeError: \n    print(\"The 'age' attribute of customer1 has been deleted.\")\n\n# Delete the customer2 object.\ndel customer2\n\n# Try to print customer2. This will raise a NameError exception.\ntry: \n    print(customer2) \nexcept NameError: \n    print(\"The customer2 object has been deleted.\")\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#inheritance","title":"Inheritance","text":"<p>With inheritance, a child class can inherit the method and attributes of the parent class.</p> <p>As shown in the following code, when you create the <code>NewCustomer</code> class as a child of the <code>Customer</code> class, it will inherit all the attributes and methods from the <code>Customer</code> class, including the <code>is_adult</code> method and the attributes name, age, and email. When you create an instance of <code>NewCustomer</code>, you can call the <code>isAdult</code> method to check if the customer is an adult. The code also uses the <code>pass</code> keyword to indicate that the child class isn\u2019t adding any method or attributes to itself.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    # Method to check if the customer is an adult\n    def is_adult(instance): \n        if instance.age &gt;= 18: \n            print(instance.name + \" is an adult.\") \n        else: \n            print(instance.name + \" is not an adult.\")\n# Child class\nclass NewCustomer(Customer):\n    pass\nnew_customer1 = NewCustomer(\"Tim\", 16, \"tim@example.com\")\nnew_customer2 = NewCustomer(\"Priya\", 20, \"priya@example.com\")\n# Check if the new customers are adults\nnew_customer1.is_adult()\nnew_customer2.is_adult()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#method-overriding-and-polymorphism","title":"Method Overriding and Polymorphism","text":"<p>When the child class wants a specific implementation of an inherited method, it can override the method.</p> <p>In the following code, <code>greet_customer</code> method is overridden in the <code>NewCustomer</code> class to provide a different greeting message. Objects of both classes call this method to display a different message depending on whether the customer is an existing one or a new one. It also shows polymorphism where the same method name has different forms of implementation.</p> <pre><code>class Customer:\n    def __init__(instance, name):\n        instance.name = name\n    # Method to greet customer\n    def greet_customer(instance): \n        print(\"Hello \" + instance.name + \". It's great to see you again!\")\n\n# Child class\nclass NewCustomer(Customer):\n    # Overriding the greet_customer method from the Customer class\n    def greet_customer(instance): \n        print(\"Hello \" + instance.name + \". Welcome to our platform!\")\n\ncustomer1  = Customer(\"James\")\nnew_customer1 = NewCustomer(\"Priya\")\n\n# Calling the method from the Customer class\ncustomer1.greet_customer()\n# Calling the overridden method from the NewCustomer class\nnew_customer1.greet_customer()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#super-function","title":"Super Function","text":"<p>We can use the <code>super</code> function to invoke methods in the parent class.</p> <p>In the following example, <code>super</code> is used for calling <code>init</code> method of the parent class to set the customer's name. Then, <code>super</code> is again used for calling the <code>get_greeting</code> method of parent class to greet the customer. The child class also adds its own message to the overridden method.</p> <pre><code># Parent class\nclass Customer:\n    def __init__(instance, name):\n        instance.name = name\n\n    def get_greeting(instance):\n        print(\"Hello, \" + instance.name + \"!\")\n\n# Child class inheriting from Customer\nclass NewCustomer(Customer):\n    def __init__(instance, name, customer_id):\n        super().__init__(name)  # Call the __init__ method of the parent class\n        instance.customer_id = customer_id  # Additional attribute for NewCustomer\n\n    def get_greeting(instance):\n        super().get_greeting() # Call the parent class's greeting method\n        print(\"Your Customer ID is: \" + str(instance.customer_id))\n\ncustomer = Customer(\"Alice\")\nnew_customer = NewCustomer(\"Diya\", 12345)\ncustomer.get_greeting()    \nnew_customer.get_greeting()\n</code></pre> <p>Output:</p> <p></p> <p>This document discussed the basic foundation of object-oriented programming, including classes, objects, inheritance, polymorphism, and method overriding. We also covered how to delete objects and attributes that can aid in memory management and the use of the <code>super</code> function for calling the parent class methods.</p>"}]}