{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Welcome!","text":"<p>I'm Dinesh Nair, a technical writer focused on creating clear, useful content that drives user action and understanding.</p> <p>Discover more about my experience and recent work:</p> <ul> <li>\ud83d\udcc4 Resume</li> <li>\ud83d\udcda A Collection of My Technical Writing</li> </ul> <p>\u2728 Featured</p> <ul> <li>\ud83d\udccc Using Markdown </li> <li>\ud83d\udccc First Style Check with Vale </li> <li>\ud83d\udccc Introduction to Postman</li> <li>\ud83d\udccc Swagger API Design and Doc</li> <li>\ud83d\udccc First REST API Using Flask </li> <li>\ud83d\udccc FastAPI with PostgreSQL and Swagger Doc </li> <li>\ud83d\udccc Benefits of PostgreSQL Views </li> <li>\ud83d\udccc Access Control in PostgreSQL </li> </ul> <p>\"Technology empowers us, but only clear communication unlocks its true potential.\"</p> <p>\u2014 Unknown</p>"},{"location":"my_writings.html","title":"A Collection of My Technical Writing","text":"<p>This page highlights my technical writing across various technologies, including Python, Flask, REST API, PostgreSQL, and more.</p> Python <ul> <li>Getting Started with Python</li> <li>Casting in Python</li> <li>Lists, Dictionaries, Tuples, and Sets</li> <li>Classes and Objects</li> </ul> Postman <ul> <li>Introduction to Postman</li> <li>Obtaining Authorization</li> <li>Sending Requests</li> </ul> Flask <ul> <li>Getting Started with Flask</li> <li>First REST API Using Flask</li> <li>Web Page Using Flask and PostgreSQL</li> <li>Flask-RESTx API with Swagger Doc</li> </ul> FastAPI <ul> <li>FastAPI: Sync vs Async Performance</li> <li>FastAPI with PostgreSQL and Swagger Doc</li> </ul> PostgreSQL <ul> <li>SQL Joins</li> <li>Aggregate Functions</li> <li>User-Defined Functions</li> <li>Access Control</li> <li>Benefits of PostgreSQL Views</li> <li>Query Faster with Indexing</li> </ul> Doc Formats <ul> <li>Markdown</li> <li>reStructuredText</li> <li>Swagger API Design and Doc</li> </ul> Vale <ul> <li>Creating Your First Style Check</li> <li>Using and Extending a Standard Style</li> <li>Enhancing Spell Checks with Custom Lists</li> </ul>"},{"location":"resumedineshnair.html","title":"Resume of Dinesh Nair","text":"<ul> <li>LinkedIn: https://www.linkedin.com/in/dineshn1/</li> <li>Email: techwriterdinesh@protonmail.com</li> </ul>"},{"location":"resumedineshnair.html#about-me","title":"About Me","text":"<p>Technical writer focused on enhancing product value through clear, actionable documentation that drives user action and understanding.</p> <p>My approach is hands-on, actively working with the product, as demonstrated by the screenshots and practical examples featured in my recent work. I translate complex tech into clear narratives that empower users and drive sales. I am here to make your product's brilliance shine by visually demonstrating its use with practical examples, rather than simply describing it.</p> <p>I have a good understanding of the Docs as Code workflow, including writing documentation in Visual Studio Code, managing version control with Git, hosting on GitHub, and publishing using a static site generator. </p> <p>For API documentation, I can demonstrate how Swagger automates the generation of accurate, up-to-date documentation directly from FastAPI or Flask-RESTx API code, enhancing developer collaboration and ensuring documentation is closely integrated with the codebase.</p> <p>Looking for a remote work opportunity in India or an in-office role in Hyderabad, India. Feel free to connect with me on LinkedIn or reach out to me through email at techwriterdinesh@protonmail.com.</p>"},{"location":"resumedineshnair.html#skills","title":"Skills","text":"<p>Documentation &amp; Authoring: Oxygen XML Author, DITA, Markdown, Confluence, Vale, HTML</p> <p>API Documentation &amp; Development Tools: Swagger (OpenAPI), Postman, REST APIs, FastAPI, Flask-RESTx</p> <p>Docs as Code &amp; Publishing: Visual Studio Code, Git, GitHub, MkDocs</p> <p>Programming &amp; Databases: Python (Intermediate), SQL (Intermediate)</p> <p>Additional Skills: UX Writing, Training Content Development</p>"},{"location":"resumedineshnair.html#experience","title":"Experience","text":""},{"location":"resumedineshnair.html#technical-content-creator","title":"Technical Content Creator","text":"<p>dineshnair-doc.github.io   | Oct 2024 - Present</p> <ul> <li>Authored a diverse range of technical content on dineshnair-doc.github.io, covering topics such as Python, Postman, Flask, and REST API.  </li> <li>Creating clear, structured guides to simplify complex concepts for learners.  </li> <li>Using MkDocs, Git, and GitHub to author, manage version control, and deploy the site.  </li> <li>Actively learning and sharing practical, hands-on insights into technologies with others.</li> </ul>"},{"location":"resumedineshnair.html#documentation-insights","title":"Documentation Insights","text":"<p>My explanatory articles on Medium about DITA (Darwin Information Typing Architecture) and Diataxis:</p> <ul> <li>Using DITA for Technical Documentation</li> <li>My Take on the Di\u00e1taxis Approach</li> </ul>"},{"location":"resumedineshnair.html#principal-technical-writer","title":"Principal Technical Writer","text":"<p>Oracle, India   | Jan 2004 - Oct 2024</p> <ul> <li>Worked across various aspects of user assistance, including user guides, UI text, release notes, and REST API documentation.</li> <li>Created training content for both instructor-led classes and online learning.</li> <li>Collaborated with product managers, developers, and UX designers to refine user-facing materials.</li> </ul>"},{"location":"resumedineshnair.html#education","title":"Education","text":"<p>Bachelor of Arts Delhi University</p> <p>\ud83d\udcc4 Download Resume as PDF</p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html","title":"Getting Started with Python","text":"<p>In this document, we'll go over the basics of Python. We'll cover how to set up your Windows environment, run your first Python file, and learn important concepts like comments, variables, conditional statements (if else and else if), loops (for and while), and functions. Let's get started!</p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#how-to-set-up-the-windows-environment","title":"How to Set Up the Windows Environment","text":"<p>To begin developing with Python on Windows, you'll need to install:</p> <p>1 Python</p> <p>2 Visual Studio Code (VS Code)</p> <p>3 VS Code Extension for Python</p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#create-and-run-your-first-python-file","title":"Create and Run Your First Python File","text":"<p>1 Open VS Code. Create a new Python file:</p> <p></p> <p>2 Copy and paste this code into the file:</p> <pre><code>print (\"Hello world\")\nItem = \"Rain\"\nitem = \"Thunder\"\nprint (item + ' ' + Item)\n</code></pre> <p>This code is using:</p> <ul> <li><code>print</code> function to display text. A function is a block of code that runs when it's called.</li> <li>Variables <code>Item</code> and <code>item</code> to store strings Rain and Thunder.</li> </ul> <p>\ud83d\udca1 Tip: Variables are case sensitive. <code>Item</code> and <code>item</code> are two different variables.</p> <p>3 Click Run:</p> <p></p> <p>Here's what you'll see when you run the file:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#comments","title":"Comments","text":"<p>Add comments to clarify your code. Python will not execute the comments. You can add a comment by adding # at the start of the line.</p> <p>1 Replace the previous content of your file with this code:</p> <pre><code># Greet the user\nprint(\"Hi there!\")\n</code></pre> <p>2 Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#variables","title":"Variables","text":"<p>Earlier, we used two variables <code>Item</code> and <code>item</code> to store string values. Let's now use variables to store numbers and numeric calculations.</p> <p>1 Replace the previous content of your file with this code:</p> <pre><code>a = 20\nb = 5\naddition = a + b\nsubtraction = a - b\nmultiply = a * b\ndivision = a / b\nprint (addition)\nprint (subtraction)\nprint (multiply)\nprint (division)\n</code></pre> <p>The code is using variables <code>a</code> and <code>b</code> to store numbers and then variables <code>addition</code>, <code>subtraction</code>, <code>multiply</code>, and <code>division</code> to store the calculations.</p> <p>2 Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#if-else","title":"If Else","text":"<p>Use If Else for defining conditions and then executing the code based on the conditions.</p> <p>1 Replace the previous content of your file with this code:</p> <pre><code>item_available = True\nif item_available is False:\n    print (\"The item isn't available\")\nelse:\n    print (\"The item is available\")\nisCollegeOpen = True\nif isCollegeOpen:\n    print (\"The college is open\")\nelse:\n    print (\"The college is closed\")\n</code></pre> <p>The code is using Boolean variables. A Boolean variable can contain a value of <code>True</code> or <code>False</code>.</p> <p>2 Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#else-if","title":"Else If","text":"<p><code>elif</code> lets you handle multiple conditions. <code>elif</code> stands for else if.</p> <p>1 Replace the previous content of your file with this code:</p> <pre><code>selected_color = \"yellow\"\nif selected_color == \"blue\":\n    print(\"Blue means calmness.\")\nelif selected_color == \"yellow\":\n    print(\"Yellow means joy and happiness.\")\nelif selected_color == \"green\":\n    print(\"Green means freshness.\")\nelse:\n    print(\"That's a nice color!\")\n</code></pre> <p><code>else</code> catches any condition that's not caught by <code>if</code> and <code>elif</code>.</p> <p>2 Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#for-loop","title":"For Loop","text":"<p>For loop repeats actions for each item in a sequence.</p> <p>1 Replace the previous content of your file with this code:</p> <pre><code>sport_list = [\"hockey\", \"soccer\", \"basketball\"]\nfor sport in sport_list:\n    print (sport)\n</code></pre> <p>The code is looping through the list items using a for loop.</p> <p>2 Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#while-loop","title":"While Loop","text":"<p>While loop repeats actions as long as the condition is true. Once the condition is false, it stops.</p> <p>1 Replace the previous content of your file with this code:</p> <pre><code>b = 10\nwhile b &lt; 15:\n    b = b + 1\n    print (b)\n</code></pre> <p>The code initializes <code>b</code> to 10 and enters a while loop that continues as long as <code>b</code> is less than 15. During each loop iteration, <code>b</code> is incremented by 1, and the new value of <code>b</code> is printed.</p> <p>2 Click Run.</p> <p>Here's what you'll see:</p> <p></p>"},{"location":"mytechdocs/doc1/Getting_Started_with_Python.html#functions","title":"Functions","text":"<p>Function is the block of code that runs when it\u2019s called. Define it by using the <code>def</code> keyword. A function can have one or more parameters or none.</p> <p>1 Replace the previous content of your file with this code:</p> <pre><code>def guess_fruit():\n    while True:\n        user_value = input(\"Enter the fruit I like most: \")\n        if user_value == \"apple\":\n            print(\"That's correct!\")\n            break\n        else:\n            print(\"Nope, that's not the fruit I like. Try again.\")\nguess_fruit()\n</code></pre> <p>The last line calls the function. The function keeps prompting the user to enter the correct value until the guess is correct.</p> <p>The code uses the <code>break</code> keyword to break out of the while loop.</p> <p>2 Click Run.</p> <p>Here's what you'll see:</p> <p></p> <p>3 Enter orange. The program will prompt you to try again until the correct answer is entered:</p> <p></p> <p>4 This time enter apple. The program will respond with That\u2019s correct!:</p> <p></p> <p>Now that you know the basics like variables, loops, and functions, you're ready to dive deeper into the world of Python. Happy coding!</p>"},{"location":"mytechdocs/doc10/Webpage_Flask_Postgres.html","title":"Building a Dynamic Web Page with Flask and PostgreSQL","text":"<p>Using the Getting Started with Flask document, we created a Flask application that collects teacher and course names from users and displays these names. The application stored this information in a JSON file.</p> <p>This document guides you on how to use PostgreSQL instead of a JSON file for storing and retrieving the teacher and course names. PostgreSQL is a database system that uses SQL. You can download and install PostgreSQL from the official website: https://www.postgresql.org/download/windows/</p> <p>Use the same Flask environment in Windows that we used in the Getting Started with Flask document.</p>"},{"location":"mytechdocs/doc10/Webpage_Flask_Postgres.html#create-the-database-table","title":"Create the Database Table","text":"<p>Connect to the PostgreSQL database and create a table. To create the table, you can use this command in the SQL shell:</p> <pre><code>postgres=# CREATE TABLE teachers (\npostgres(#     id SERIAL PRIMARY KEY,\npostgres(#     teacher VARCHAR(255) NOT NULL,\npostgres(#     course VARCHAR(255) NOT NULL\npostgres(# );\n</code></pre> <p>If everything goes well, you should see the <code>CREATE TABLE</code> message like this:</p> <p></p>"},{"location":"mytechdocs/doc10/Webpage_Flask_Postgres.html#set-up-the-postgresql-connection","title":"Set Up the PostgreSQL Connection","text":"<p>1 Activate the virtual environment in the Visual Studio Code (VS Code) terminal by typing the command: <code>venv\\Scripts\\activate</code></p> <p>2 Use the <code>pip</code> command to install psycopg2 to connect to your PostgreSQL database from Flask: <code>pip install psycopg2-binary</code></p> <p></p> <p>Psycopg2 is a popular PostgreSQL database connector for Python.</p> <p>3 There are several ways to store sensitive information. For now, we will store the database username and password in environment variables and access them from the application.</p> <p>Type the following commands in the VS Code terminal (PowerShell):</p> <pre><code>$env:DB_USER=\"your_db_username\"\n$env:DB_PASSWORD=\"your_db_password\"\n</code></pre> <p>You'll need to replace <code>your_db_username</code> and <code>your_db_password</code> with your actual database username and password.</p> <p>Note that the environment variables set using these commands are temporary and will be lost when you close the terminal or deactivate the virtual environment.</p>"},{"location":"mytechdocs/doc10/Webpage_Flask_Postgres.html#update-the-flask-application-to-use-postgresql","title":"Update the Flask Application to Use PostgreSQL","text":"<p>Update your Flask application to use PostgreSQL instead of JSON:</p> <ul> <li> <p>Import the necessary libraries and establish a connection to the PostgreSQL database.</p> </li> <li> <p>With the switch to using a PostgreSQL database, we no longer need the <code>json</code> module, as we're not working with JSON files anymore. You can safely remove the <code>import json</code> line from your code.</p> </li> <li> <p>The <code>load_teachers</code> function fetches teacher and course information from the PostgreSQL database.</p> </li> <li> <p>The <code>save_teacher</code> function inserts a teacher and course record into the database.</p> </li> </ul> <p>Here's the updated code for the application:</p> <pre><code>import os\nimport psycopg2\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n# Function to establish a connection to the PostgreSQL database\ndef connect_db():\n    conn = psycopg2.connect(\n        dbname=\"postgres\",\n        user=os.getenv(\"DB_USER\"),\n        password=os.getenv(\"DB_PASSWORD\"),\n        host=\"localhost\",\n        port=\"5432\"\n    )\n    return conn\n\n# Function to load teacher and course names from the PostgreSQL database\ndef load_teachers():\n    conn = connect_db()\n    cur = conn.cursor()\n    cur.execute(\"SELECT teacher, course FROM teachers\")\n    rows = cur.fetchall()\n    conn.close()\n    return {row[0]: row[1] for row in rows}\n\n# Function to save a teacher name and the corresponding course name to the PostgreSQL database\ndef save_teacher(teacher, course):\n    conn = connect_db()\n    cur = conn.cursor()\n    cur.execute(\"INSERT INTO teachers (teacher, course) VALUES (%s, %s)\", (teacher, course))\n    conn.commit()\n    conn.close()\n\n# Load initial data\nteachers_dict = load_teachers()\n\n@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        teacher = request.form['teacher']\n        course = request.form['course']\n        save_teacher(teacher, course)\n        teachers_dict[teacher] = course\n    return render_template('home.html', teachers=teachers_dict)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>The <code>load_teachers</code> function:</p> <ul> <li> <p>Connects to the PostgreSQL database using the <code>connect_db()</code> function.</p> </li> <li> <p>Runs an SQL query to retrieve the teacher and course information.</p> </li> <li> <p>Fetches the results as a list of tuples and transforms them into a dictionary. For example, in a list <code>[('Anjali', 'Microbiology'), ('James', 'Environmental Science')]</code>, <code>row[0]</code> will be <code>'Anjali'</code> for the first tuple and <code>'James'</code> for the second tuple. <code>row[1]</code> will be <code>'Microbiology'</code> for the first tuple and <code>'Environmental Science'</code> for the second tuple.</p> </li> <li> <p>Closes the database connection.</p> </li> </ul> <p>The <code>save_teacher</code> function:</p> <ul> <li> <p>Uses the <code>connect_db()</code> function to establish a connection to the PostgreSQL database.</p> </li> <li> <p>Runs an SQL INSERT statement to add the teacher and course pair into the <code>teachers</code> database table.</p> </li> <li> <p>Commits the transaction to ensure the changes are saved to the database.</p> </li> <li> <p>Closes the database connection.</p> </li> </ul> <p>The <code>home</code> function is called when the user accesses the web page. When a new teacher and course are added, the function passes these values to the <code>save_teacher</code> function to insert them into the database table. The <code>home</code> function then updates the <code>teachers_dict</code> dictionary and returns the updated dictionary to be displayed on the web page.</p> <p>\ud83d\udca1 Tip: The <code>home.html</code> file we created using the Getting Started with Flask document will remain in the <code>templates</code> directory.</p>"},{"location":"mytechdocs/doc10/Webpage_Flask_Postgres.html#run-the-flask-application","title":"Run the Flask Application","text":"<p>Run the application and test the web page as discussed in the Run the Application section of the Getting Started with Flask document.</p> <p>For example, you should now be able to add teachers and courses on the web page:</p> <p></p> <p>You can also verify that the data has been successfully inserted into the database by running the select query in the SQL shell:</p> <p></p> <p>Congratulations! You've learned how to build a dynamic web page using Flask and store the added information in PostgreSQL for data persistence.</p>"},{"location":"mytechdocs/doc11/Flask_Restx_Swagger.html","title":"Building a REST API with Flask-RESTx and Swagger Documentation","text":"<p>Using this document, we'll create a simple REST API to manage contacts. The API will include fields for name, email, and a subscription indicator to track whether a contact has subscribed to our newsletter. We'll use Flask-RESTx, which can automatically generate Swagger documentation for this API. The documentation will make it easier for developers to understand and interact with the API endpoints.</p> <p>The API will cover the following operations:</p> <ul> <li> <p>GET requests to retrieve contact information</p> </li> <li> <p>POST requests to add new contacts</p> </li> <li> <p>PUT requests to update existing contact details</p> </li> <li> <p>DELETE requests to remove contacts</p> </li> </ul>"},{"location":"mytechdocs/doc11/Flask_Restx_Swagger.html#set-up-the-flask-environment-in-windows","title":"Set Up the Flask Environment in Windows","text":"<p>You can use the same environment that you used for Building Your First REST API Using Flask.</p> <p>If the virtual environment isn't activated, activate it and install Flask-RESTx by typing the command: <code>pip install flask-restx</code></p> <p></p>"},{"location":"mytechdocs/doc11/Flask_Restx_Swagger.html#create-the-flask-application","title":"Create the Flask Application","text":"<p>1 Create a file named <code>contacts.py</code>.</p> <p>2 Import necessary components and create an instance of the Flask class:</p> <pre><code>from flask import Flask, request\nfrom flask_restx import Api, Resource, fields\n\napp = Flask(__name__)\n</code></pre> <p>3 Initialize the Flask-RESTx API:</p> <pre><code>api = Api(app, version='1.0', title=\"Dinesh's Contact Management API\", description='Add, see, update, and remove your contacts.')\n</code></pre> <p>4 Define a namespace for the API:</p> <pre><code>ns = api.namespace('contacts', description='Contact operations')\n</code></pre> <ul> <li> <p><code>ns</code>: This is a variable that stores the namespace instance. You can name this variable anything you like.</p> </li> <li> <p><code>api.namespace('contacts', ...)</code>: This method creates a namespace with the path <code>contacts</code>. This means all endpoints defined under this namespace will be prefixed with <code>/contacts</code>.</p> </li> </ul> <p>A namespace helps organize your API endpoints under a common group, making it easier to manage and document them. Additionally, namespaces improve the auto-generated Swagger documentation by categorizing endpoints.</p> <p>5 Define the contact model:</p> <pre><code>contact_model = api.model('Contact', {\n    'id': fields.Integer(readOnly=True, description='The contact unique identifier.'),\n    'name': fields.String(required=True, description='The contact name.'),\n    'email': fields.String(required=True, description='The contact email.'),\n    'subscribed': fields.Boolean(description='Indicates whether the contact is subscribed to promotional messages. Valid values are true or false.')\n})\n</code></pre> <p>When you define this model in Flask-RESTx, it automatically includes this model in the Swagger documentation, making it clear what kind of data your endpoints expect.</p> <p>6 Create an empty list to store contacts temporarily:</p> <pre><code>contacts = []\n</code></pre> <p>7 Define the <code>ContactList</code> resource and its endpoints:</p> <pre><code>@ns.route('/')\nclass ContactList(Resource):\n    @ns.doc('list_contacts', description='Retrieves a list of all contacts.')\n    @ns.marshal_list_with(contact_model)\n    def get(self):\n        return contacts\n\n    @ns.doc('create_contact', description='Creates a new contact.')\n    @ns.expect(contact_model)\n    @ns.marshal_with(contact_model, code=201)\n    def post(self):\n        new_contact = api.payload\n        new_contact['id'] = len(contacts) + 1\n        contacts.append(new_contact)\n        return new_contact, 201\n</code></pre> <ul> <li> <p>This resource has two main methods: <code>get</code> (retrieves the full list of contacts) and <code>post</code> (adds a new contact to the list).</p> </li> <li> <p>The <code>ns.doc</code> decorator adds descriptions to the <code>get</code> and <code>post</code> operations, enhancing the auto-generated documentation.</p> </li> <li> <p>The <code>ns.marshal</code> decorator specifies that the output will be in the format defined by the <code>contact_model</code>.</p> </li> <li> <p><code>ns.expect</code> specifies that the request body must follow the <code>contact_model</code>, ensuring that the incoming data matches the defined schema.</p> </li> </ul> <p>8 Define the <code>Contact</code> resource and its endpoints:</p> <pre><code>@ns.route('/&lt;int:id&gt;')\n@ns.response(404, 'Contact not found')\n@ns.param('id', 'The contact identifier')\nclass Contact(Resource):\n    @ns.doc('get_contact', description='Retrieves the contact information by contact ID.')\n    @ns.marshal_with(contact_model)\n    def get(self, id):\n        for contact in contacts:\n            if contact['id'] == id:\n                return contact\n        api.abort(404)\n\n    @ns.doc('delete_contact', description='Deletes the contact by contact ID.')\n    @ns.response(204, 'Contact deleted')\n    def delete(self, id):\n        global contacts\n        contacts = [contact for contact in contacts if contact['id'] != id]\n        return '', 204\n\n    @ns.doc('update_contact', description='Updates the contact information by contact ID.')\n    @ns.expect(contact_model)\n    @ns.marshal_with(contact_model)\n    def put(self, id):\n        for contact in contacts:\n            if contact['id'] == id:\n                contact.update(api.payload)\n                return contact\n        api.abort(404)\n</code></pre> <p>This resource has three main methods: <code>get</code> (retrieves the contact information by contact ID), <code>delete</code> (deletes the contact by contact ID), and <code>put</code> (updates the contact information by contact ID).</p> <p>9 Add the namespace to the API to ensure that endpoints, such as <code>GET /contacts</code>, can be accessed through the API:</p> <pre><code>api.add_namespace(ns)\n</code></pre> <p>10 Ensure that the Flask application will start running with debug mode enabled when you run the <code>contacts.py</code> file:</p> <pre><code>if __name__ == '__main__':\n    app.run(debug=True)\n</code></pre>"},{"location":"mytechdocs/doc11/Flask_Restx_Swagger.html#run-the-application","title":"Run the Application","text":"<p>On Visual Studio Code, click Run for <code>contacts.py</code>. This will launch the server locally:</p> <p></p>"},{"location":"mytechdocs/doc11/Flask_Restx_Swagger.html#access-and-review-the-swagger-documentation","title":"Access and Review the Swagger Documentation","text":"<p>Once the server is running, you can access the automatically generated Swagger documentation by navigating to <code>http://127.0.0.1:5000/</code> in your web browser.</p> <p></p> <p>Click Models, then Contact: The expanded view will show you the fields that make up the model, along with their data types and descriptions.</p> <p></p> <p>Expand Contacts to see all the API endpoints, such as GET /contacts:</p> <p></p> <p>Click on the desired endpoint to expand it. For example, click on POST /contacts to see the post operation's description and example of the JSON object that you can send:</p> <p></p> <p>You can also see the example response:</p> <p></p>"},{"location":"mytechdocs/doc11/Flask_Restx_Swagger.html#try-it-out","title":"Try it Out","text":"<p>You can use the Try it out feature in the Swagger documentation for all operations. This feature allows you to interact with the API directly from the documentation interface. Let's add a contact:</p> <p>1 Click Try it out for the post operation. You'll see fields where you can enter data.</p> <p>2 Add the contact details in the Payload field:</p> <p></p> <p>3 Click Execute.</p> <p>If successful, you'll get a 201 status code along with the details of the newly created contact:</p> <p></p> <p>4 Add another contact by repeating steps 1 to 3, entering the new contact's details in the Payload field, and executing the request again:</p> <p></p> <p>5 Expand the GET /contacts endpoint:</p> <p></p> <p>6 Click Try it out for the get operation.</p> <p>7 Click Execute to send a request to the endpoint.</p> <p>The response body will display the data retrieved by the <code>GET /contacts</code> operation, showing the information for both added contacts and indicating a <code>200</code> status code:</p> <p></p> <p>The <code>200</code> status indicates that the request was successful, and the server has returned the requested data.</p> <p>8 Let's say you want to update email from <code>Emma@example.com</code> to <code>Emma.Miller@example.com</code>. Expand the PUT /contacts/{id} endpoint.</p> <p>9 Click Try it out.</p> <p>10 Enter the ID of the contact whose email you want to change:</p> <p></p> <p>11 In the request body, enter the new email address along with any other details you want to keep unchanged:</p> <p></p> <p>12 Click Execute.</p> <p>The response body will show the updated contact information, and you'll receive a <code>200</code> status code indicating that the update is successful:</p> <p></p> <p>Nicely done! By using this document, we successfully created a Contact Management API using Flask-RESTx that handles GET, POST, PUT, and DELETE requests. We also auto-generated Swagger documentation that provides information about the API and allows users to interact with the API.</p>"},{"location":"mytechdocs/doc12/FastAPI_Performance.html","title":"FastAPI Performance: Comparing Sync and Async Endpoints","text":"<p>FastAPI is a Python-based framework designed to build APIs. We'll install FastAPI and explore the benefits of asynchronous programming, which allows tasks to be handled concurrently, leading to more efficient response times. By creating both synchronous and asynchronous endpoints, we'll test and compare their performance.</p>"},{"location":"mytechdocs/doc12/FastAPI_Performance.html#set-up-the-fastapi-environment-in-windows","title":"Set Up the FastAPI Environment in Windows","text":"<p>1 Open the terminal in Visual Studio Code and type: <code>python -m venv venv</code></p> <p>This creates a virtual environment. Using virtual environments ensures that the dependencies for one project don't interfere with the dependencies of other projects.</p> <p>2 Activate the virtual environment: <code>venv\\Scripts\\activate</code></p> <p>3 Once the virtual environment is activated, you can install FastAPI using this command: <code>pip install fastapi</code></p> <p></p> <p>4 FastAPI requires an ASGI server to run, such as Uvicorn. You can install it with: <code>pip install \"uvicorn[standard]\"</code></p> <p></p> <p>ASGI (Asynchronous Server Gateway Interface) is a specification for building and running web applications in Python that support asynchronous programming. It allows for handling multiple tasks concurrently, making it ideal for high-performance applications.</p> <p>5 To install the necessary libraries for our synchronous and asynchronous scripts, use the following command: <code>pip install requests httpx</code></p> <p></p>"},{"location":"mytechdocs/doc12/FastAPI_Performance.html#create-a-synchronous-endpoint-with-fastapi","title":"Create a Synchronous Endpoint with FastAPI","text":"<p>1 Create a file named <code>sync.py</code>.</p> <p>2 Import the necessary components:</p> <pre><code>from fastapi import FastAPI\nimport requests\nimport time\n</code></pre> <ul> <li> <p><code>FastAPI</code>: Framework for creating the API.</p> </li> <li> <p><code>requests</code>: For making HTTP requests.</p> </li> <li> <p><code>time</code>: For measuring the duration of processing.</p> </li> </ul> <p>3 Create the FastAPI instance:</p> <pre><code>app = FastAPI()\n</code></pre> <p>4 Define the <code>fetch_data</code> function:</p> <pre><code>def fetch_data(url):\n    response = requests.get(url)\n    return response.json()\n</code></pre> <p><code>fetch_data(url)</code>: Makes an HTTP GET request to the specified URL and returns the JSON response.</p> <p>5 Create the synchronous endpoint:</p> <pre><code>@app.get(\"/multiple-sync/\")\ndef multiple_sync():\n    urls = [\n        \"https://jsonplaceholder.typicode.com/todos/1\",\n        \"https://jsonplaceholder.typicode.com/todos/2\",\n        \"https://jsonplaceholder.typicode.com/todos/3\",\n        \"https://jsonplaceholder.typicode.com/todos/4\",\n        \"https://jsonplaceholder.typicode.com/todos/5\",\n        \"https://jsonplaceholder.typicode.com/todos/6\",\n        \"https://jsonplaceholder.typicode.com/todos/7\",\n        \"https://jsonplaceholder.typicode.com/todos/8\",\n        \"https://jsonplaceholder.typicode.com/todos/9\",\n        \"https://jsonplaceholder.typicode.com/todos/10\"\n    ]\n\n    start_time = time.time()\n    results = [fetch_data(url) for url in urls]\n    end_time = time.time()\n\n    return {\"results\": results, \"duration\": end_time - start_time}\n</code></pre> <p>The code:</p> <ul> <li> <p>Defines an endpoint <code>/multiple-sync/</code>.</p> </li> <li> <p>Defines a list of URLs to fetch data from.</p> </li> <li> <p>Captures the start time.</p> </li> <li> <p>Loops through the URLs and fetches data synchronously using the <code>fetch_data</code> function.</p> </li> <li> <p>Captures the end time.</p> </li> <li> <p>Returns the fetched results and the total duration taken to process the requests.</p> </li> </ul> <p>The <code>fetch_data</code> function performs the requests one at a time in a blocking manner. This means each request is completed before the next one starts. The line <code>results = [fetch_data(url) for url in urls]</code> calls <code>fetch_data</code> in each iteration of the loop, gets the JSON response for each request, stores it in <code>results</code>, then moves to the next request.</p> <p>JSONPlaceholder is a free online REST API that you can use for testing and prototyping. These URLs in our code are endpoints provided by JSONPlaceholder, each returning a JSON object representing a to-do item.</p> <p>6 Run the FastAPI application:</p> <pre><code>if __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"mytechdocs/doc12/FastAPI_Performance.html#create-an-asynchronous-endpoint-with-fastapi","title":"Create an Asynchronous Endpoint with FastAPI","text":"<p>1 Create a file named <code>async.py</code>.</p> <p>2 Import the necessary components:</p> <pre><code>from fastapi import FastAPI\nimport httpx\nimport asyncio\nimport time\n</code></pre> <ul> <li> <p>FastAPI: Framework for creating the API.</p> </li> <li> <p>httpx: For making asynchronous HTTP requests.</p> </li> <li> <p>asyncio: For writing concurrent code using <code>async</code> and <code>await</code> keywords.</p> </li> <li> <p>time: For measuring the duration of processing.</p> </li> </ul> <p>3 Create the FastAPI instance:</p> <pre><code>app = FastAPI()\n</code></pre> <p>4 Define the asynchronous data fetching function:</p> <pre><code>async def fetch_data(client, url):\n    response = await client.get(url)\n    return response.json()\n</code></pre> <p>This function takes an HTTP client and a URL, sends a GET request to the URL, and returns the JSON response.</p> <ul> <li> <p><code>async def</code> keyword defines an asynchronous function.</p> </li> <li> <p><code>client.get(url)</code> sends an HTTP GET request to the specified URL. The <code>await</code> keyword allows the function to pause and wait for the response while other tasks continue to execute concurrently. For example, while one <code>fetch_data</code> call is waiting for a response from an HTTP GET request, another <code>fetch_data</code> call can send another HTTP request.</p> </li> </ul> <p>5 Create the asynchronous endpoint:</p> <pre><code>@app.get(\"/multiple-async/\")\nasync def multiple_async():\n    urls = [\n        \"https://jsonplaceholder.typicode.com/todos/1\",\n        \"https://jsonplaceholder.typicode.com/todos/2\",\n        \"https://jsonplaceholder.typicode.com/todos/3\",\n        \"https://jsonplaceholder.typicode.com/todos/4\",\n        \"https://jsonplaceholder.typicode.com/todos/5\",\n        \"https://jsonplaceholder.typicode.com/todos/6\",\n        \"https://jsonplaceholder.typicode.com/todos/7\",\n        \"https://jsonplaceholder.typicode.com/todos/8\",\n        \"https://jsonplaceholder.typicode.com/todos/9\",\n        \"https://jsonplaceholder.typicode.com/todos/10\"\n    ]\n\n    start_time = time.time()\n    async with httpx.AsyncClient() as client:\n        tasks = [fetch_data(client, url) for url in urls]\n        results = await asyncio.gather(*tasks)\n    end_time = time.time()\n\n    return {\"results\": results, \"duration\": end_time - start_time}\n</code></pre> <ul> <li> <p>Defines a GET endpoint <code>/multiple-async/</code> that will handle asynchronous requests.</p> </li> <li> <p>Creates a list of URLs to fetch data from.</p> </li> <li> <p>Records the start time to measure the duration of processing.</p> </li> <li> <p>Creates an asynchronous HTTP client using <code>httpx.AsyncClient</code>.</p> </li> <li> <p>Creates a list of tasks to fetch data from each URL concurrently.</p> </li> <li> <p><code>await asyncio.gather(*tasks)</code> runs all the tasks concurrently and waits for them to complete, collecting the results.</p> </li> <li> <p>Records the end time and calculates the duration of the operation.</p> </li> <li> <p>Returns the fetched results and the duration.</p> </li> </ul> <p>In summary:</p> <ol> <li> <p><code>async def fetch_data(client, url)</code>: Makes the individual requests asynchronous, allowing them to run concurrently.</p> </li> <li> <p><code>async with httpx.AsyncClient() as client</code>: Ensures that all client requests are handled asynchronously.</p> </li> <li> <p><code>tasks = [fetch_data(client, url) for url in urls]</code> and <code>await asyncio.gather(*tasks)</code>: Runs all tasks concurrently, collecting all the responses once they're all completed.</p> </li> </ol> <p>These components work together to make your application handle multiple HTTP requests concurrently.</p> <p>6 Run the FastAPI application:</p> <pre><code>if __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"127.0.0.1\", port=8001)\n</code></pre>"},{"location":"mytechdocs/doc12/FastAPI_Performance.html#test-the-synchronous-and-asynchronous-endpoints","title":"Test the Synchronous and Asynchronous Endpoints","text":"<p>We'll test the endpoints using Postman.</p>"},{"location":"mytechdocs/doc12/FastAPI_Performance.html#testing-the-synchronous-endpoint","title":"Testing the Synchronous Endpoint","text":"<p>1 Run <code>sync.py</code>.</p> <p></p> <p>2 In Postman, add a new GET request. I created a collection Dinesh_FastAPI_Syn_Asyn and added a new request. Enter the URL for your synchronous endpoint: <code>http://127.0.0.1:8000/multiple-sync/</code></p> <p></p> <p>3 Click Send. You can find the response time in milliseconds (ms) just below the response body:</p> <p></p> <p>For me, the total time taken was 5.53 seconds.</p>"},{"location":"mytechdocs/doc12/FastAPI_Performance.html#testing-the-asynchronous-endpoint","title":"Testing the Asynchronous Endpoint","text":"<p>1 Run <code>async.py</code>.</p> <p></p> <p>2 In Postman, add a new GET request. Enter the URL for your asynchronous endpoint: <code>http://127.0.0.1:8001/multiple-async/</code></p> <p></p> <p>3 Click Send. You can find the response time in milliseconds (ms) just below the response body:</p> <p></p> <p>For me, the total time taken was 1.71 seconds.</p> <p>Comparing both:</p> <ul> <li> <p>Synchronous Duration: 5.53 seconds</p> </li> <li> <p>Asynchronous Duration: 1.71 seconds</p> </li> </ul> <p>As you can see, the asynchronous endpoint (/multiple-async/) took noticeably less time to complete compared to the synchronous endpoint (/multiple-sync/). This demonstrates the performance benefits of asynchronous programming in FastAPI.</p>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html","title":"Building a REST API with FastAPI, PostgreSQL, and Swagger Documentation","text":"<p>Using FastAPI, we'll create a basic API for employee performance review. This API will be tied to a PostgreSQL database, ensuring the data storage and retrieval. Later on, we'll use Swagger documentation for interacting with the API. FastAPI automatically generates the Swagger documentation for our API, making it easy to test and visualize our endpoints.</p> <p>The API will cover the following operations:</p> <ul> <li> <p>GET requests to retrieve employee reviews</p> </li> <li> <p>POST requests to add new employee reviews</p> </li> <li> <p>PUT requests to update existing employee reviews</p> </li> <li> <p>DELETE requests to remove employee reviews</p> </li> </ul>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#set-up-the-fastapi-environment-in-windows","title":"Set Up the FastAPI Environment in Windows","text":"<p>1 Install and activate the virtual environment using the Visual Studio Code (VS Code) terminal, then install FastAPI and Uvicorn.</p> <p>For more information on this step, see the Set Up the FastAPI Environment in Windows section in FastAPI Performance: Comparing Sync and Async Endpoints.</p> <p>2 Install <code>asyncpg</code> using the command: <code>pip install asyncpg</code></p> <p></p> <p><code>asyncpg</code> lets you interact with the PostgreSQL database asynchronously, which can enhance your application's performance and responsiveness.</p>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#prepare-your-postgresql-database-and-environment","title":"Prepare Your PostgreSQL Database and Environment","text":"<p>1 Connect to the PostgreSQL database and create a table for storing the employee reviews. To create the table, you can use this command in the SQL shell:</p> <pre><code>CREATE TABLE employee_reviews (\n    employee_id INT,\n    employee_name VARCHAR(255) NOT NULL,\n    evaluation_period VARCHAR(255) NOT NULL,\n    performance_rating INT,\n    feedback_comments TEXT, \n    goals_objectives TEXT,\n    reviewer_id INT,\n    reviewer_name VARCHAR(255),\n    PRIMARY KEY (employee_id, evaluation_period)\n);\n</code></pre> <p>The combination of <code>employee_id</code> and <code>evaluation_period</code> must be unique, which is why they are set as the primary key. This setup allows employees to have multiple reviews for different periods.</p> <p>When you create the table, you should see the response as CREATE TABLE:</p> <p></p> <p>2 There are several ways to store sensitive information. For now, we'll store the database username and password in an environment variable and access it from the application.</p> <p>Type this command in the VS Code terminal (PowerShell):</p> <pre><code>$env:DATABASE_URL=\"postgresql://myusername:mypassword@localhost/dbname\n</code></pre> <p>You'll need to replace <code>myusername</code> and <code>mypassword</code> with your actual database username and password. Also, replace <code>dbname</code> with the name of the database you want to connect to.</p> <p>Note that the environment variable set using this command is temporary and will be lost when you close the terminal or deactivate the virtual environment.</p>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#create-the-fastapi-application","title":"Create the FastAPI Application","text":"<p>1 Create a file named <code>employee_reviews.py</code>.</p> <p>2 Import necessary components:</p> <pre><code>import os\nimport asyncpg\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\n</code></pre> <ul> <li> <p><code>import os</code>: To read the environment variable for the database.</p> </li> <li> <p><code>import asyncpg</code>: To interact with the PostgreSQL database.</p> </li> <li> <p><code>from fastapi import FastAPI, HTTPException</code>: To import the main components of FastAPI. FastAPI is the web framework, and HTTPException is used to handle errors.</p> </li> <li> <p><code>from pydantic import BaseModel</code>: To define the structure of the data we expect in requests and responses.</p> </li> </ul> <p>3 Initialize the FastAPI application:</p> <pre><code>app = FastAPI(\n    title=\"Dinesh's Employee Review API\",\n    version=\"1.0\",\n    description=\"Create, update, or delete a performance review. You can also see all reviews.\",\n    contact={\n        \"name\": \"Dinesh Nair\",\n        \"email\": \"dineshn@example.com\"\n    }\n)\n</code></pre> <p>This initializes the FastAPI application with metadata such as title, version, description, and contact information.</p> <p>\ud83d\udca1 Note: The auto-generated Swagger documentation will display this metadata to the users.</p> <p>4 Define a data model for employee reviews using Pydantic. Each field has a type, ensuring data validation.</p> <pre><code>class EmployeeReview(BaseModel):\n    employee_id: int\n    employee_name: str\n    evaluation_period: str\n    performance_rating: int\n    feedback_comments: str\n    goals_objectives: str\n    reviewer_id: int\n    reviewer_name: str\n</code></pre> <p>Pydantic uses Python types to validate and parse data. By defining the <code>EmployeeReview</code> class as a subclass of <code>BaseModel</code>, we create a data model where each field has a specific type. This means that <code>EmployeeReview</code> inherits all the features and capabilities of <code>BaseModel</code>, which ensures that the data is validated according to the types specified for each field.</p> <p>For example:</p> <ul> <li> <p><code>employee_id</code> and <code>reviewer_id</code> must be integers.</p> </li> <li> <p><code>employee_name</code>, <code>evaluation_period</code>, <code>feedback_comments</code>, <code>goals_objectives</code>, and <code>reviewer_name</code> must be strings.</p> </li> <li> <p><code>performance_rating</code> must be an integer.</p> </li> </ul> <p>This ensures that only valid data is accepted, which helps maintain data integrity and prevents errors.</p> <p>5 Create the database connection:</p> <pre><code>DATABASE_URL = os.getenv(\"DATABASE_URL\")\n\nasync def connect_to_db():\n    return await asyncpg.connect(DATABASE_URL)\n</code></pre> <ul> <li> <p><code>os.getenv</code>: Reads the <code>DATABASE_URL</code> environment variable to get the database connection string.</p> </li> <li> <p><code>connect_to_db()</code>: Asynchronous function that connects to the PostgreSQL database using <code>asyncpg</code>.</p> </li> </ul> <p>6 Define the endpoint for creating an employee review:</p> <pre><code>@app.post(\"/employee_reviews/\", response_model=EmployeeReview)\nasync def create_employee_review(employee_review: EmployeeReview):\n    \"\"\"\n    Create a performance review for an employee.\n\n    Fields:\n    - **Employee ID**: Unique identifier of the employee whose performance is being reviewed.\n    - **Employee Name**: Name of the employee.\n    - **Evaluation Period**: Evaluation period for the review, such as \"Q1 2023\" or \"January - June 2024\".\n    - **Performance Rating**: Performance rating of the employee. For example, on a scale of 1 to 5, you can enter 4.\n    - **Feedback Comments**: Feedback comments for the employee.\n    - **Goals Objectives**: Goals and objectives for the employee, such as increasing sales by 10%.\n    - **Reviewer ID**: Unique identifier of the reviewer.\n    - **Reviewer Name**: Name of the reviewer.\n    \"\"\"\n    conn = await connect_to_db()\n    try:\n        await conn.execute('''\n            INSERT INTO employee_reviews(employee_id, employee_name, evaluation_period, performance_rating, feedback_comments, goals_objectives, reviewer_id, reviewer_name)\n            VALUES($1, $2, $3, $4, $5, $6, $7, $8)\n        ''', employee_review.employee_id, employee_review.employee_name, employee_review.evaluation_period, employee_review.performance_rating, employee_review.feedback_comments, employee_review.goals_objectives, employee_review.reviewer_id, employee_review.reviewer_name)\n    finally:\n        await conn.close()\n    return employee_review\n</code></pre> <p>The code connects to the database, runs an SQL <code>INSERT</code> command, and returns the created review.</p> <ul> <li> <p><code>app.post(\"/employee_reviews/\")</code>: Defines a POST endpoint for creating a new employee review.</p> </li> <li> <p><code>response_model=EmployeeReview</code>: Specifies the response model.</p> </li> <li> <p>Docstring: Provides a detailed description of the endpoint and the fields expected in the request body. FastAPI uses the docstring in the auto-generated Swagger documentation.</p> </li> </ul> <p>7 Define the endpoint for retrieving employee reviews:</p> <pre><code>@app.get(\"/employee_reviews/\", response_model=list[EmployeeReview])\nasync def read_employee_reviews():\n    # (Docstring describing what the endpoint does and its fields)\n    conn = await connect_to_db()\n    try:\n        rows = await conn.fetch('SELECT * FROM employee_reviews')\n    finally:\n        await conn.close()\n\n    if rows:\n        return [EmployeeReview(**row) for row in rows]\n    raise HTTPException(status_code=404, detail=\"No reviews found\")\n</code></pre> <p>The code:</p> <ul> <li> <p>Retrieves all records from the <code>employee_reviews</code> table.</p> </li> <li> <p>Converts these records into a list of <code>EmployeeReview</code> objects and returns it as a response.</p> </li> </ul> <p>8 Define the endpoint for updating an employee review:</p> <pre><code>@app.put(\"/employee_reviews/{employee_id}\", response_model=EmployeeReview)\nasync def update_employee_review(employee_id: int, employee_review: EmployeeReview):\n    # (Docstring describing what the endpoint does and its fields)\n    conn = await connect_to_db()\n    try:\n        result = await conn.execute('''\n            UPDATE employee_reviews\n            SET employee_name=$1, evaluation_period=$2, performance_rating=$3, feedback_comments=$4, goals_objectives=$5, reviewer_id=$6, reviewer_name=$7\n            WHERE employee_id=$8\n        ''', employee_review.employee_name, employee_review.evaluation_period, employee_review.performance_rating, employee_review.feedback_comments, employee_review.goals_objectives, employee_review.reviewer_id, employee_review.reviewer_name, employee_id)\n    finally:\n        await conn.close()\n    if result == 'UPDATE 0':\n        raise HTTPException(status_code=404, detail=\"Employee not found\")\n    return employee_review\n</code></pre> <p>The code:</p> <ul> <li> <p>Updates the review data in the <code>employee_reviews</code> table where the <code>employee_id</code> matches.</p> </li> <li> <p>Returns the updated <code>employee_review</code> object as a response.</p> </li> </ul> <p>9 Define the endpoint for deleting an employee review:</p> <pre><code>@app.delete(\"/employee_reviews/{employee_id}\")\nasync def delete_employee_review(employee_id: int):\n    # (Docstring describing what the endpoint does)\n    conn = await connect_to_db()\n    try:\n        result = await conn.execute('DELETE FROM employee_reviews WHERE employee_id=$1', employee_id)\n    finally:\n        await conn.close()\n    if result == 'DELETE 0':\n        raise HTTPException(status_code=404, detail=\"Employee not found\")\n    return {\"detail\": \"Employee review deleted\"}\n</code></pre> <p>The code:</p> <ul> <li> <p>Deletes the review data from the <code>employee_reviews</code> table where the <code>employee_id</code> matches.</p> </li> <li> <p>Returns a success message indicating that the review was deleted.</p> </li> </ul> <p>10 Run the FastAPI application using the Uvicorn server:</p> <pre><code>if __name__ == \"__main__\":\n    import uvicorn\n    uvicorn.run(app, host=\"127.0.0.1\", port=8000)\n</code></pre>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#run-the-application","title":"Run the Application","text":"<p>Run <code>employee_reviews.py</code>. Once the server is running, you should see an output indicating that Uvicorn is running on <code>http://127.0.0.1:8000</code>.</p> <p></p>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#use-the-swagger-documentation-interface","title":"Use the Swagger Documentation Interface","text":"<p>FastAPI provides an interactive API documentation interface using Swagger, which makes it easy to test your endpoints. Open your web browser and go to <code>http://127.0.0.1:8000/docs</code>. You should see the Swagger documentation.</p> <p></p> <p>The doc shows all the available endpoints. You can interact with the API directly from this interface by clicking on the endpoints and providing the necessary input data.</p>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#creating-an-employee-review","title":"Creating an Employee Review","text":"<p>1 Expand POST in the doc. You can see the docstring explaining the endpoint and its fields:</p> <p></p> <p>2 Click Try it out.</p> <p>3 Enter the request body:</p> <p></p> <p>4 Click Execute to send the request to the API.</p> <p>5 You will see a 200 response if all goes well:</p> <p></p> <p>We'll create a couple more records:</p> <pre><code>  {\n    \"employee_id\": 12933,\n    \"employee_name\": \"Michael Johnson\",\n    \"evaluation_period\": \"Q4 2024\",\n    \"performance_rating\": 4,\n    \"feedback_comments\": \"Met expectations.\",\n    \"goals_objectives\": \"Improve client communication\",\n    \"reviewer_id\": 18855,\n    \"reviewer_name\": \"Emily Anderson\"\n  },\n  {\n    \"employee_id\": 12934,\n    \"employee_name\": \"Jessica Taylor\",\n    \"evaluation_period\": \"Q4 2024\",\n    \"performance_rating\": 5,\n    \"feedback_comments\": \"Outstanding performance.\",\n    \"goals_objectives\": \"Lead a new project\",\n    \"reviewer_id\": 18856,\n    \"reviewer_name\": \"Priya Desai\"\n  }\n</code></pre>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#retrieving-employee-reviews","title":"Retrieving Employee Reviews","text":"<p>1 Expand GET in the doc. You can see the docstring explaining the endpoint and its fields:</p> <p></p> <p>2 Click Try it out.</p> <p>3 Click Execute.</p> <p>The API will process the request and retrieve all the employee reviews from the database. The response section displays the retrieved records:</p> <p></p>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#updating-an-employee-review","title":"Updating an Employee Review","text":"<p>1 Expand PUT in the doc. You can see the docstring explaining the endpoint and its fields.</p> <p>2 Click Try it out.</p> <p>3 Enter the employee ID, for example, <code>12932</code>, which we used earlier with the POST endpoint.</p> <p>4 Enter the request body. For example, change <code>\u201cevaluation_period\": \"Q4 2024\"</code> to <code>\"evaluation_period\": \"Q3 2024\"</code> while keeping the other text unchanged:</p> <p></p> <p>5 Click Execute to send the updated data to the API.</p> <p>If successful, the updated employee review will be displayed with a response code 200:</p> <p></p>"},{"location":"mytechdocs/doc13/FastAPI_Postgres_Swagger.html#deleting-an-employee-review","title":"Deleting an Employee Review","text":"<p>1 Expand DELETE.</p> <p>2 Click Try it out.</p> <p>3 Enter employee ID for the record you want to delete. For example, enter <code>12932</code>:</p> <p></p> <p>4 Click Execute.</p> <p>You'll see a response indicating that the employee review has been deleted:</p> <p></p> <p>Congratulations! You've learned how to build a basic REST API using FastAPI and PostgreSQL, covering GET, POST, PUT, and DELETE operations. You've seen how to describe the endpoints and their fields in the code to make the auto-generated API documentation clearer and more informative. Additionally, we've explored how to use the Swagger documentation interface to interact with the API effectively.</p>"},{"location":"mytechdocs/doc14/Joins_Explained.html","title":"PostgreSQL Joins Explained with Practical Examples","text":"<p>This document explores the world of PostgreSQL joins, covering inner, left, right, and full outer joins through practical examples. We'll start by setting up sample tables in the Windows environment and inserting data into them, and then we'll walk through each type of join with an example and explanation.</p>"},{"location":"mytechdocs/doc14/Joins_Explained.html#setting-up-tables-with-data","title":"Setting Up Tables with Data","text":"<p>When you start psql and connect to your PostgreSQL server, you're generally connecting to an existing database, usually the postgres database with the postgres username by default. To work through the examples, we'll create a separate database.</p> <p>1 Create the database:</p> <pre><code>CREATE DATABASE dinesh_sql_guide;\n</code></pre> <p>2 Connect to the new database:</p> <pre><code>\\c dinesh_sql_guide\n</code></pre> <p>Here's my psql window where I am creating and connecting to the new database:</p> <p></p> <p>3 Create the tables to store skills and training programs:</p> <pre><code>CREATE TABLE Skills (\n    SkillID SERIAL PRIMARY KEY,\n    SkillName VARCHAR(255) NOT NULL\n);\n\nCREATE TABLE TrainingPrograms (\n    ProgramID SERIAL PRIMARY KEY,\n    SkillID INT,\n    ProgramName VARCHAR(255) NOT NULL,\n    FOREIGN KEY (SkillID) REFERENCES Skills(SkillID)\n);\n</code></pre> <p>4 Add the data to the tables:</p> <pre><code>-- Inserting Skills into the Skills table\nINSERT INTO Skills (SkillName) VALUES \n    ('Business'),\n    ('Personal Development'),\n    ('Web Development');\n\n-- Inserting Training Programs into the TrainingPrograms table\nINSERT INTO TrainingPrograms (SkillID, ProgramName) VALUES \n    (1, 'Basics of Entrepreneurship'),\n    (1, 'Business Analysis'),\n    (2, 'Problem Solving'),\n    (NULL, 'General Skills Workshop'); -- This entry has no matching SkillID\n</code></pre>"},{"location":"mytechdocs/doc14/Joins_Explained.html#inner-join","title":"Inner Join","text":"<p>An inner join is an SQL operation that combines rows from two or more tables based on a related column. The operation will return only the rows that have matching related column values in both tables.</p> <p>Here's an inner join:</p> <pre><code>SELECT Skills.SkillName, TrainingPrograms.ProgramName\nFROM Skills\nINNER JOIN TrainingPrograms ON Skills.SkillID = TrainingPrograms.SkillID;\n</code></pre> <p>This query will return skill names and corresponding training programs. Any training programs that don't have a <code>SkillID</code> will be filtered out. The programs Basics of Entrepreneurship, Business Analysis, and Problem Solving will be returned because they all have <code>SkillID</code> values that match existing skills in the <code>Skills</code> table. The General Skills Workshop program is filtered out because it has a <code>NULL SkillID</code>, which doesn't match any <code>SkillID</code> in the Skills table.</p> <p></p>"},{"location":"mytechdocs/doc14/Joins_Explained.html#left-join","title":"Left Join","text":"<p>A left join returns all rows from the left table and the matched rows from the right table. When there's no match, the result is NULL on the side of the right table.</p> <p>Here's a left join:</p> <pre><code>SELECT Skills.SkillName, TrainingPrograms.ProgramName\nFROM Skills\nLEFT JOIN TrainingPrograms ON Skills.SkillID = TrainingPrograms.SkillID;\n</code></pre> <p>This query will return skill names and corresponding training programs. All skill names from the left table (<code>Skills</code>) are returned, including those that don\u2019t have corresponding entries in the <code>TrainingPrograms</code> table.</p> <p>For example, the Web Development skill will be included in the results with a <code>NULL</code> value for <code>ProgramName</code>, indicating that there are no training programs associated with that skill.</p> <p></p>"},{"location":"mytechdocs/doc14/Joins_Explained.html#right-join","title":"Right Join","text":"<p>A right join returns all rows from the right table and the matching rows from the left table. If there's no match, you'll see NULLs for columns from the left table.</p> <p>Here's a right join:</p> <pre><code>SELECT Skills.SkillName, TrainingPrograms.ProgramName\nFROM Skills\nRIGHT JOIN TrainingPrograms ON Skills.SkillID = TrainingPrograms.SkillID;\n</code></pre> <p>This query will return skill names and corresponding training programs. All training programs from the right table (<code>TrainingPrograms</code>) are returned, including those that don\u2019t have corresponding entries in the <code>Skills</code> table.</p> <p>For example, the General Skills Workshop program will be included in the results with a <code>NULL</code> value for <code>SkillName</code>, indicating that there are no skills associated with that program.</p> <p></p>"},{"location":"mytechdocs/doc14/Joins_Explained.html#full-outer-join","title":"Full Outer Join","text":"<p>A full outer join returns all rows from both tables, inserting NULLs in places where there are no matches on either side. This way, no data from either table is excluded from the result.</p> <p>Here's a full outer join:</p> <pre><code>SELECT Skills.SkillName, TrainingPrograms.ProgramName\nFROM Skills\nFULL OUTER JOIN TrainingPrograms ON Skills.SkillID = TrainingPrograms.SkillID;\n</code></pre> <p>The query will return every skill name and training program from both the <code>Skills</code> and <code>TrainingPrograms</code> tables, with NULLs where there are no matching entries.</p> <p></p> <p>Congratulations! We've covered how SQL joins, such as left join and full outer join, can be used for querying and integrating data. Key points on joins:</p> <ul> <li>Inner Join: Returns only matching rows from both tables. </li> <li>Left Join: Returns all left, matching right, with nulls on the right for missing matches. </li> <li>Right Join: Returns all right, matching left, with nulls on the left for missing matches.</li> <li>Full Outer Join: Returns both, with nulls for missing matches.</li> </ul>"},{"location":"mytechdocs/doc15/Aggregate_Functions.html","title":"Using Aggregate Functions in PostgreSQL","text":"<p>This write-up covers five key aggregate functions: COUNT, SUM, MAX, MIN, and AVG. These functions are powerful tools for summarizing and analyzing your data. We'll walk through practical examples to illustrate how each function works.</p>"},{"location":"mytechdocs/doc15/Aggregate_Functions.html#setting-up-a-table-with-data","title":"Setting Up a Table with Data","text":"<p>Before we look at the examples, let's set up our environment. We'll create a sample table in PostgreSQL on a Windows system and add data to it. </p> <p>1 Open your PostgreSQL command line interface (psql) and run the following command to create the <code>TrainingPrograms</code> table with columns such as program duration and participant's satisfaction score:</p> <pre><code>CREATE TABLE TrainingPrograms (\n    ProgramID INT PRIMARY KEY,\n    ProgramName VARCHAR(50),\n    Trainer VARCHAR(50),\n    Duration INT,\n    Participants INT,\n    SatisfactionScore INT\n);\n</code></pre> <p>2 Add some data to the table:</p> <pre><code>INSERT INTO TrainingPrograms (ProgramID, ProgramName, Trainer, Duration, Participants, SatisfactionScore) VALUES\n(1, 'Leadership Skills', 'Alice', 5, 39, 8),\n(2, 'Business Analysis', 'Emily', 3, 25, 9),\n(3, 'Effective Communication', 'James', 2, 31, 6),\n(4, 'Sales Techniques', 'James', 1, 15, 8),\n(5, 'Web Development', 'Ritu', 4, 39, 9),\n(6, 'Cybersecurity', 'Ritu', 4, 22, 8),\n(7, 'Devops', 'Ritu', 2, 15, 8),\n(8, 'Data Analysis', 'Emily', 2, 18, 9),\n(9, 'Sales Strategies', 'James', 2, 11, 5);\n</code></pre>"},{"location":"mytechdocs/doc15/Aggregate_Functions.html#count","title":"Count","text":"<p>The <code>COUNT()</code> function returns the number of rows.</p> <p>For example, this gives us the number of rows where trainer is James:</p> <pre><code>SELECT COUNT(*) \nFROM TrainingPrograms \nWHERE Trainer = 'James';\n</code></pre> <p>Here's the result from the SQL query:</p> <p></p> <p>If a column is provided, <code>Count</code> returns the number of non-NULL values in that column. For example, when you run:</p> <pre><code>SELECT COUNT(ProgramID) FROM TrainingPrograms;\n</code></pre> <p>The output will be <code>9</code>.</p> <p>To find the total number of trainers:</p> <pre><code>SELECT COUNT(DISTINCT Trainer) AS TotalTrainers\nFROM TrainingPrograms;\n</code></pre> <p>The output will be <code>4</code>.</p> <p>Let's consider an interesting use case for the <code>COUNT()</code> function. Suppose we want to analyze how many training programs each trainer has conducted. This can help us understand workload distribution of trainers. Use <code>DESC</code> to order from the most programs to the least.</p> <pre><code>SELECT Trainer, COUNT(ProgramID) AS NumberOfPrograms\nFROM TrainingPrograms\nGROUP BY Trainer\nORDER BY NumberOfPrograms DESC;\n</code></pre> <p>Here's what the query returns:</p> <p></p> <p><code>COUNT(ProgramID)</code> counts the total number of programs, and the <code>GROUP BY</code> clause ensures that the count is calculated separately for each trainer.</p> <p>\ud83d\udca1 Note: When you use aggregate functions and other columns together, every non-aggregated column must appear in the <code>GROUP BY</code> clause.</p>"},{"location":"mytechdocs/doc15/Aggregate_Functions.html#sum","title":"Sum","text":"<p>The <code>SUM()</code> function calculates the total sum of a numeric column.</p> <p>For example, this gives us the total number of participants:</p> <pre><code>SELECT SUM(Participants) FROM TrainingPrograms;\n</code></pre> <p>The result will be <code>215</code>.</p> <p>One interesting use case could be to calculate the total duration of all training programs for each trainer. This can help us understand the overall workload and time investment each trainer has made:</p> <pre><code>SELECT Trainer, SUM(Duration) AS TotalDuration\nFROM TrainingPrograms\nGROUP BY Trainer;\n</code></pre> <p>Result of the query:</p> <p></p> <p>Let's take another user case. Calculate the total satisfaction scores given by participants for each trainer:</p> <pre><code>SELECT Trainer, SUM(SatisfactionScore) AS TotalSatisfactionScore\nFROM TrainingPrograms\nGROUP BY Trainer\nORDER BY TotalSatisfactionScore DESC;\n</code></pre> <p>The query returns:</p> <p></p>"},{"location":"mytechdocs/doc15/Aggregate_Functions.html#maximum","title":"Maximum","text":"<p>The <code>MAX()</code> function returns the maximum value within a column of a table.</p> <p>For example, this query returns the maximum satisfaction score:</p> <pre><code>SELECT MAX(SatisfactionScore) FROM TrainingPrograms;\n</code></pre> <p>The result will be <code>9</code>.</p> <p>To find the programs that achieved the maximum satisfaction score, you can use a subquery to first find the maximum satisfaction score, and then retrieve the programs that have that score:</p> <pre><code>SELECT ProgramName, SatisfactionScore\nFROM TrainingPrograms\nWHERE SatisfactionScore = (SELECT MAX(SatisfactionScore) FROM TrainingPrograms);\n</code></pre> <p>Here's the result from the query:</p> <p></p>"},{"location":"mytechdocs/doc15/Aggregate_Functions.html#minimum","title":"Minimum","text":"<p>The <code>MIN()</code> function returns the minimum value within a column of a table.</p> <p>For example, this query returns the lowest number of participants:</p> <pre><code>SELECT MIN(Participants) FROM TrainingPrograms;\n</code></pre> <p>The result is <code>11</code>.</p> <p>To find the lowest number of participants and then retrieve the corresponding program:</p> <pre><code>SELECT ProgramName, Participants\nFROM TrainingPrograms\nWHERE Participants = (SELECT MIN(Participants) FROM TrainingPrograms);\n</code></pre> <p>The query returns:</p> <p></p>"},{"location":"mytechdocs/doc15/Aggregate_Functions.html#average","title":"Average","text":"<p>The <code>AVG()</code> function returns the average value of a numeric column.</p> <p>For example, this query returns the average satisfaction score:</p> <pre><code>SELECT ROUND(AVG(SatisfactionScore), 2) FROM TrainingPrograms;\n</code></pre> <p>We've used the <code>ROUND()</code> function to limit the decimal points to 2.</p> <p>The query result is <code>7.78</code>.</p> <p>This query uses a subquery to find programs with a number of participants above the average:</p> <pre><code>SELECT ProgramName, Participants\nFROM TrainingPrograms\nWHERE Participants &gt; (SELECT AVG(Participants) FROM TrainingPrograms);\n</code></pre> <p>The result shows:</p> <p></p> <p>To summarize, we've looked into essential SQL aggregate functions: COUNT, SUM, MAX, MIN, and AVG. We applied these functions to practical scenarios, such as calculating total participants and maximum satisfaction score. Through these examples, you've seen how these functions can be used to extract valuable insights from your data.</p>"},{"location":"mytechdocs/doc16/UDF_Functions.html","title":"Defining Functions using PostgreSQL's Procedural Language","text":"<p>A function in PostgreSQL is a named block of code that accepts arguments, performs operations, and returns a result. User-defined functions (UDFs) enable you to perform specific tasks within PostgreSQL. Let's see how to create these functions using PostgreSQL's Procedural Language (PL/pgSQL).</p>"},{"location":"mytechdocs/doc16/UDF_Functions.html#user-defined-function-syntax","title":"User-Defined Function Syntax","text":"<p>Here's the syntax for creating a user-defined function using PL/pgSQL:</p> <pre><code>CREATE OR REPLACE FUNCTION function_name(parameter_name data_type)\nRETURNS return_data_type AS $$\nBEGIN\n  -- Function logic goes here\n  RETURN value;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre> <ul> <li> <p>The opening statement defines the function's name, parameters, and the return type.</p> </li> <li> <p>The <code>AS $$ ... $$</code> section contains the function's code.</p> </li> <li> <p>The <code>BEGIN ... END;</code> block is where you implement the function's logic.</p> </li> <li> <p>The final line specifies the language used (<code>PL/pgSQL</code>).</p> </li> </ul>"},{"location":"mytechdocs/doc16/UDF_Functions.html#example-1-function-to-add-days-to-a-date","title":"Example 1: Function to Add Days to a Date","text":"<p>Let's begin with creating a function that takes a date and an integer representing the number of days to be added. The function then returns the new date after adding the specified number of days.</p> <pre><code>CREATE OR REPLACE FUNCTION add_days(start_date DATE, days_to_add INT)\nRETURNS DATE AS $$\nBEGIN\n  RETURN start_date + days_to_add;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre> <p>You can call this function like this: <code>SELECT add_days('2025-03-16', 10);</code>  It will return a date 10 days after March 16, 2025:</p> <p></p>"},{"location":"mytechdocs/doc16/UDF_Functions.html#example-2-function-to-calculate-grades","title":"Example 2: Function to Calculate Grades","text":"<p>Next up, we'll see how conditional logic and error handling can be implemented in a function. This function takes an integer score as input and returns a corresponding grade.</p> <pre><code>CREATE FUNCTION calculate_grade(score INTEGER)\nRETURNS TEXT AS $$\nDECLARE\n    grade TEXT;\nBEGIN\n    IF score &lt; 0 OR score &gt; 100 THEN\n        RETURN 'The score should not be less than 0 or greater than 100';\n    END IF;\n\n    grade := CASE\n        WHEN score &gt;= 90 THEN 'A+'\n        WHEN score &gt;= 80 THEN 'A'\n        WHEN score &gt;= 70 THEN 'B+'\n        WHEN score &gt;= 60 THEN 'B'\n        ELSE 'C'\n    END;\n\n    RETURN grade;\nEND;\n$$ LANGUAGE plpgsql;\n</code></pre> <p>The function first checks if the input score is within the valid range (0-100). If it's not, an error message is returned.</p> <p><code>CASE WHEN</code> is a control flow statement (like\u00a0IF/ELSIF/ELSE) used for conditional logic.</p> <ul> <li> <p>CASE: Starts the\u00a0CASE\u00a0statement.</p> </li> <li> <p>WHEN condition THEN result: Each\u00a0WHEN\u00a0clause specifies a condition and the result to return if that condition is true. Each condition is checked one by one. The first condition that evaluates to true determines the result that's returned.</p> </li> <li> <p>ELSE default_result: The\u00a0ELSE\u00a0clause is optional. If none of the\u00a0WHEN\u00a0conditions are true, the\u00a0ELSE\u00a0result is returned. If you omit the\u00a0ELSE\u00a0clause and none of the\u00a0WHEN\u00a0conditions are true, the\u00a0CASE\u00a0statement will return\u00a0NULL.</p> </li> <li> <p>END: Concludes the\u00a0CASE\u00a0statement. This is required.</p> </li> </ul> <p>Finally, the function returns the calculated grade.</p> <p>You can call the function like this:</p> <pre><code>SELECT calculate_grade(95);   -- Returns 'A+'\nSELECT calculate_grade(82);   -- Returns 'A'\nSELECT calculate_grade(71);   -- Returns 'B+'\nSELECT calculate_grade(55);   -- Returns 'C'\nSELECT calculate_grade(105);  -- Returns 'The score should not be less than 0 or greater than 100'\n</code></pre> <p>Take a look at this screenshot to see it in action:</p> <p></p>"},{"location":"mytechdocs/doc16/UDF_Functions.html#example-3-function-to-determine-campaign-priority-for-a-store","title":"Example 3: Function to Determine Campaign Priority for a Store","text":"<p>In our final example, we'll create a function that uses a table. The function determines the priority level (High, Medium, or Low) for implementing a marketing campaign based on estimated total revenue.</p> <p>Create a table that includes the necessary columns to store the campaign name, store name, and total estimated revenue. These columns will provide the data needed for the function to determine the priority level based on the estimated revenue.</p> <pre><code>CREATE TABLE campaign_targets (\n    campaign_name TEXT NOT NULL,\n    store_name TEXT NOT NULL,\n    estimated_total_revenue NUMERIC NOT NULL\n);\n</code></pre> <p>Let's add some sample data to the <code>campaign_targets</code> table:</p> <pre><code>INSERT INTO campaign_targets (campaign_name, store_name, estimated_total_revenue)\nVALUES \n    ('Black Friday Sale', 'Store A', 20000),\n    ('Summer Clearance', 'Store B', 1500),\n    ('Golden Week Promo', 'Store C', 9000),\n    ('Winter Fest Sale', 'Store D', 10000),\n    ('Summer Splash', 'Store E', 5000),\n    ('Holiday Bonanza', 'Store F', 16000);\n</code></pre> <p>Create the function that takes the name of a campaign as input and determines the priority level for implementing that campaign based on the estimated total revenue for a store. It returns a table with two columns: <code>priority_level</code> and <code>store_name</code>. The priority level is categorized as High Priority, Medium Priority, or Low Priority depending on the revenue thresholds.</p> <pre><code>CREATE OR REPLACE FUNCTION get_campaign_priority(campaign_name_input TEXT)\nRETURNS TABLE (priority_level TEXT, store_name TEXT) AS $$\nBEGIN\n  RETURN QUERY\n  SELECT\n    CASE\n      WHEN campaign_targets.estimated_total_revenue &gt; 10000 THEN 'High Priority'\n      WHEN campaign_targets.estimated_total_revenue &gt; 5000 THEN 'Medium Priority'\n      ELSE 'Low Priority'\n    END AS priority_level,\n    campaign_targets.store_name\n  FROM\n    campaign_targets\n  WHERE\n    campaign_targets.campaign_name = campaign_name_input;\nEND;\n$$\nLANGUAGE plpgsql;\n</code></pre> <ul> <li> <p>RETURN Query: Runs the <code>SELECT</code> query and return its result. The result of this query forms the table structure defined in the <code>RETURNS TABLE</code> clause.</p> </li> <li> <p>SELECT Query: The result of the <code>CASE</code> expression is aliased as <code>priority_level</code>. The <code>store_name</code> is selected directly from the <code>campaign_targets</code> table.    </p> </li> </ul> <p>You can call the function like this:</p> <pre><code>SELECT * FROM get_campaign_priority('Black Friday Sale'); \nSELECT * FROM get_campaign_priority('Summer Clearance'); \nSELECT * FROM get_campaign_priority('Golden Week Promo'); \nSELECT * FROM get_campaign_priority('Winter Fest Sale');\n</code></pre> <p>The function returns the priority level based on the estimated total revenue:</p> <p></p> <p>Congratulations! We have covered the syntax for creating a function, incorporated conditional logic using the <code>CASE</code> statement, and worked with table data. We also discussed error handling to ensure the function runs smoothly.</p>"},{"location":"mytechdocs/doc17/Access_Control.html","title":"Implementing Access Control with Row-Level Security in PostgreSQL","text":"<p>Consider this scenario: Managers, Alice and Swati, can only see the skills of their direct reports. For example, Alice can see the skills of employees who report to her and cannot see the skills of employees who report to Swati. To implement this scenario, we'll create the users (Alice and Swati), grant privileges to both, and implement the row-level security so that each manager can only see the skills of their direct reports.</p> <p></p>"},{"location":"mytechdocs/doc17/Access_Control.html#create-tables-and-add-data-to-the-tables","title":"Create Tables and Add Data to the Tables","text":"<p>Create an\u00a0<code>employees</code>\u00a0table and a\u00a0<code>skills</code>\u00a0table to store the relevant data:</p> <pre><code>CREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(50),\n    manager VARCHAR(50)\n);\n\nCREATE TABLE skills (\n    id SERIAL PRIMARY KEY,\n    employee_id INT REFERENCES employees(id),\n    skill VARCHAR(50)\n);\n</code></pre> <p>Add data into the tables:</p> <pre><code>INSERT INTO employees (name, manager) VALUES\n('Rajesh', 'Alice'),\n('Neha', 'Swati'),\n('Michael', 'Alice'),\n('Emily', 'Swati'),\n('Vikram', 'Alice'),\n('Sophia', 'Swati');    \n\nINSERT INTO skills (employee_id, skill) VALUES\n(1, 'Financial Analysis'),\n(1, 'Budgeting'),\n(2, 'Marketing'),\n(2, 'Brand Management'),\n(3, 'Data Analysis'),\n(3, 'Market Research'),\n(4, 'Content Creation'),\n(4, 'SEO'),\n(5, 'Sales'),\n(5, 'Customer Relationship Management'),\n(6, 'Human Resources'),\n(6, 'Recruitment');\n</code></pre>"},{"location":"mytechdocs/doc17/Access_Control.html#create-users","title":"Create Users","text":"<p>In PostgreSQL, a user is essentially a role with the <code>LOGIN</code> attribute. Use the <code>CREATE ROLE</code> command to create the users. We want the role names to be case-sensitive and to appear exactly as we define it. For that, use double quotes around the role name:</p> <pre><code>CREATE ROLE \u201cAlice\u201d WITH LOGIN PASSWORD 'password_for_alice'; \nCREATE ROLE \u201cSwati\u201d WITH LOGIN PASSWORD 'password_for_swati';\n</code></pre> <p>Ensure that you choose a strong password for each user.</p>"},{"location":"mytechdocs/doc17/Access_Control.html#grant-privileges","title":"Grant Privileges","text":"<p>The users, Alice and Swati, won't have access to the <code>employees</code> and <code>skills</code> tables. For example, if Alice logs in and tries to query the <code>skills</code> table, she will get a permission denied error message:</p> <p></p> <p>Use the <code>GRANT</code> command to assign privileges. There are different kinds of privileges such as <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>. To give Alice and Swati view access to the tables, we'll grant them <code>SELECT</code> privilege:</p> <pre><code>GRANT SELECT ON employees TO \u201cAlice\u201d, \u201cSwati\u201d;\nGRANT SELECT ON skills TO \u201cAlice\u201d, \u201cSwati\u201d;\n</code></pre>"},{"location":"mytechdocs/doc17/Access_Control.html#enable-row-level-security","title":"Enable Row-Level Security","text":"<p>We don't want the two users to access the skills of all employees. For example, because we gave her SELECT privilege, Alice can now use a select query to view all employees' skills:</p> <p></p> <p>We want to restrict data access on the <code>skills</code> table based on user roles. So, enable row-level security on the\u00a0<code>skills</code>\u00a0table:</p> <pre><code>ALTER TABLE skills ENABLE ROW LEVEL SECURITY;\n</code></pre>"},{"location":"mytechdocs/doc17/Access_Control.html#create-a-row-level-security-policy","title":"Create a Row-Level Security Policy","text":"<p>Define a policy that allows Alice and Swati to see only their employees' skills:</p> <pre><code>CREATE POLICY employee_skills_policy \nON skills \nFOR SELECT \nUSING (employee_id IN (SELECT id FROM employees WHERE manager = current_user));\n</code></pre>"},{"location":"mytechdocs/doc17/Access_Control.html#log-in-and-test","title":"Log In and Test","text":"<p>Users can log in, and when they access the <code>skills</code> table, they will only see the skills of their direct reports. For instance, when Alice logs in and does a select query on <code>skills</code>, she can only see the skills of her direct reports:</p> <p></p> <p>Swati logs in and runs a select query to see both employee names and their skills. The query displays this information only for those employees who report to her:</p> <p></p> <p>Congratulations! We've implemented a basic access control scenario in PostgreSQL. We started by creating user roles using the CREATE ROLE command. We then granted SELECT access to these users so that they have view access to the tables. Finally, we configured a row-level security policy to ensure each user could only access the data they were permitted to see.</p>"},{"location":"mytechdocs/doc18/Postgres_Views.html","title":"Understanding the Benefits of PostgreSQL Views","text":"<p>Views are virtual tables that you create by querying data from one or more tables. They don't physically store the data. Let's create two tables and then use a view to retrieve the data, showing the benefits of views.</p>"},{"location":"mytechdocs/doc18/Postgres_Views.html#create-tables-and-add-data","title":"Create Tables and Add Data","text":"<p>Create <code>employees</code> table:</p> <pre><code>CREATE TABLE employees (\n    employee_id INTEGER PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    job_title VARCHAR(50),\n    hire_date DATE NOT NULL,\n    date_of_birth DATE NOT NULL,\n    performance_rating INTEGER CHECK (performance_rating BETWEEN 1 AND 5)\n);\n</code></pre> <p>Create <code>training_programs</code> table:</p> <pre><code>CREATE TABLE training_programs (\n    program_id SERIAL PRIMARY KEY,\n    program_name VARCHAR(100) NOT NULL,\n    program_date DATE NOT NULL,\n    duration_days INTEGER NOT NULL,\n    employee_id INTEGER REFERENCES employees(employee_id)\n);\n</code></pre> <p>Add data to the <code>employees</code> table:</p> <pre><code>INSERT INTO employees (employee_id, name, job_title, hire_date, date_of_birth, performance_rating) VALUES\n(100, 'Rajesh', 'Financial Analyst', '2023-01-15', '1985-07-23', 3),\n(101, 'Alice', 'Marketing Specialist', '2022-11-05', '1990-06-12', 5),\n(102, 'Neha', 'Data Analyst', '2021-08-25', '1988-02-17', 4),\n(103, 'Swati', 'IT Specialist', '2020-05-30', '1992-03-08', 4),\n(104, 'Michael', 'Content Creator', '2019-12-20', '1986-04-19', 3),\n(105, 'Emily', 'Sales Representative', '2023-09-10', '1991-01-14', 3),\n(106, 'Vikram', 'Customer Relationship Manager', '2020-07-07', '1989-05-05', 2),\n(107, 'Sophia', 'Recruitment Specialist', '2021-03-15', '1987-11-22', 4);\n</code></pre> <p>Add data to the <code>training_programs</code> table:</p> <pre><code>INSERT INTO training_programs (program_id, program_name, program_date, duration_days, employee_id) VALUES\n(1, 'Advanced Financial Modeling', '2024-07-21', 5, 100),\n(2, 'Risk Management and Mitigation', '2024-09-18', 3, 100),\n(3, 'Digital Marketing Strategies', '2024-04-01', 4, 101),\n(4, 'Data Visualization and Reporting', '2024-04-15', 4, 102), -- Missing opening quote added\n(5, 'Cloud Computing and Infrastructure', '2024-05-01', 5, 103),\n(6, 'Storytelling', '2024-05-10', 2, 104),\n(7, 'Advanced Sales Strategies', '2024-06-01', 3, 105),\n(8, 'Negotiation Skills', '2024-06-10', 2, 105),\n(9, 'Manage and Analyze Customer Interactions', '2024-07-22', 3, 106),\n(10, 'Conflict Resolution and Negotiation', '2024-07-18', 2, 106),\n(11, 'Talent Acquisition Strategies', '2024-08-01', 3, 107);\n</code></pre> <p>Now that we have set up the table and data, let's understand the benefits of views.</p>"},{"location":"mytechdocs/doc18/Postgres_Views.html#simplifying-complex-data-and-restricting-access-to-specific-data","title":"Simplifying Complex Data and Restricting Access to Specific Data","text":"<p>Suppose Janet is a training manager who wants to see a list of employees and the training programs they have attended.\u00a0You don't need to give Janet access to the <code>employees</code> base table that has confidential information like date of birth and performance rating. You can create a view that hides the complex join as well as prevents access to the confidential fields.</p> <p>1 Create the view:</p> <pre><code>CREATE VIEW employee_training AS\nSELECT e.employee_id, e.name, e.job_title, t.program_name, t.program_date, t.duration_days\nFROM employees e\nJOIN training_programs t ON e.employee_id = t.employee_id;\n</code></pre> <p>2 Create user (role) Janet.</p> <pre><code>CREATE ROLE \u201cJanet\u201d WITH LOGIN PASSWORD 'password_for_janet';\n</code></pre> <p>3 Grant Janet access to the <code>employee_training</code> view:</p> <pre><code>GRANT SELECT ON employee_training TO \u201cJanet\u201d;\n</code></pre> <p>4 Ensure Janet doesn't have access to the base tables by explicitly revoking any access:</p> <pre><code>REVOKE ALL ON employees, training_programs FROM \u201cJanet\u201d;\n</code></pre> <p>5 Janet logs in to PostgreSQL. She can query the <code>employee_training</code> view to see the list of employees and the training they have attended:</p> <p></p> <p>If she attempts to query the <code>employees</code> table, she will see the permission denied error message:</p> <p></p>"},{"location":"mytechdocs/doc18/Postgres_Views.html#easier-maintenance-of-view-queries","title":"Easier Maintenance of View Queries","text":"<p>Let's imagine that you want to update the employees table to add a department column. What's great about views is that the query using the view need not be updated.</p> <p>For instance, you can alter the <code>employees</code> table to add a new column:</p> <pre><code>ALTER TABLE employees ADD COLUMN department VARCHAR(50);\n</code></pre> <p>Then update the <code>employees</code> data:</p> <pre><code>UPDATE employees\nSET department = CASE employee_id\n    WHEN 100 THEN 'Finance'\n    WHEN 101 THEN 'Marketing'\n    WHEN 102 THEN 'Data Analysis'\n    WHEN 103 THEN 'IT'\n    WHEN 104 THEN 'Content'\n    WHEN 105 THEN 'Sales'\n    WHEN 106 THEN 'Customer Relations'\n    WHEN 107 THEN 'HR'\nEND;\n</code></pre> <p>Now, when Janet runs the query, she will still get the same results without needing to change her query:</p> <p></p> <p>This shows how views provide easy maintenance and ensures that users like Janet don't need to modify their queries even when the base tables are updated.</p>"},{"location":"mytechdocs/doc18/Postgres_Views.html#reusability","title":"Reusability","text":"<p>Imagine Janet needs to see the total number of training days each employee has attended. She can reuse the view in a new query:</p> <pre><code>SELECT employee_id, name, SUM(duration_days) AS total_training_days\nFROM employee_training\nGROUP BY employee_id, name;\n</code></pre> <p>The results will show the total number of training days for each employee:</p> <p></p> <p>Here's another example. Suppose she needs to find employees who have attended training programs with a total duration of more than 4 days:</p> <pre><code>SELECT employee_id, name, job_title, SUM(duration_days) AS total_duration_days\nFROM employee_training\nGROUP BY employee_id, name, job_title\nHAVING SUM(duration_days) &gt; 4;\n</code></pre> <p>The results will display the employees who meet the criteria:</p> <p></p> <p>Congratulations! We have covered how views can simplify complex data and restrict access to specific data. We have also seen how maintaining and reusing view queries can be done with ease.</p>"},{"location":"mytechdocs/doc19/Table_Indexing.html","title":"Faster Query in Action: Indexing a PostgreSQL Table","text":"<p>An index in PostgreSQL can significantly improve query performance by making data retrieval faster. Think of an index like the index of a nonfiction book. If you want to find information about a flower named Blue orchid, you'd flip to the index at the end of the book, look for Blue orchid, and find the page numbers where it's discussed. Similarly, in a database, an index helps PostgreSQL quickly locate the rows associated with the data you're searching for, instead of scanning the entire table.</p> <p>In this walkthrough, we'll focus on the default B-tree index to demonstrate how it improves query performance, step by step.</p>"},{"location":"mytechdocs/doc19/Table_Indexing.html#create-a-table","title":"Create a Table","text":"<p>Create the <code>Customers</code> table:</p> <pre><code>CREATE TABLE Customers (\n    ID SERIAL PRIMARY KEY,\n    FirstName VARCHAR(50),\n    LastName VARCHAR(50),\n    Email VARCHAR(100)\n);\n</code></pre>"},{"location":"mytechdocs/doc19/Table_Indexing.html#insert-a-large-data-set","title":"Insert a Large Data Set","text":"<p>Indexes are especially useful when working with large datasets because they help speed up data retrieval. To demonstrate this, we'll insert a substantial dataset into the <code>Customers</code> table.</p> <p>You can use a single query with the <code>generate_series()</code> function to insert multiple rows in PostgreSQL:</p> <pre><code>INSERT INTO Customers (FirstName, LastName, Email)\nSELECT \n    'FirstName' || g AS FirstName, \n    'LastName' || g AS LastName, \n    'email' || g || '@example.com' AS Email\nFROM generate_series(1, 1000000) g;\n</code></pre> <p>This SQL code performs a bulk insert into the <code>Customers</code> table. It generates 1,000,000 rows using <code>generate_series(1, 1000000)</code>, where each row has a unique <code>FirstName</code>, <code>LastName</code>, and <code>Email</code> constructed by concatenating the strings FirstName, LastName, and email with the generated sequence number. The result is one million new customer records.</p> <p>For instance, this screenshot shows the first 11 records from the table after data has been inserted:</p> <p></p>"},{"location":"mytechdocs/doc19/Table_Indexing.html#run-a-query-without-an-index","title":"Run a Query Without an Index","text":"<p>Run a query without creating an index to observe performance:</p> <pre><code>EXPLAIN ANALYZE\nSELECT * FROM Customers WHERE Email = 'email500000@example.com';\n</code></pre> <p>When I ran the query, I got this result:</p> <p></p> <p>The database performed a Parallel Sequential Scan, which examines every row to locate the matching result. While this approach is acceptable for small datasets, it becomes increasingly inefficient and time-consuming as the table size grows. Note the Execution Time, which is measured at 127.725 ms, highlighting the impact of scanning the entire dataset without indexing.</p>"},{"location":"mytechdocs/doc19/Table_Indexing.html#create-an-index","title":"Create an Index","text":"<p>Create an index on the <code>Email</code> column:</p> <pre><code>CREATE INDEX idx_email ON Customers (Email);\n</code></pre>"},{"location":"mytechdocs/doc19/Table_Indexing.html#run-a-query-again","title":"Run a Query Again","text":"<p>Now that we've created the index, run a query again:</p> <pre><code>EXPLAIN ANALYZE\nSELECT * FROM Customers WHERE Email = 'email700000@example.com';\n</code></pre> <p>This time I got this result from the query:</p> <p></p> <p>Note the difference: Execution time has considerably reduced to 18.885 ms and the query now uses an Index Scan, dramatically reducing the number of rows scanned.</p> <p>Rather than scanning every row in the table to locate <code>email700000@example.com</code>, as is the case with a sequential scan in a previous step, PostgreSQL now uses the index on the <code>Email</code> column to efficiently pinpoint the exact row. By using the index, it quickly jumps to the relevant entry for <code>email700000@example.com</code>, retrieves the row, and returns the result, significantly speeding up the query.</p> <p>Let's once again look at the comparison:</p> Scenario Scan Type Execution Time Without Index Sequential Scan 127.725 ms With Index Index Scan 18.885 ms <p>Congratulations! We've understood the difference between a sequential scan and an index scan, and we've seen how an index can significantly speed up query performance.</p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html","title":"Casting in Python","text":"<p>We'll be discussing the concept of casting and then moving on to practical examples of casting in Python.</p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html#concept-of-casting","title":"Concept of Casting","text":"<p>With casting, you can convert a variable from one type to another.</p> <p>If we use the following code, Python automatically decides x and y to be integer, based on assigned values:</p> <pre><code>x = 20\ny = 5\n</code></pre> <p>However, if x and y were strings, then we'll need to convert them to integers to perform arithmetic operations. In the following code, <code>x = \u201c20\u201d</code> and <code>y = \u201c5\u201d</code> are defined as strings. The code then uses the <code>int()</code> function to cast these strings to integers.</p> <pre><code>x = \"20\"\ny = \"5\"\nx = int(x)\ny = int(y)\ntotal = x + y\nprint(total)\n</code></pre> <p>The output will be:</p> <p></p> <p>If we didn't cast them into integers, then instead of arithmetic operation, the strings will be concatenated. For example, this code isn't casting x and y into integers:</p> <pre><code>x = \"20\"\ny = \"5\"\ntotal = x + y\nprint(total)\n</code></pre> <p>The output will be:</p> <p></p>"},{"location":"mytechdocs/doc2/Casting_in_Python.html#converting-other-data-types","title":"Converting Other Data Types","text":"<p>Now that we've understood the concept of casting, let's see how to convert different data types in Python.</p> <p>In this code, the float value of 3.9 is converted to integer:</p> <pre><code>x = int (3.9)\nprint(x)\n</code></pre> <p>The output will be:</p> <p></p> <p>In this code, the integer value of 7 is converted to float:</p> <pre><code>x = float (7)\nprint(x)\n</code></pre> <p>The output will be:</p> <p></p> <p>In this code, the integer value of 21 is converted to string and concatenated with another string:</p> <pre><code>x = 21\nx = str(x)\nprint (\"Oranges purchased \" + x)\n</code></pre> <p>The output will be:</p> <p></p> <p>You've learned the concept of casting, with examples like string to integer and integer to float. Thanks for reading this short tutorial!</p>"},{"location":"mytechdocs/doc20/Using_Markdown.html","title":"Using Markdown","text":"<p>Markdown is a language to format and structure documents. Its syntax is minimal and easy to use.</p> <p>There are various tools that support markdown. For this document, we'll use Visual Studio Code (VS Code) on Windows.</p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#install-the-vs-code-extension","title":"Install the VS Code Extension","text":"<p>I installed the Markdown All in One extension for this tutorial. Here's how I did that:</p> <p>1 Open VS Code.</p> <p>2 Click the Extensions icon on the side of the VS Code window or press Ctrl+Shift+X.</p> <p></p> <p>3 In the Extensions view, search for the extension Markdown All in One and install it.</p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#create-a-file","title":"Create a File","text":"<p>Create a markdown file with the extension of <code>.md</code>, for example, <code>markdown_example.md</code>.</p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#bold-and-italics","title":"Bold and Italics","text":"<p>Surround the text with <code>*</code> to make the text in italics.</p> <p>Surround the text with <code>**</code> to make the text bold.</p> <p>Or in VS Code, you can simply press Ctrl+I to italicize selected text and press Ctrl+B to bold selected text.</p> <p></p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#preview-the-text","title":"Preview the Text","text":"<p>To preview the text on a side pane, click the Open Preview to the Side icon in the top-right corner.</p> <p></p> <p>The preview will then appear on the right side in VS Code:</p> <p></p> <p>Alternatively, you can press Ctrl+Shift+V to open a separate preview pane.</p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#headings","title":"Headings","text":"<p>In Markdown, <code>#</code> are used to indicate headings and the number of <code>#</code> indicates the heading levels:</p> <pre><code># Heading Level 1\n\n## Heading Level 2\n\n### Heading Level 3\n\n#### Heading Level 4\n</code></pre> <p>Here's an example with the preview on the right pane:</p> <p></p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#lists","title":"Lists","text":"<p>To add bulleted lists, you can use hyphen (<code>-</code>). Each time you press Enter, a new bullet appears automatically.</p> <p>To add numbered lists, use <code>1</code> followed by a period. Each time you press Enter, the next number in the sequence appears automatically.</p> <p>You can indent items with space or tab to make them subitems.</p> <p></p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#links","title":"Links","text":"<p>The syntax for link is: <code>[Link Text](URL)</code></p> <p>Here's an example:</p> <p></p> <p>This is the preview:</p> <p></p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#images","title":"Images","text":"<p>The syntax for link is: <code>![Alt Text](Image URL)</code></p> <p>For the following example, I simply copied and pasted the image in the markdown file. The syntax is automatically entered and I edited only the alt text. The image is automatically saved in the same folder as the markdown file.</p> <p></p> <p>This is the preview:</p> <p></p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#tables","title":"Tables","text":"<p>To create a table, use the pipe characters (<code>|</code>) to define columns and hyphens (<code>-</code>) to define the header row.</p> <p>Here's an example with the preview on the right pane:</p> <p></p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#code-block-and-inline-code","title":"Code Block and Inline Code","text":"<p>To format a code block, surround the text with triple backticks.</p> <p>To format inline code, surround the text with single backticks.</p> <p>Here's an example to illustrate both a code block and inline code:</p> <p></p> <p>This is the preview:</p> <p></p> <p>Or you can simply use the Markdown All in One commands to format text as code blocks or inline code:</p> <p></p> <p>Access these commands from the VS Code Command Palette. Press Ctrl+Shift+P to open the Command Palette.</p>"},{"location":"mytechdocs/doc20/Using_Markdown.html#print-html","title":"Print HTML","text":"<p>1 Open the markdown file:</p> <p></p> <p>2 Open the Command Palette.</p> <p>3 Select Markdown All in One: Print current document to HTML from the Command Palette.</p> <p>The HTML file is automatically saved in the same folder as the markdown file:</p> <p></p> <p>Congratulations! You've explored the various ways to format and structure a document with Markdown, from adding headings and lists to code blocks. Additionally, you've learned how to print HTML from a markdown document using the Markdown All in One extension.</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html","title":"Using reStructuredText with Sphinx","text":"<p>reStructuredText is a markup language for formatting and structuring documents, similar to Markdown.</p> <p>reStructuredText is commonly used with Sphinx to generate documentation. Sphinx is a tool that converts <code>.rst</code> (reStructuredText) files into various output formats, such as HTML.</p> <p>This document walks you through the steps to set up Sphinx on Windows, write reStructuredText in <code>.rst</code> files, and then view the output in HTML format.</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#install-python","title":"Install Python","text":"<p>Python is needed to run Sphinx. You can download Python from here: https://www.python.org/downloads/</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#install-sphinx-and-initialize-a-project","title":"Install Sphinx and Initialize a Project","text":"<p>1 Open Command Prompt.</p> <p>2 Create a virtual environment:</p> <p><code>python -m venv .venv</code></p> <p>3 Activate the virtual environment:</p> <p><code>.\\.venv\\Scripts\\activate</code></p> <p>4 Install Sphinx in the virtual environment:</p> <p><code>pip install sphinx</code></p> <p>Sphinx will start installing:</p> <p></p> <p>5 Initialize a Sphinx project:</p> <p><code>sphinx-quickstart</code></p> <p>When the quickstart utility runs, it will ask you to specify various configuration options. I opted for separate source and build directories. I also entered the project name, author name, and project release, and left the language blank to select the default as English.</p> <p></p> <p>Quickstart will create the necessary directory structure of the project with all the essential files:</p> <p></p> <p>After running the quickstart utility, my project directory looks like this in Windows Explorer:</p> <p></p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#create-rst-files","title":"Create .RST Files","text":"<p><code>.rst</code> files are reStructuredText files. The <code>index.rst</code> file was already created when you ran the quickstart utility.</p> <p>We'll create other <code>.rst</code> files in the source directory to learn how reStructuredText formats documents. Each of these <code>.rst</code> files correspond to different content types, such as headings and lists.</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#headings","title":"Headings","text":"<p>Create a file named <code>headings.rst</code> with this content:</p> <pre><code>Headings\n========\nThis is the highest level of heading (Heading 1).\n\nHeading 2\n---------\nThis is the second level of heading.\n\nHeading 3\n~~~~~~~~~\nThis is the third level of heading.\n\nHeading 4\n^^^^^^^^^\nThis is the fourth level of heading.\n</code></pre> <p>The <code>headings.rst</code> content shows how to format different heading levels.</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#lists","title":"Lists","text":"<p>Create a file named <code>lists.rst</code> with this content:</p> <pre><code>Lists\n=====\n\nBullet Points\n-------------\n\n- Item 1\n- Item 2\n- Item 3\n- Item 4\n\nNumbered List\n-------------\n\n1. First item\n2. Second item\n3. Third item\n4. Fourth item\n</code></pre> <p>The <code>lists.rst</code> content shows how to format bulleted and numbered lists.</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#images-and-links","title":"Images and Links","text":"<p>Create a file named <code>imagesandlinks.rst</code> with this content:</p> <pre><code>Images and Links\n================\n\n.. image:: images/image-unsplash.jpg\n   :alt: Sample Image\n   :width: 600px\n   :align: center\n\nThis is a caption for the sample image.\n\nPhoto by `Daniel Peters &lt;https://unsplash.com/@danee?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&gt;`_ on `Unsplash &lt;https://unsplash.com/photos/landscape-photography-of-brown-trees-2tvkoVK8prc?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash&gt;`_\n</code></pre> <p>I created the <code>images</code> directory in the source directory and added an image named <code>image-unsplash.jpg</code>.</p> <p>The image credit link uses backticks and an underscore like this:</p> <pre><code>`Link Text &lt;https://example.com&gt;`_\n</code></pre>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#tables","title":"Tables","text":"<p>Create a file named <code>tables.rst</code> with this content:</p> <pre><code>Tables\n======\n\n.. _product_table:\n\n.. list-table:: Product Table\n   :header-rows: 1\n\n   * - Product ID\n     - Product Name\n   * - 101\n     - Laptop\n   * - 102\n     - Smartphone\n   * - 103\n     - Headphones\n   * - 104\n     - Monitor\n</code></pre> <p>This is used before the table header to create a reference label:</p> <pre><code>.. _product_table:\n</code></pre> <p>We'll see how the label is used for cross-reference later on.</p> <p>This indicates that the first row is a header row of the table:</p> <pre><code>:header-rows: 1\n</code></pre> <p>This indicates a new row:</p> <pre><code>* -\n</code></pre>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#code-examples","title":"Code Examples","text":"<p>Create a file named <code>codeexamples.rst</code> with this content:</p> <pre><code>Code Examples\n=============\n\nCode that uses a simple `for` loop to initialize `i` to 1 and print the values from 1 to 5.\n\n.. code-block:: python\n\n    # Simple for loop\n    for i in range(1, 6):\n        print(i)\n</code></pre> <p>As shown in the example, ensure the code is properly indented under the <code>.. code-block::</code> directive.</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#cross-references","title":"Cross-references","text":"<p>Create a file named <code>crossreferences.rst</code> with this content:</p> <pre><code>Cross-references\n================\n\nWe offer computer-related products of different brands. \n\nFor a list of our products, refer to the :ref:`Product Table &lt;product_table&gt;` page.\n</code></pre> <p>We've created a cross-reference to the tables file using the format:</p> <pre><code>:ref:`Link Text &lt;reference_label&gt;`\n</code></pre>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#notes","title":"Notes","text":"<p>Create a file named <code>notes.rst</code> with this content:</p> <pre><code>Notes\n=====\n\n.. note::\n\n   Text that provides additional information to the reader.\n\n.. warning::\n\n   Text that points the reader to something that's important to consider.\n\n.. seealso::\n\n   For more information about Sphinx, see the `Official Documentation &lt;https://www.sphinx-doc.org&gt;`_.\n</code></pre>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#update-indexrst-file","title":"Update index.rst File","text":"<p>We'll now edit <code>index.rst</code> to add a table of contents. This file represents the home page, so we'll also give an overview of the various content types, such as headings and lists.</p> <p>Here's the updated content for <code>index.rst</code>:</p> <pre><code>.. toctree::\n   :maxdepth: 1\n   :hidden:\n\n   headings\n   lists\n   imagesandlinks\n   tables\n   codeexamples\n   crossreferences\n   notes\n\nWelcome!\n========\n\nThis documentation demonstrates various reStructuredText features.\n\n**Headings**\n\nRefer to the *Headings* topic for examples of how to create different levels of headings.\n\n**Lists**\n\nRefer to the *Lists* topic for examples of bullet points and numbered lists.\n\n**Images and Links**\n\nRefer to the *Images and Links* topic to learn how to add images and links.\n\n**Tables**\n\nRefer to the *Tables* topic to learn how to add tables in your documentation.\n\n**Code Examples**\n\nSee the *Code Examples* topic to learn how to format code examples.\n\n**Cross-references**\n\nRefer to the *Cross-references* topic to learn how to cross-reference in your documentation.\n\n**Notes**\n\nSee the *Notes* topic for examples of note and warning.\n</code></pre> <p>Here's a breakdown of what this file will do:</p> <p>The <code>.. toctree::</code> directive creates a table of contents.</p> <p>The <code>:maxdepth: 1</code> option indicates the maximum depth of the table of contents. In this case, it will only include the first level of headings.</p> <p>The <code>:hidden:</code>option hides the table of contents from the main document. But Sphinx still processes it to generate the navigation pane, allowing users to easily navigate through the documentation.</p> <p>The list beneath (<code>headings</code>, <code>lists</code>, <code>imagesandlinks</code> and so on) represents the names of <code>.rst</code> files. These files are linked as entries in the table of contents.</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#build-the-documentation","title":"Build the Documentation","text":"<p>Generate the HTML files by running the build command:</p> <p><code>sphinx-build -M html source/ build/</code></p> <p></p> <p>After the build runs, it indicates that the html files are in the <code>build\\html</code> directory:</p> <p></p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#review-the-documentation","title":"Review the Documentation","text":"<p>After building your documentation, you can review the generated HTML files to ensure everything is formatted correctly. For each <code>.rst</code> file, a corresponding <code>.html</code> file is generated. The <code>.html</code> files are in the <code>build\\html</code> directory. Open <code>index.html</code> in your web browser to see your documentation.</p> <p>This is what you'll see when you open the <code>index.html</code> file:</p> <p></p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#headings_1","title":"Headings","text":"<p>Click Headings on the navigation pane to view the <code>headings.html</code> page:</p> <p></p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#lists_1","title":"Lists","text":"<p>Click Lists on the navigation pane to view the <code>lists.html</code> page:</p> <p></p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#images-and-links_1","title":"Images and Links","text":"<p>Click Images and Links on the navigation pane to view the <code>imagesandlinks.html</code> page:</p> <p></p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#tables_1","title":"Tables","text":"<p>Click Tables on the navigation pane to view the <code>tables.html</code> page:</p> <p></p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#code-examples_1","title":"Code Examples","text":"<p>Click Code Examples on the navigation pane to view the <code>codeexamples.html</code> page:</p> <p></p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#cross-references_1","title":"Cross-references","text":"<p>Click Cross-references on the navigation pane to view the <code>crossreferences.html</code> page:</p> <p></p> <p>The reader can click the Product Table link to navigate to the product table on the <code>tables.html</code> page.</p>"},{"location":"mytechdocs/doc21/Using_reStructuredText.html#notes_1","title":"Notes","text":"<p>Click Notes on the navigation pane to view the <code>notes.html</code> page:</p> <p></p> <p>Congratulations! You've learned how to set up Sphinx, explored ways to format and structure documents using reStructuredText, and how to build HTML documentation from the source <code>.rst</code> files.</p>"},{"location":"mytechdocs/doc22/Vale_First_Check.html","title":"Vale for Beginners: Creating Your First Style Check","text":"<p>Vale helps you enforce style guide rules in documentation, ensuring consistency and clarity in writing. To install Vale, visit Vale's official website - vale.sh - and follow the setup instructions.</p>"},{"location":"mytechdocs/doc22/Vale_First_Check.html#create-the-vale-configuration-file","title":"Create the Vale Configuration File","text":"<p>Vale looks for a <code>.vale.ini</code> file to know which styles to apply. After installing Vale, you'll need to create this file in your working directory. Add the following basic configuration to the <code>.vale.ini</code> file and save it:</p> <pre><code>StylesPath = styles\n\n[*]\nBasedOnStyles = CustomRules\n</code></pre> <ul> <li><code>StylesPath = styles</code> defines the directory where Vale looks for style rule definitions.</li> <li><code>[*]</code> applies rules to all file types by default. If you want different rules for Markdown or AsciiDoc, you can specify them under <code>[md]</code> or <code>[adoc]</code>.</li> <li><code>BasedOnStyles = CustomRules</code> tells Vale to use the <code>CustomRules</code> style guide, and you'll create a CustomRules directory inside the styles directory to store your custom checks.</li> </ul>"},{"location":"mytechdocs/doc22/Vale_First_Check.html#create-the-styles-directory","title":"Create the Styles Directory","text":"<p>1 Create a styles directory inside your working directory. </p> <p>2 Inside the styles directory, create the CustomRules directory.</p> <p></p>"},{"location":"mytechdocs/doc22/Vale_First_Check.html#create-the-customrules-file","title":"Create the CustomRules File","text":"<p>Now that you've set up the CustomRules directory, it's time to define a custom style rule.</p> <p>Create a new file named <code>CustomRules.yml</code> in the CustomRules directory.</p> <p>To ensure documentation focuses on what the user needs to do, rather than how they interact with the UI, let's define YML rules to flag UI elements. Add the following rules to the <code>CustomRules.yml</code> file:</p> <pre><code>extends: existence\nmessage: \"Avoid referring to UI elements directly.\"\nlevel: warning\nnonword: true\ntokens:\n  - \"checkbox\"\n  - \"check box\"\n  - \"radio button\"\n  - \"button\"\n</code></pre>"},{"location":"mytechdocs/doc22/Vale_First_Check.html#test-vale-against-a-sample-file","title":"Test Vale Against a Sample File","text":"<p>1 Create a sample file (for example, <code>sample.txt</code>) in the working directory.</p> <p>2 Add some sentences with UI elements to the sample file: </p> <pre><code>Click the button to submit.\nSelect the checkbox to enable dark mode.\n</code></pre> <p>3 Run Vale to check the file:</p> <p><code>vale sample.txt</code></p> <p>When you run the command, Vale will alert you that two sentences contain UI-related terms:</p> <p></p>"},{"location":"mytechdocs/doc22/Vale_First_Check.html#fix-sentences-flagged-by-vale","title":"Fix Sentences Flagged by Vale","text":"<p>The writer can revise sentences as follows to ensure UI elements are not explicitly mentioned:  </p> Original Sentence (Flagged by Vale) Revised Sentence Click the button to submit. Submit the form. Select the checkbox to enable dark mode. Enable dark mode in settings. <p>Congratulations! You've successfully set up your first YML rule for Vale. Taking advantage of Vale is a great way to improve documentation quality and ensure consistency.</p>"},{"location":"mytechdocs/doc23/Vale_Predefined_Style.html","title":"Configuring Vale: Using a Standard Style Guide and Extending It","text":"<p>This document explains how to configure Vale with the Microsoft Style Guide. Then, we'll enhance the style guide by defining a couple of custom rules.</p> <p>\ud83d\udca1 Note: The document uses a community-maintained Vale package based on the Microsoft Writing Style Guide: https://github.com/errata-ai/Microsoft. The package is not officially supported or published by Microsoft.</p>"},{"location":"mytechdocs/doc23/Vale_Predefined_Style.html#configure-vale-to-use-the-microsoft-style-guide","title":"Configure Vale to Use the Microsoft Style Guide","text":"<p>1 In your project directory, create a <code>.vale.ini</code> file with the following content:</p> <pre><code>StylesPath = styles\nMinAlertLevel = suggestion\n\nPackages = Microsoft\n\n[*.md]\nBasedOnStyles = Microsoft\n</code></pre> <ul> <li><code>StylesPath = styles</code> defines the directory where Vale looks for style rule definitions.</li> <li><code>MinAlertLevel = suggestion</code> configures Vale to display all alerts, including suggestions, warnings, and errors.</li> <li><code>Packages = Microsoft</code> directs Vale to include the Microsoft package.</li> <li><code>[*.md]</code> ensures that Vale applies style rules only to Markdown <code>(.md)</code> files.</li> <li><code>BasedOnStyles = Microsoft</code> instructs Vale to base its checking on the Microsoft style guidelines.</li> </ul> <p>2 Create a styles directory in the project directory.</p> <p>3 Download the Microsoft Style Guide rules. Run the following command in your project directory: <code>vale sync</code></p> <p></p> <p>This automatically downloads all the YML files into the styles/Microsoft directory. The Microsoft directory will contain the style rules as YML files, and it will look like this:</p> <p></p> <p>4 Let's test our setup.</p> <p>Create a Markdown file (for example, <code>sample.md</code>) in the working directory and add the following content:</p> <pre><code>Each user should enter his credentials to log into the application.\n\nThe salesman will assist you with purchasing enterprise solutions.\n\nReports are generated based on user data.\n\nIf the connection is not stable, data transfer will not complete.\n\nThe backend manages request routing and authentication.\n\nThe application utilizes cloud storage to securely save files.\n</code></pre> <p>Run Vale on the document: <code>vale sample.md</code></p> <p>When you run the command, Vale will flag sentences based on the Microsoft style guide and display alerts:</p> <p></p>"},{"location":"mytechdocs/doc23/Vale_Predefined_Style.html#sentence-revisions","title":"Sentence Revisions","text":"<p>Based on feedback from Vale using the Microsoft Style Guide, the writer can revise the sentences as shown in this table:  </p> Original Sentence Notes Revised Sentence The salesman will assist you with purchasing enterprise solutions. \"Salesman\" is gender-specific. Use an inclusive term. The salesperson will assist you with purchasing enterprise solutions. Reports are generated based on user data. Passive voice detected. Active voice is clearer. The application generates reports based on user data. If the connection is not stable, data transfer will not complete. Contractions improve readability in conversational writing. If the connection isn't stable, data transfer won't complete. The backend manages request routing and authentication. \"Backend\" is vague; use a more precise term. The API gateway manages request routing and authentication."},{"location":"mytechdocs/doc23/Vale_Predefined_Style.html#create-our-own-style-rules-in-vale","title":"Create Our Own Style Rules in Vale","text":"<p>Two sentences in the Markdown file still seem incorrect:</p> <ul> <li>Each user should enter his credentials to log into the application.</li> <li>The application utilizes cloud storage to securely save files.</li> </ul> <p>Vale isn't flagging \"his\" (a gender-specific term) and \"utilize\" (prefer \"use\" for simplicity). This section will cover how to define custom rules to address these issues.</p> <p>First, we need to understand how to choose between substitution and existence in Vale rules. Vale offers two key rule types for enforcing writing guidelines:</p> <ul> <li>Substitution: Used when there is a specific replacement for a term.</li> <li>Existence: Used when a term should be flagged without enforcing a direct replacement.</li> </ul> <p>Since \"his\" can be revised based on context, the writer has multiple ways to make the sentence more inclusive. Here are a couple of possible rewrites:</p> <ul> <li>Users should enter their credentials to log into the application.</li> <li>Each user should enter their credentials to log into the application. </li> </ul> <p>We will use existence here because we want to flag the word \"his\" or \"her\" as discouraged, without suggesting a specific replacement.</p> <p>The term \"utilize\" is a strong case for substitution, because \"use\" is always a clearer, simpler alternative.</p> <p>1 Create a Custom directory in the styles directory.</p> <p>2 In the Custom directory, create a new file named <code>bias-check.yml</code> to define an existence rule for gendered terms. Add the following settings to the file:</p> <pre><code>extends: existence\nmessage: \"Consider using a gender-neutral alternative instead of '%s'.\"\nlevel: error\ntokens:\n  - his\n  - her\n</code></pre> <p>3 In the Custom directory, create another new file named <code>word-fixes.yml</code> to define a substitution rule enforcing the replacement of \"utilize\" with \"use\". Add the following settings to the file:</p> <pre><code>extends: substitution\nmessage: \"Prefer '%s' over '%s'.\"\nlevel: error\nswap:\n  \"utilize\": use\n  \"utilizes\": uses\n  \"utilized\": used\n  \"utilizing\": using\n</code></pre> <p>4 Ensure both rules are enabled in <code>vale.ini</code> by adding the Custom directory to the configuration:</p> <pre><code>StylesPath = styles\nMinAlertLevel = suggestion\n\nPackages = Microsoft\n\n[*.md]\nBasedOnStyles = Microsoft, Custom\n</code></pre> <p>In summary, this configuration tells Vale to look for styles in the styles folder, report all alert levels including suggestions, use the Microsoft style package, and apply the Microsoft and Custom styles to the Markdown files in the project.</p> <p>5 Run Vale on the document: <code>vale sample.md</code> </p> <p>It should display alerts from both the Microsoft style guide and the customized styles we set up.</p> <p></p> <p>Nicely done! You've successfully configured the Microsoft Style Guide and created your own custom rules. Your documents are now set to stay clear, consistent, and professional, adapted to your needs.</p>"},{"location":"mytechdocs/doc24/Vale_Spell_Check.html","title":"Enhancing Spell Checks with Accept and Reject Lists","text":"<p>The default Vale setup already includes a basic spell-checking dictionary, so you can use it to catch spelling errors. Additionally, you can customize this spell check with accept and reject lists for more refined control.</p>"},{"location":"mytechdocs/doc24/Vale_Spell_Check.html#configure-vale-for-the-basic-spell-check","title":"Configure Vale for the Basic Spell Check","text":"<p>To use Vale's built-in spelling rules, create a <code>.vale.ini</code> file in your project folder with the following content</p> <pre><code>MinAlertLevel = suggestion\n\n[*.md]\nBasedOnStyles = Vale\n</code></pre> <p>This enables spell checking for all <code>.md</code> files using Vale\u2019s built-in dictionary.</p>"},{"location":"mytechdocs/doc24/Vale_Spell_Check.html#create-the-markdown-document-and-spell-check","title":"Create the Markdown Document and Spell Check","text":"<p>1 We'll create a document with intentional spelling mistakes:  </p> <pre><code>Java Script is a programming languge.\n\nOur softwre provides costome analytic solutions.\n\nWith our platform, you can build your own analytic solutions specific to your business needs.\n\nWe use HTTPs protocol for secure communication.\n\nWe used React to develop the frontend of Superapplicationexample.\n</code></pre> <p>2 Run the sample.md file using Vale:  <code>vale sample.md</code></p> <p>The detected spelling mistakes are displayed:</p> <p></p> <p>However, notice that \"Java Script,\" \"analytic solutions,\" and \"HTTPs\" aren't flagged, even though they should be corrected to \"JavaScript,\" \"analytics solutions,\" and \"HTTPS.\" To ensure these terms are properly flagged, we'll create a reject list.</p> <p>Additionally, \"Superapplicationexample\" is a product name and shouldn't be considered as an error. We'll create an accept list to allow this term.</p>"},{"location":"mytechdocs/doc24/Vale_Spell_Check.html#create-the-accept-and-reject-lists","title":"Create the Accept and Reject Lists","text":"<p>Inside your project directory, create the directory structure: <code>styles\\config\\vocabularies\\myterms</code></p> <p>Add \"Java Script,\" \"analytic solutions,\" and \"HTTPs\" to the reject list so they are marked as incorrect. Create a <code>reject.txt</code> file in the <code>myterms</code>directory and add these terms:</p> <pre><code>Java Script\nanalytic solutions\nHTTPs\n</code></pre> <p>Add \"Superapplicationexample\" to the accept list to ensure it's recognized as valid. Create an <code>accept.txt</code> file in the <code>myterms</code> directory and add this term:</p> <pre><code>Superapplicationexample\n</code></pre> <p>This approach refines Vale's spell-checking by explicitly defining acceptable and unacceptable terms.</p>"},{"location":"mytechdocs/doc24/Vale_Spell_Check.html#update-the-ini-file","title":"Update the .ini File","text":"<p>Update the <code>.vale.ini</code> file to include the <code>styles</code> folder and the custom vocabulary folder:</p> <pre><code>StylesPath = styles\nVocab = myterms\nMinAlertLevel = suggestion\n\n[*.md]\nBasedOnStyles = Vale\n</code></pre> <p><code>Vocab = myterms</code> matches the folder name you created for your vocabulary. You can name your custom vocabulary folder anything you like; in this case it's <code>myterms</code>.</p>"},{"location":"mytechdocs/doc24/Vale_Spell_Check.html#run-vale","title":"Run Vale","text":"<p>Again, run Vale against your sample document:  <code>vale sample.md</code></p> <p>You should see:</p> <ul> <li>Accepted term (Superapplicationexample) will NOT be flagged.</li> <li>Rejected terms (Java Script, analytic solutions, HTTPs) will be flagged as errors.</li> </ul> <p></p>"},{"location":"mytechdocs/doc24/Vale_Spell_Check.html#fix-sentences-flagged-by-vale","title":"Fix Sentences Flagged by Vale","text":"<p>The writer can revise sentences as follows:  </p> Original Sentence (Flagged by Vale) Revised Sentence Java Script is a programming languge. JavaScript is a programming language. Our softwre provides costome analytic solutions. Our software provides custom analytics solutions. With our platform, you can build your own analytic solutions specific to your business needs. With our platform, you can build your own analytics solutions specific to your business needs. We use HTTPs protocol for secure communication. We use HTTPS protocol for secure communication. We used React to develop the frontend of Superapplicationexample. No changes needed <p>Well done! You've learned how to use Vale's default spell checker and customize accepted and rejected words, allowing you to fine-tune writing standards.</p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html","title":"Defining a REST API and Previewing the Doc in Swagger","text":"<p>Swagger is a tool that helps developers design and document REST APIs. It follows the OpenAPI Specification, which acts like a plan for how an API should work.</p> <p>This document covers how to use Swagger Editor to define a basic medical appointments API in YAML format and preview the API documentation. By defining the API specification first in Swagger, we are following a design-first approach, ensuring we design the API in YAML before writing any code. Note that API specifications can also be written in JSON, but here, we'll use YAML.</p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#define-the-rest-api","title":"Define the REST API","text":"<p>Open Swagger Editor at https://editor.swagger.io and add the API definition in YAML format. We'll go through it step by step, making each section easy to follow:</p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#openapi-version-and-general-info","title":"OpenAPI Version and General Info","text":"<pre><code>openapi: 3.0.0\ninfo:\n  title: Medical Appointment Booking API\n  version: \"1.0.0\"\n  description: API for scheduling medical appointments.\n  contact:\n    name: Dinesh Nair\n    email: dineshn@example.com\n</code></pre> <p>This section defines the basic metadata about the API, such as its title, version, and purpose. The contact field provides the API owner's details.</p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#servers-configuration","title":"Servers Configuration","text":"<pre><code>servers:\n  - url: http://localhost:5000\n</code></pre> <p>The servers section lists where the API can be accessed. Here, it's set up for local development.</p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#paths-for-managing-appointments","title":"Paths for Managing Appointments","text":"<pre><code>paths:\n  /appointments:\n    get:\n      tags:\n        - Appointments\n      summary: Get all appointments\n      responses:\n        '200':\n          description: A list of booked appointments\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AppointmentBooking'\n              example:\n                - patient_id: \"P1256\"\n                  appointment_date: \"15 May 2025, 13:00 hours\"\n                  doctor_specialty: \"cardiology\"\n                  urgency_level: \"urgent\"\n                - patient_id: \"P347\"\n                  appointment_date: \"16 May 2025, 10:00 hours\"\n                  doctor_specialty: \"neurology\"\n                  urgency_level: \"routine\"\n    post:\n      tags:\n        - Appointments\n      summary: Schedule a new appointment\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/AppointmentBooking'\n            example:\n              patient_id: \"P1256\"\n              appointment_date: \"17 May 2025, 14:00 hours\"\n              doctor_specialty: \"dermatology\"\n              urgency_level: \"emergency\"\n      responses:\n        '201':\n          description: Appointment successfully scheduled\n          content:\n            application/json:\n              example:\n                message: \"Appointment successfully booked\"\n  /appointments/{patientId}:\n    get:\n      tags:\n        - Appointments\n      summary: Get all appointments for a specific patient\n      parameters:\n        - in: path\n          name: patientId\n          schema:\n            type: string\n          required: true\n          description: \"Unique identifier for the patient, starting with 'P' followed by a unique number.\"\n          example: \"P1256\"\n      responses:\n        '200':\n          description: List of appointments for the given patient\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/AppointmentBooking'\n              example:\n                - patient_id: \"P1256\"\n                  appointment_date: \"18 May 2025, 11:00 hours\"\n                  doctor_specialty: \"orthopedics\"\n                  urgency_level: \"urgent\"\n        '404':\n          description: Patient not found or no appointments available\n          content:\n            application/json:\n              example:\n                message: \"No appointments found for patient ID P1256\"\n</code></pre> <ul> <li> <p>Clients interact with the API by making requests to specific paths, using HTTP methods such as <code>GET</code> to retrieve data or <code>POST</code> to create data.</p> <ul> <li><code>GET /appointments</code> returns a list of booked appointments, each with details like patient ID, date, doctor specialty, and urgency level.</li> <li><code>POST /appointments</code> lets clients schedule an appointment by submitting details like patient ID, date, doctor specialty, and urgency level. On success, it returns a confirmation message.</li> <li><code>GET /appointments/{patientId}</code> retrieves appointment details for a specific patient ID. If appointments exist, it returns the details; otherwise, a 404 error indicates no appointments were found.</li> </ul> </li> <li> <p>In OpenAPI, <code>$ref</code> is used to reference reusable components, helping avoid duplication and keeping the API definition organized. In our API, <code>$ref: '#/components/schemas/AppointmentBooking'</code> means that instead of defining the full schema inline, OpenAPI points to the reusable AppointmentBooking schema under <code>components/schemas</code>.</p> </li> <li> <p>Earlier, we defined <code>http://localhost:5000</code> as the server URL. Clients can access API endpoints by appending the relevant path. For example, <code>/appointments</code> would form <code>http://localhost:5000/appointments</code>, where a <code>GET</code> request retrieves all appointments, and a <code>POST</code> request creates a new appointment.</p> </li> <li> <p>We added tags to each path. Assigning the same tag (Appointments) groups these paths in the Swagger-generated documentation, improving navigation. Without tags, the documentation groups them under a default section.</p> </li> </ul>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#data-schema-for-appointments","title":"Data Schema for Appointments","text":"<pre><code>components:\n  schemas:\n    AppointmentBooking:\n      type: object\n      properties:\n        patient_id:\n          type: string\n          description: \"Unique identifier for the patient, starting with 'P' followed by a unique number.\"\n          example: \"P1256\"\n        appointment_date:\n          type: string\n          description: \"Date and time of the appointment. Expected format: 'DD Month YYYY, HH:mm hours'. The date must be at least 24 hours in the future.\"\n          example: \"15 May 2025, 13:00 hours\"\n        doctor_specialty:\n          type: string\n          enum: [\"cardiology\", \"neurology\", \"orthopedics\", \"dermatology\", \"pediatrics\"]\n          description: \"Specialty of the doctor the patient is booking with. Must be one of ['cardiology', 'neurology', 'orthopedics', 'dermatology', 'pediatrics'].\"\n          example: \"cardiology\"\n        urgency_level:\n          type: string\n          enum: [\"routine\", \"urgent\", \"emergency\"]\n          description: \"Level of urgency for the appointment. 'Routine' is for standard check-ups, 'Urgent' requires attention within 48 hours, and 'Emergency' is prioritized immediately.\"\n          example: \"urgent\"\n      required:\n        - patient_id\n        - appointment_date\n        - doctor_specialty\n        - urgency_level\n</code></pre> <ul> <li> <p>In OpenAPI, schemas define the structure of data in API requests and responses. The <code>AppointmentBooking</code> schema represents an appointment request, specifying required fields (patient_id, appointment_date, doctor_specialty, and urgency_level).</p> </li> <li> <p>In the YAML, properties define the individual fields within an object. Each property has attributes such as type (for example, string, integer), description, and example (providing a sample value). These details ensure clear documentation in Swagger-generated references.</p> </li> <li> <p>The <code>enum</code> keyword in OpenAPI allows you to specify a fixed set of valid values that a field can accept. For example, in the urgency_level field, only \"routine\", \"urgent\", or \"emergency\" will be valid values in requests.</p> </li> <li> <p>By using <code>$ref</code>, we can reuse this schema across POST request bodies and GET responses, promoting consistency and reducing redundancy.</p> </li> </ul>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#validation-of-api-design","title":"Validation of API Design","text":"<p>Swagger Editor will highlight any errors, ensuring the API design is complete and correctly structured. This makes it easy to spot and correct issues. For example, if we remove the responses section from the GET operation on the <code>/appointments</code> path, Swagger Editor will show an error message because every operation must define at least one response.</p> <p></p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#preview-the-documentation","title":"Preview the Documentation","text":"<p>The right pane of Swagger Editor provides a preview of how the API documentation will look, automatically generated from the OpenAPI specification. The following sections provide a detailed breakdown of the documentation.</p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#api-metadata-and-server-url","title":"API Metadata and Server URL","text":"<p>The documentation displays key metadata about the API, including its title, version, and description, which help users understand its purpose. The contact field provides details about the API owner, allowing developers to reach out for support or inquiries. Additionally, the server URL defines the base URL where API requests are sent. In this case, the API will be hosted locally, which is useful for testing and development before deploying to a live environment.</p> <p></p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#grouped-operations-paths-and-http-methods","title":"Grouped Operations, Paths, and HTTP Methods","text":"<p>With the addition of tags, all appointment-related API operations are neatly grouped under the Appointments section.</p> <p>Each path (like <code>/appointments</code>, <code>/appointments/{patientId}</code>) is shown along with its operations (for example, GET and POST).</p> <p></p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#operation-details","title":"Operation Details","text":"<p>Each operation (for example, <code>GET /appointments/{patientId}</code>) displays its summary. Clicking on it expands further details, including:</p> <ul> <li> <p>Parameters: Required or optional inputs, such as <code>patientId</code>.</p> </li> <li> <p>Try it out Button: Allows you to send requests directly from Swagger-generated documentation, but it will only work if the API is implemented and hosted at the defined server URL. For example, you can use Flask RestX or FastAPI to implement the API.</p> </li> <li> <p>Responses: Displays possible status codes (for example, 200 OK, 404 Not Found), including example responses.</p> </li> </ul> <p></p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#example-request-and-response","title":"Example Request and Response","text":"<p>Expanding Get all appointments shows an example of a successful 200 response with sample data.</p> <p></p> <p>Expanding Schedule a new appointment displays a request body example, illustrating how to send data when booking an appointment.</p> <p></p>"},{"location":"mytechdocs/doc25/Swagger_Generated_Doc.html#schema","title":"Schema","text":"<p>The Swagger-generated documentation displays field descriptions when viewing a schema definition. For example, in the <code>AppointmentBooking</code> schema, the <code>patient_id</code> field is described as Unique identifier for the patient, starting with \"P\" followed by a unique number. This information helps API consumers understand the expected format and constraints of the data they interact with.</p> <p></p> <p>That brings us to the end! We have defined an example API in Swagger Editor and examined how Swagger documentation presents the API structure in a clear and structured way, enabling developers to easily understand and use it.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html","title":"Lists, Dictionaries, Tuples, and Sets in Python","text":"<p>In this document, we'll explore fundamental data structures in Python: lists, dictionaries, tuples, and sets. </p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#lists","title":"Lists","text":"<p>A list can store multiples values. It's written with square brackets [ ].</p> <p>Lists are ordered, changeable, and can contain duplicate items.</p> <p>Here's a list:</p> <pre><code>a_list = [\"Jason\", True, \"Vishal\", \"Vishal\", 211]\nprint (a_list)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-list-item","title":"Access List Item","text":"<p>List items are ordered and accessed through their index number. Index number starts from 0.</p> <p>The following code is printing the second item in the list. Each item can be accessed through the index number.</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\nprint (departments[1])\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#change-list-item","title":"Change List Item","text":"<p>This code is changing the second item to Legal:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments[1] = \"Legal\"\nprint (departments)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-or-remove-list-item","title":"Add or Remove List Item","text":"<p>This code is using the append method to add an item to the list:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments.append(\"Procurement\")\nprint (departments)\n</code></pre> <p>Output:</p> <p></p> <p>To remove an item from the list, you can use the remove method. For example: <code>colors.remove(\u201cgreen\u201d)</code>.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#sort-list-items","title":"Sort List Items","text":"<p>This code is sorting the list in ascending alphabetical order:</p> <pre><code>departments = [\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\"]\ndepartments.sort()\nprint (departments)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#dictionaries","title":"Dictionaries","text":"<p>A dictionary stores items in key: value format. Keys must be unique, although values can be duplicates. Dictionary items are ordered and changeable.</p> <p>Dictionary is written with curly brackets { }.</p> <p>Here's a dictionary:</p> <pre><code>a_dict = {\n    \"integer\": 112,\n    \"boolean\": True,\n    \"string\": \"Jane\",\n    \"duplicate_int\": 112,\n}\nprint(a_dict)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#get-a-dictionary-value","title":"Get a Dictionary Value","text":"<p>This code prints the value for the key Fred:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nprint(teacher_subject [\"Fred\"])\n</code></pre> <p>Output:</p> <p></p> <p>Alternatively, you can use the get method to get the value:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nprint(teacher_subject.get(\"Fred\"))\n</code></pre>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#change-a-dictionary-value","title":"Change a Dictionary Value","text":"<p>This code changes the value for the key Jaya:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Fred\": \"Physics\",\n    \"John\": \"Astronomy\",\n}\nteacher_subject [\"Jaya\"] = \"Immunology\"\nprint(teacher_subject)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-a-dictionary-item","title":"Add a Dictionary Item","text":"<p>This can be done by adding a new key and its value:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n}\nteacher_subject [\"Sujith\"] = \"Biochemistry\"\nprint(teacher_subject)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#remove-a-dictionary-item","title":"Remove a Dictionary Item","text":"<p>This can be done by using the pop method:</p> <pre><code>teacher_subject = {\n    \"Jaya\": \"Cellular biology\",\n    \"Shriya\": \"Chemistry\",\n    \"Jane\": \"Genetics\",\n    \"Sujith\": \"Biochemistry\",\n}\nprint(teacher_subject) #print before removal\nteacher_subject.pop(\"Sujith\")\nprint(teacher_subject) #print after removal\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#tuples","title":"Tuples","text":"<p>A tuple, like a list variable, can store multiple items. In a list, you can add, remove, and modify items. In contrast, once a tuple is created, you cannot change items in the tuple or add or remove items.</p> <p>Tuples are generally faster than list because of their read-only nature.</p> <p>Tuple is written with parenthesis ( ) and can contain duplicates.</p> <p>Here's a tuple:</p> <pre><code>a_tuple = (211, \"Anita\", True, 3.14, 211) \nprint(a_tuple)\n</code></pre> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-a-tuple-item","title":"Access a Tuple Item","text":"<p>Tuple items are ordered, and you can access them using an index number.</p> <p>This code will print the fourth item in the tuple:</p> <pre><code>departments = (\"Finance\", \"Administration\", \"IT\", \"Marketing\", \"Engineering\")\nprint (departments[3])\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#access-a-range-of-tuple-items","title":"Access a Range of Tuple Items","text":"<p>You can access a range of tuple items by using a colon.</p> <p>This code selects the items from 1 to 3 index numbers:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[1:4])\n</code></pre> <p>\ud83d\udca1 Tip: Note that with <code>[1:4]</code>, the selection starts at the start index and goes up to but doesn't include the end index. That means it includes indices 1, 2, and 3 but doesn't include 4.</p> <p>Output:</p> <p></p> <p>This code selects items from Marketing to the end:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[3:])\n</code></pre> <p>Output:</p> <p></p> <p>This code selects items from the beginning to IT:</p> <pre><code>departments = (\"Finance\", \"Admin\", \"IT\", \"Marketing\", \"Engineering\", \"Legal\")\nprint (departments[:3])\n</code></pre> <p>\ud83d\udca1 Tip: It includes start index (which is 0) but doesn't include end index (which is 3).</p> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#sets","title":"Sets","text":"<p>A set can also have multiple items, but they cannot be duplicates. You cannot change the set items but can add or remove items.</p> <p>A set is written with curly brackets { }.</p> <p>Here's a set:</p> <pre><code>a_set = {\"Jane\", 311, 7.14, True}\nprint(a_set)\n</code></pre> <p>When I run the code, I get this output:</p> <p></p> <p>Sets are unordered. So, again when I run the code, the order of items changes.</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#add-or-remove-a-set-item","title":"Add or Remove a Set Item","text":"<p>This code adds an item using the add method:</p> <pre><code>departments = {\"Finance\", \"Engineering\", \"IT\", \"Marketing\"}\ndepartments.add(\"Quality Control\")\nprint (departments)\n</code></pre> <p>Output:</p> <p></p> <p>To remove an item from a set, you can use the remove method. For example: <code>colors.remove(\u201cgreen\u201d)</code>.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#join-sets","title":"Join Sets","text":"<p>Use the | operator to join sets:</p> <pre><code>departments_set1 = {\"Finance\", \"Engineering\"}\ndepartments_set2 = {\"Marketing\", \"Legal\"}\ndepartments_set3 = {\"Procurement\", \"Logistics\"}\ncombined_set = departments_set1 | departments_set2 | departments_set3\nprint (combined_set)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#difference","title":"Difference","text":"<p>You can use the difference method to return only those items in the first set that aren't there in the other set.</p> <p>In this code, the difference method will return Legal and IT that aren't there in the other set:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\nset3 = departments_set1.difference(departments_set2)\nprint (set3)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#difference-update","title":"Difference Update","text":"<p>You can use difference_update method to retain only those items in the first set that aren't there in the other set.</p> <p>In this code, the difference_update method updates first set with Legal and IT:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\ndepartments_set1.difference_update(departments_set2)\nprint (departments_set1)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#symmetric-difference","title":"Symmetric Difference","text":"<p>You can use symmetric_difference method to return items that are in one of the sets but not in both:</p> <pre><code>departments_set1 = {\"Finance\", \"Marketing\", \"Legal\", \"IT\"}\ndepartments_set2 = {\"Finance\", \"Logistics\", \"Marketing\"}\nset3 = departments_set1.symmetric_difference(departments_set2)\nprint (set3)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#convert-one-data-structure-into-another","title":"Convert One Data Structure into Another","text":"<p>There could be use cases where you want to convert one data structure into another. Let's cover few such cases.</p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#list-to-a-tuple","title":"List to a Tuple","text":"<p>For example, to make the data unchangeable, you might want to convert a list to a tuple:</p> <pre><code>a_list = [\"Astronomy\", 211, 71.1, \"History\"]\nprint (a_list)\na_tuple = tuple(a_list)\nprint (a_tuple)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#list-to-a-set","title":"List to a Set","text":"<p>For example, to remove duplicates, you might want to convert a list to a set:</p> <pre><code>a_list = [\"Astronomy\", 211, 71.1, \"History\", \"History\", 211]\nprint (a_list)\na_set = set(a_list)\nprint (a_set)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#dictionary-to-a-tuple","title":"Dictionary to a Tuple","text":"<p>For example, to have the key: value items become unchangeable, you might want to convert a dictionary to a tuple:</p> <pre><code>a_dict = {\"Astronomy\": 1, \"History\": 2}\nprint (a_dict)\na_tuple = tuple(a_dict.items())\nprint (a_tuple)\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc3/Python_Data_Structures.html#tuple-to-a-list","title":"Tuple to a List","text":"<p>For example, to add an item, you might want to convert a tuple to a list:</p> <pre><code>a_tuple = (\"Astronomy\", \"History\", 211, 312)\nprint (a_tuple)\na_list = list(a_tuple)\na_list.append(\"Philosophy\")\nprint (a_list)\n</code></pre> <p>Output:</p> <p></p> <p>In this document, we've looked at the data structures in Python: lists, dictionaries, tuples, and sets. Each of these data structures has unique features. Lists provide ordered, changeable data; dictionaries provide key-value pair storage; tuples provide unchangeable data; and sets provide unique, unordered data.</p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html","title":"Classes and Objects in Python","text":"<p>This document will help you understand Python classes, objects, inheritance, and polymorphism.</p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#create-a-class-and-its-object","title":"Create a Class and its Object","text":"<p>A class defines a set of attributes and methods that its objects can use. A class is like a blueprint for creating objects.</p> <p>The following code:</p> <ul> <li> <p>Creates a class named <code>Customer</code> with customer attributes: name, age, and email address.</p> </li> <li> <p>Creates an instance of the <code>Customer</code> class named <code>customer1</code>; it means <code>customer1</code> is the object of the <code>Customer</code> class.</p> </li> <li> <p>Prints the attributes of the <code>customer1</code> object.</p> </li> </ul> <pre><code>class Customer:\n    # Initializer / Instance attributes\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n# Create an object customer1\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\n# Print values of the customer1 object's attributes\nprint(customer1.name)\nprint(customer1.age)\nprint(customer1.email)\n</code></pre> <p>The code uses the <code>init</code> method to assign values to attributes when the object is being created. The first parameter is <code>instance</code> that represents the instance of the class and allows you to access the class's attributes and methods. You can name this parameter anything like myobject.</p> <p>Run the code and you'll see this output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#string-representation-of-the-object","title":"String Representation of the Object","text":"<p>In this code, we use the <code>str</code> method to give a string representation of the object:</p> <pre><code>class Customer:\n    # Initializer / Instance Attributes\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    def __str__(instance): \n        return f\"{ instance.name}, {instance.age}, { instance.email}\"\n# Create an object customer1\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\n# Print the customer1 object\nprint(customer1)\n</code></pre> <p>When <code>print(customer1)</code> is called, the <code>str</code> method is invoked.</p> <p>Run the code to see this output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#add-a-method-to-the-class-to-handle-specific-functionality","title":"Add a Method to the Class to Handle Specific Functionality","text":"<p>Let's have a method in the class that checks whether the customer is an adult. In the following example, the <code>is_adult</code> method checks whether the customer is 18 years or older and then prints a message indicating that the customer is adult.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    # Method to check if the customer is an adult\n    def is_adult(instance): \n        if instance.age &gt;= 18: \n            print(instance.name + \" is an adult.\") \n        else: \n            print(instance.name + \" is not an adult.\")\ncustomer1  = Customer(\"James\", 19, \"james@example.com\")\ncustomer2  = Customer(\"Anita\", 17, \"anitha@example.com\")\n# Check if the customers are adults\ncustomer1.is_adult()\ncustomer2.is_adult()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#del-keyword","title":"Del Keyword","text":"<p>To delete the attributes of objects or the object itself, use the <code>del</code> keyword.</p> <p>In this example, we delete the <code>customer1</code> age and then delete the <code>customer2</code> object. We use the <code>try\u2026 except\u2026</code> blocks to catch exceptions that occur when the attribute or object isn't found after deletion and print an error message.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    def __str__(instance): \n        return f\"{ instance.name}, {instance.age}, { instance.email}\"\ncustomer1  = Customer(\"James\", 21, \"james@example.com\")\ncustomer2  = Customer(\"Shreya\", 26, \"shreya@example.com\")\n\n# Print both objects once before deletion.\nprint(customer1)\nprint(customer2)\n\n# Delete the age attribute of customer1 object.\ndel customer1.age\n\n# Try to print customer1 age. This will raise an AttributeError exception.\ntry: \n    print(customer1.age) \nexcept AttributeError: \n    print(\"The 'age' attribute of customer1 has been deleted.\")\n\n# Delete the customer2 object.\ndel customer2\n\n# Try to print customer2. This will raise a NameError exception.\ntry: \n    print(customer2) \nexcept NameError: \n    print(\"The customer2 object has been deleted.\")\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#inheritance","title":"Inheritance","text":"<p>With inheritance, a child class can inherit the method and attributes of the parent class.</p> <p>As shown in the following code, when you create the <code>NewCustomer</code> class as a child of the <code>Customer</code> class, it will inherit all the attributes and methods from the <code>Customer</code> class, including the <code>is_adult</code> method and the attributes name, age, and email. When you create an instance of <code>NewCustomer</code>, you can call the <code>isAdult</code> method to check if the customer is an adult. The code also uses the <code>pass</code> keyword to indicate that the child class isn\u2019t adding any method or attributes to itself.</p> <pre><code>class Customer:\n    def __init__(instance, name, age, email):\n        instance.name = name\n        instance.age = age\n        instance.email = email\n    # Method to check if the customer is an adult\n    def is_adult(instance): \n        if instance.age &gt;= 18: \n            print(instance.name + \" is an adult.\") \n        else: \n            print(instance.name + \" is not an adult.\")\n# Child class\nclass NewCustomer(Customer):\n    pass\nnew_customer1 = NewCustomer(\"Tim\", 16, \"tim@example.com\")\nnew_customer2 = NewCustomer(\"Priya\", 20, \"priya@example.com\")\n# Check if the new customers are adults\nnew_customer1.is_adult()\nnew_customer2.is_adult()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#method-overriding-and-polymorphism","title":"Method Overriding and Polymorphism","text":"<p>When the child class wants a specific implementation of an inherited method, it can override the method.</p> <p>In the following code, <code>greet_customer</code> method is overridden in the <code>NewCustomer</code> class to provide a different greeting message. Objects of both classes call this method to display a different message depending on whether the customer is an existing one or a new one. It also shows polymorphism where the same method name has different forms of implementation.</p> <pre><code>class Customer:\n    def __init__(instance, name):\n        instance.name = name\n    # Method to greet customer\n    def greet_customer(instance): \n        print(\"Hello \" + instance.name + \". It's great to see you again!\")\n\n# Child class\nclass NewCustomer(Customer):\n    # Overriding the greet_customer method from the Customer class\n    def greet_customer(instance): \n        print(\"Hello \" + instance.name + \". Welcome to our platform!\")\n\ncustomer1  = Customer(\"James\")\nnew_customer1 = NewCustomer(\"Priya\")\n\n# Calling the method from the Customer class\ncustomer1.greet_customer()\n# Calling the overridden method from the NewCustomer class\nnew_customer1.greet_customer()\n</code></pre> <p>Output:</p> <p></p>"},{"location":"mytechdocs/doc4/Classes_and_Objects.html#super-function","title":"Super Function","text":"<p>We can use the <code>super</code> function to invoke methods in the parent class.</p> <p>In the following example, <code>super</code> is used for calling <code>init</code> method of the parent class to set the customer's name. Then, <code>super</code> is again used for calling the <code>get_greeting</code> method of parent class to greet the customer. The child class also adds its own message to the overridden method.</p> <pre><code># Parent class\nclass Customer:\n    def __init__(instance, name):\n        instance.name = name\n\n    def get_greeting(instance):\n        print(\"Hello, \" + instance.name + \"!\")\n\n# Child class inheriting from Customer\nclass NewCustomer(Customer):\n    def __init__(instance, name, customer_id):\n        super().__init__(name)  # Call the __init__ method of the parent class\n        instance.customer_id = customer_id  # Additional attribute for NewCustomer\n\n    def get_greeting(instance):\n        super().get_greeting() # Call the parent class's greeting method\n        print(\"Your Customer ID is: \" + str(instance.customer_id))\n\ncustomer = Customer(\"Alice\")\nnew_customer = NewCustomer(\"Diya\", 12345)\ncustomer.get_greeting()    \nnew_customer.get_greeting()\n</code></pre> <p>Output:</p> <p></p> <p>This document discussed the basic foundation of object-oriented programming, including classes, objects, inheritance, polymorphism, and method overriding. We also covered how to delete objects and attributes that can aid in memory management and the use of the <code>super</code> function for calling the parent class methods.</p>"},{"location":"mytechdocs/doc5/Postman_Intro.html","title":"Introduction to Postman","text":""},{"location":"mytechdocs/doc5/Postman_Intro.html#whats-postman","title":"What's Postman?","text":"<p>Postman is a tool for creating, testing, and using APIs.</p>"},{"location":"mytechdocs/doc5/Postman_Intro.html#whats-api","title":"What's API?","text":"<p>API (Application Programming Interface) enables different applications to talk to each other. This happens through a request and response mechanism.</p> <p></p>"},{"location":"mytechdocs/doc5/Postman_Intro.html#sample-api","title":"Sample API","text":"<p>To interact with an API, we'll use Reqres API. Reqres API is a mock API for experimenting and testing.</p> <p>The API endpoint highlighted in the screenshot is for fetching user data. Think of an endpoint as the location your application visits to get this data.</p> <p></p>"},{"location":"mytechdocs/doc5/Postman_Intro.html#get-request","title":"GET Request","text":"<p>A GET request is how one application asks another application for information. For instance, Application 1 might ask Application 2 for a list of users. Application 2 processes this request and sends back the data.</p>"},{"location":"mytechdocs/doc5/Postman_Intro.html#send-a-get-request","title":"Send a GET Request","text":"<p>Let's now send a GET request to the Reqres API to retrieve information about users.</p> <p>1 Open Postman and click the + sign to select a new request.</p> <p>2 In the text box adjacent to GET, enter the Reqres endpoint URL: <code>https://reqres.in/api/users?page=1</code>.</p> <p></p> <p>Note the page parameter is 1. When handling APIs that return large sets of data, pagination helps break down the data into manageable chunks. Many APIs provide query parameters to go through pages, like <code>?page=1</code>, <code>?page=2</code>.</p> <p>3 Click Send.</p> <p>4 When you click Send, Postman responds with a 200 OK status and displays the response from the Reqres API. The response contains details of users such as first name and last name of users.</p> <p></p> <p>5 To save this request to a collection, click Save. In Postman we can group requests into collections.</p> <p></p> <p>6 Name the request.</p> <p>7 Save the request in an existing collection or create a new collection.</p> <p>8 After saving the request, it appears in the collection for easy access and future use.</p> <p></p> <p>Congrats! You've learned the basics of Postman: what it is, sending GET requests, and creating collections.</p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html","title":"Postman: Obtaining Authorization","text":"<p>This document explains how to use Postman to connect to the Spotify API. We'll walk through the process of obtaining authorization and making authenticated API requests to Spotify.</p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html#401-unauthorized-why-authorization-is-essential","title":"401 Unauthorized: Why Authorization is Essential","text":"<p>Spotify implements the OAuth 2.0 authorization framework. With OAuth 2.0, an application first retrieves an access token for the API, then uses that token to authenticate subsequent requests.</p> <p></p> <p>Let's see what happens when we send a request to Spotify without setting up authorization.</p> <p>1 Copy an endpoint from the Spotify doc.</p> <p></p> <p>2 Open the Postman desktop app, paste the endpoint for GET, and click Send.</p> <p></p> <p>When we click Send, we see a 401 Unauthorized error as the response. That means the request isn't authorized to use Spotify API.</p> <p></p> <p>Let's look at how to obtain authorization from Spotify.</p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html#create-an-app-on-spotify","title":"Create an App on Spotify","text":"<p>1 Once you've signed up for a Spotify Developer account, go to the Dashboard and click Create app.</p> <p>2 Enter the app name and description.</p> <p>3 Enter redirect URL. This is the URL where users can be redirected after authentication. It's also known as callback URL. As you'll see later on, we'll need to enter this URL in Postman as callback URL.</p> <p>I'm using the Postman desktop app, so I entered the localhost URL for callback. </p> <p></p> <p>If you're using Postman online, refer to the authorization topic of the Postman doc to find out the callback URL you should be using.</p> <p>4 Click Save.</p> <p>5 After save, click Settings of the app to copy client ID and secret. We'll use this ID and secret in Postman for configuring the authorization settings.</p> <p></p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html#configure-authorization-settings","title":"Configure Authorization Settings","text":"<p>1 Open Postman. Create a new collection.</p> <p></p> <p>2 Name the collection. For example, I named it Spotify.</p> <p>3 Click the Authorization tab and select OAuth 2.0 as authorization type.</p> <p></p> <p>Next, we'll configure the new access token in the same Authorization tab.</p> <p>4 Leave the default value of grant type as Authorization Code.</p> <p>5 Enter callback URL as the same URL you entered in the Spotify app.</p> <p>6 Enter the Auth URL as <code>https://accounts.spotify.com/authorize</code>. This is the authorization server's URL. You can find this URL in the Spotify doc.</p> <p>7 Enter the access token URL as <code>https://accounts.spotify.com/api/token</code>. You can find this URL in the Spotify doc.</p> <p></p> <p>8 Enter your Spotify app's client ID and secret. Postman suggests using variables to store these values to keep the sensitive data secure.</p> <p></p> <p>9 Enter the scope of values you're requesting. For example, I entered playlist-read-private playlist-modify-private. You can find the list of acceptable scope values in the Spotify doc.</p> <p>10 Click Save.</p> <p>11 Scroll to the bottom of the page and click Get New Access Token.</p> <p>12 Spotify will ask you to sign in. After signing in, you'll see the terms and conditions. Click Agree to proceed.</p> <p></p> <p>13 When you click Agree, a token is automatically generated. You can change the name of the token or use the default name. Click Use Token to set this token to be used for all requests in your collection.</p> <p></p>"},{"location":"mytechdocs/doc6/Postman_Obtain_Auth.html#send-an-api-request","title":"Send an API Request","text":"<p>Now that we've got the access token, let's send a request.</p> <p>1 Copy the endpoint of a request from the Spotify doc. For this example, we'll copy <code>https://api.spotify.com/v1/browse/new-releases</code>.</p> <p>2 Create a new request in the Spotify collection and paste the endpoint for GET.</p> <p></p> <p>3 Click Send.</p> <p>4 When you click Send, Postman displays the response from Spotify, indicating that the authorization setup is working.</p> <p></p> <p>You did it! You've now learned how to configure authorization in Postman, and tested that your setup is working correctly.</p>"},{"location":"mytechdocs/doc7/Sending_Requests.html","title":"Postman: Sending Requests","text":"<p>In the previous document, we used Postman to complete the authorization process to gain access to the Spotify service and used the GET method to retrieve data. In this document, we'll extend our knowledge by examining the POST, PUT, and DELETE methods to interact with the Spotify service more comprehensively.</p>"},{"location":"mytechdocs/doc7/Sending_Requests.html#send-a-post-request","title":"Send a POST Request","text":"<p>Let's start with sending a POST request to create a playlist.</p> <p>1 In the Spotify doc, go to the Create Playlist topic and copy the endpoint URL.</p> <p>2 Open the Postman desktop app. We already created the Spotify collection in the previous tutorial. In the Spotify collection, add a new request.</p> <p></p> <p>3 Give a name to the request. For instance, Create my playlist.</p> <p>4 Select POST and paste the endpoint URL you copied from the Spotify doc. You\u2019ll need to replace <code>{user_id}</code> with the username from Spotify.</p> <p></p> <p>5 Go to your account in the Spotify Web Player, then click Edit profile, and copy the username value.</p> <p></p> <p>6 In Postman, replace the <code>{user_id}</code> value of the URL with the copied username. We can use a variable to store that username. Select the pasted username, then click Set as variable, and choose Set as new variable. Name the variable, for example, username, and set the scope of the variable as Collection. Finally, click Set variable. The endpoint will now have the variable in place of <code>{user_id}</code>.</p> <p></p> <p>7 The body of the POST request should contain the data to be created. In the Spotify doc, go to the Create Playlist topic, copy the request body. Note that in request body false means the playlist will be private.</p> <p></p> <p>8 In Postman, click Body, and then raw. Paste the request body. I edited the copied request body to give a name to the playlist and a description.</p> <p></p> <p>9 Click Send.</p> <p>When you click send, you'll see Status 201 appear. This status means the playlist was successfully created. Go ahead and copy the playlist ID from the response - we'll need it for the next step.</p> <p></p> <p>You should now see your new playlist in your Spotify account as well.</p> <p></p> <p>Next, we'll add a couple of songs to the playlist.</p> <p>1 In the Spotify doc, go to the Add Items to Playlist topic and copy the endpoint URL.</p> <p>2 In the Spotify collection of Postman, add a new request. Name the request. For instance, Add songs to my playlist.</p> <p>3 Select POST and paste the endpoint URL you copied from the Spotify doc.</p> <p>4 In the endpoint URL, replace <code>{playlist_id}</code> with the ID of the playlist you just created. We'll use a variable like we used earlier for the username. Select the pasted playlist ID, then click Set as variable, followed by Set as new variable. Give the variable a name, for example, playlistID. Set the scope of the variable as Collection and click Set variable. The endpoint will now have the variable in place of <code>{playlist_id}</code>.</p> <p></p> <p>5 In the Spotify doc, go to the Add Items to Playlist topic and copy the example of the request body.</p> <p></p> <p>6 In Postman, click Body and then raw. Then, paste the request body. I edited the copied request body to add two songs of my choice to the playlist.</p> <p></p> <p>You can find the track ID within the URL of the song on Spotify. For example, if the URL is <code>https://open.spotify.com/track/2va1fTXhffQcr6TfPGf16y</code>, the track ID would be <code>2va1fTXhffQcr6TfPGf16y</code>.</p> <p>7 Click Send.</p> <p>When you click send, you\u2019ll see Status 201 appear. This status means the songs were successfully added to the playlist. Spotify returns the snapshot ID of the playlist's current state.</p> <p></p> <p>You should now see the songs added to your playlist in your Spotify account as well.</p>"},{"location":"mytechdocs/doc7/Sending_Requests.html#send-a-put-request","title":"Send a PUT Request","text":"<p>We'll now use the PUT request to replace the two existing songs in the playlist with two new songs.</p> <p>1 In the Spotify doc, go to the Update Playlist Items topic and copy the endpoint URL.</p> <p>2 In the Spotify collection of Postman, add a new request. Give a name to the request. For instance, Update my playlist.</p> <p>3 Select PUT and paste the endpoint URL you copied from the Spotify doc.</p> <p>4 In the endpoint URL, replace <code>{playlist_id}</code> with the actual ID of the playlist. As we did previously for adding songs, we'll use the variable <code>playlistID</code>.</p> <p>5 Copy the example of the URI array request body from the Spotify doc.</p> <p>6 In Postman, click Body, and then raw. Then, paste the request body. I edited the request body to add the two songs of my choice to the playlist.</p> <p></p> <p>7 Click Send.</p> <p>When you click send, you'll see Status 200 appear. This status means the songs were successfully added to the playlist, replacing the earlier songs. Spotify returns the snapshot ID of the playlist's current state.</p> <p></p> <p>You should now see your updated playlist in your Spotify account as well.</p>"},{"location":"mytechdocs/doc7/Sending_Requests.html#send-a-delete-request","title":"Send a DELETE Request","text":"<p>Let's now use the DELETE request to delete a song from the playlist.</p> <p>1 In the Spotify doc, go to the Remove Playlist Items topic and copy the endpoint URL.</p> <p>2 In the Spotify collection of Postman, add a new request. Give a name to the request. For instance, Delete from my playlist.</p> <p>3 Select DELETE and paste the endpoint URL you copied from the Spotify doc.</p> <p>4 In the endpoint URL, replace <code>{playlist_id}</code> with the actual ID of the playlist. As we did previously for adding songs, we'll use the variable <code>playlistID</code>.</p> <p>5 Copy the example of the URI array request body from the Spotify doc.</p> <p>6 In Postman, click Body, and then raw. Then, paste the request body. I edited the request body to specify the one song that will be deleted from the playlist.</p> <p></p> <p>7 Click Send.</p> <p>When you click send, you'll see Status 200 appear. This status means the song was successfully deleted from the playlist. Spotify returns the snapshot ID of the playlist's current state.</p> <p></p> <p>You should now see your updated playlist in your Spotify account as well. The playlist will no longer include the song we just deleted.</p> <p>In this document, we covered how to use POST, PUT, and DELETE requests with the Spotify API and Postman. We added songs to a playlist with a POST request, updated the playlist with new songs using a PUT request, and deleted a song with a DELETE request. By referencing the Spotify documentation, we learned how to construct our request bodies and understood the endpoints necessary for these operations. This hands-on experience should give you a good understanding of working with APIs.</p>"},{"location":"mytechdocs/doc8/Flask_Intro.html","title":"Getting Started with Flask: Building a Dynamic Web Page","text":"<p>Flask is a Python framework to create web applications. In this guide, we will explore how to build a dynamic web page using Flask.</p>"},{"location":"mytechdocs/doc8/Flask_Intro.html#set-up-the-flask-environment-in-windows","title":"Set Up the Flask Environment in Windows","text":"<p>1 Open the terminal in Visual Studio Code and type: <code>python -m venv venv</code></p> <p>This creates a virtual environment. Using virtual environments ensures that the dependencies for one project don't interfere with the dependencies of other projects.</p> <p>2 Activate the virtual environment: <code>venv\\Scripts\\activate</code></p> <p>3 Install Flask: <code>pip install Flask</code></p>"},{"location":"mytechdocs/doc8/Flask_Intro.html#create-the-flask-application","title":"Create the Flask Application","text":"<p>To illustrate how to make a web page dynamic, we'll create a Flask application that will collect teacher and course names from users and display these names. The application stores this information in a JSON file.</p> <p>1 Create a file named <code>teachers.py</code>.</p> <p>2 Import necessary components and create an instance of the Flask class:</p> <pre><code>import json\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n</code></pre> <ul> <li> <p>We've imported Python's built-in <code>json</code> module, which is used for working with JSON (JavaScript Object Notation) data. JSON is a common data format used for transmitting data, especially in web applications. We're also importing the Flask class that's used to create a Flask application.</p> </li> <li> <p><code>render_template</code> is a Flask function for working with HTML templates. Flask allows you to use templates (usually <code>.html</code> files) to dynamically generate HTML by passing data to them.</p> </li> <li> <p><code>request</code> is used to access incoming HTTP request data in Flask. When a user submits data through a form, the <code>request</code> object provides access to the data.</p> </li> <li> <p><code>app = Flask(__name__)</code>: Initializes the Flask application.</p> </li> </ul> <p>3 Define the load and save functions for teacher names and their corresponding courses:</p> <pre><code># Function to load teacher and course names from a JSON file\ndef load_teachers():\n    try:\n        with open('teachers.json', 'r') as file:\n            return json.load(file)\n    except FileNotFoundError:\n        print(\"Currently, there's no record for teachers and their courses.\")\n        return {}\n\n# Function to save teacher and course names to a JSON file\ndef save_teachers(teachers_dict):\n    with open('teachers.json', 'w') as file:\n        json.dump(teachers_dict, file)\n\n# Load initial data\nteachers_dict = load_teachers()\n</code></pre> <ul> <li> <p>When the Flask application is launched, <code>load_teachers()</code> is called to read the data from the <code>teachers.json</code> file and store it in the <code>teachers_dict</code> dictionary.</p> </li> <li> <p>When a user submits the form (POST request), the <code>save_teachers(teachers_dict)</code> function is called to save the updated data to the <code>teachers.json</code> file. If the JSON file doesn't exist, the function creates it.</p> </li> </ul> <p>4 Define the route and handle the HTML form submission:</p> <pre><code>@app.route('/', methods=['GET', 'POST'])\ndef home():\n    if request.method == 'POST':\n        teacher = request.form['teacher']\n        course = request.form['course']\n        teachers_dict[teacher] = course\n        save_teachers(teachers_dict)\n    return render_template('home.html', teachers=teachers_dict)\n</code></pre> <ul> <li> <p><code>'/'</code> in <code>@app.route('/', methods=['GET', 'POST'])</code> indicates the root URL. For example, when the user accesses the page using <code>http://127.0.0.1:5000</code>, the root URL is accessed. When the user accesses the root URL, the <code>home</code> function is triggered. <code>methods=['GET', 'POST']</code> specifies that the route can handle both GET and POST HTTP methods.</p> </li> <li> <p>When a user submits the form (POST request), the <code>save_teachers(teachers_dict)</code> function is called to save the updated data to the <code>teachers.json</code> file.</p> </li> <li> <p>The <code>render_template('home.html', teachers=teachers_dict)</code> function displays the HTML page that the user sees when accessing the root URL (GET request). The function populates the <code>teachers</code> variable in the HTML template with the dictionary data from <code>teachers_dict</code>. <code>teachers_dict</code> contains the data that the <code>load_teachers()</code> function retrieves from the JSON file.</p> </li> </ul> <p>5 Run the application when the <code>teachers.py</code> file is run:</p> <pre><code>if __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>This will run the application locally in the Flask development server with the debug mode on. When you run a Python file directly, the special built-in variable <code>__name__</code> is set to <code>'__main__'</code>.</p>"},{"location":"mytechdocs/doc8/Flask_Intro.html#create-the-html-file","title":"Create the HTML File","text":"<p>Create a <code>templates</code> directory. Then, create<code>home.html</code> inside this directory with this code:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Teachers and Courses&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Teachers and Their Corresponding Courses&lt;/h1&gt;\n    &lt;ul&gt;\n    {% for teacher, course in teachers.items() %}\n        &lt;li&gt;{{ teacher }}: {{ course }}&lt;/li&gt;\n    {% endfor %}\n    &lt;/ul&gt;\n\n    &lt;h2&gt;Add a New Teacher and Course&lt;/h2&gt;\n    &lt;form method=\"POST\"&gt;\n        &lt;label for=\"teacher\"&gt;Teacher:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"teacher\" name=\"teacher\" required&gt;\n        &lt;br&gt;&lt;br&gt;\n        &lt;label for=\"course\"&gt;Course:&lt;/label&gt;\n        &lt;input type=\"text\" id=\"course\" name=\"course\" required&gt;\n        &lt;br&gt;&lt;br&gt;\n        &lt;button type=\"submit\"&gt;Add&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ul> <li> <p>The for loop iterates over the <code>teachers</code> dictionary and displays each teacher and their corresponding course in a list format.</p> </li> <li> <p><code>teachers.items()</code> returns all key-value pairs (teacher-course pairs) from the <code>teachers</code> dictionary.</p> </li> <li> <p><code>teacher</code> represents the key (teacher's name), and <code>course</code> represents the value (course name).</p> </li> </ul>"},{"location":"mytechdocs/doc8/Flask_Intro.html#run-the-application","title":"Run the Application","text":"<p>Take a look at the directory structure in the Explorer pane. This is what the files look like, with the HTML file located in the <code>templates</code> folder:</p> <p></p> <p>Now, let's run the application.</p> <p>1 Click Run for <code>teachers.py</code>.</p> <p>2 Your application should now be running on <code>http://127.0.0.1:5000/</code>.</p> <p>In the terminal, press <code>Ctrl</code> and click the link to open the web page:</p> <p></p> <p>3 Enter the teacher's name and the corresponding course. </p> <p>Once you fill in both fields, click Add.</p> <p></p> <p>4 Keep adding more records. As you add them, the records will appear on the page:</p> <p></p> <p>Even if you stop the server and run the Python file again to start the server, the previously added records will still be displayed on the page. This is because we're storing them in the JSON file that was created and updated by the <code>save_teachers</code> function. You can check the JSON file by clicking on it in the Explorer pane:</p> <p></p> <p>Congratulations! You've learned how to build a dynamic web page using Flask. We created a Python file that allows users to add teacher and course names, stored the added information in a JSON file for data persistence, and displayed the added information on the page.</p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html","title":"Building Your First REST API Using Flask","text":"<p>Flask is a Python web framework. In this walkthrough, we'll create a basic REST API to manage a list of employees. We'll cover the following operations:</p> <ul> <li> <p>GET requests to retrieve employee information</p> </li> <li> <p>POST requests to add new employees</p> </li> <li> <p>PUT requests to update existing employee details</p> </li> <li> <p>DELETE requests to remove employees from the list</p> </li> </ul> <p>By following along, we'll discover the fundamental techniques for creating an API using Flask, including handling HTTP requests and responses, and creating endpoints.</p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#set-up-the-flask-environment-in-windows","title":"Set Up the Flask Environment in Windows","text":"<p>1 Open the terminal in Visual Studio Code and type: <code>python -m venv venv</code></p> <p>This creates a virtual environment. Using virtual environments ensures that the dependencies for one project don't interfere with the dependencies of other projects.</p> <p>2 Activate the virtual environment: <code>venv\\Scripts\\activate</code></p> <p>3 Install Flask: <code>pip install Flask</code></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#create-the-flask-application","title":"Create the Flask Application","text":"<p>1 Create a file named <code>employees.py</code>.</p> <p>2 Import necessary components and create an instance of the Flask class:</p> <pre><code>from flask import Flask, request, jsonify\n\napp = Flask(__name__)\n</code></pre> <ul> <li> <p>Flask is the main class for creating a Flask application.</p> </li> <li> <p>request object handles incoming HTTP requests, such as GET and POST.</p> </li> <li> <p>jsonify function converts Python dictionaries into JSON responses. We will see later that each employee item will be stored as a dictionary and sent as a JSON response.</p> </li> </ul> <p><code>app = Flask(__name__)</code> creates an instance of the Flask class, initializing a new Flask application.</p> <p>3 Define the data structure for storing employee data:</p> <pre><code>employees = [\n    {'id': 1, 'name': 'James Smith', 'role': 'Business Analyst'},\n    {'id': 2, 'name': 'Ananya Patel', 'role': 'Operations Manager'}\n]\n</code></pre> <p>Here, we define a list of dictionaries, where each dictionary represents an employee.</p> <p>4 Create an API endpoint for adding a new employee (POST):</p> <pre><code>@app.route('/employees', methods=['POST'])\ndef add_employee():\n    new_employee = request.json\n    employees.append(new_employee)\n    return jsonify(new_employee), 201\n</code></pre> <p>The <code>def add_employee()</code> function is run when a POST request is made to the <code>/employees</code> endpoint. The function takes the new employee data from the request, adds it to the <code>employees</code> list, and returns the new employee data in JSON format with a <code>201 Created</code> status code.</p> <p>5 Create an API endpoint for getting all employees (GET):</p> <pre><code>@app.route('/employees', methods=['GET'])\ndef get_employees():\n    return jsonify(employees)\n</code></pre> <p>The function returns the list of all employees.</p> <p>6 Create an API endpoint for getting a specific employee (GET):</p> <pre><code>@app.route('/employees/&lt;int:id&gt;', methods=['GET'])\ndef get_employee(id):\n    for employee in employees:\n        if employee['id'] == id:\n            return jsonify(employee)\n    return jsonify({'error': 'Employee not found'}), 404\n</code></pre> <p>The <code>&lt;int:id&gt;</code> part of the route means that the endpoint expects an integer as part of the URL. The integer represents the employee's ID.</p> <p>Flask extracts the <code>id</code> value from the URL and passes it to the <code>get_employee(id)</code> function. For example, if the endpoint is <code>http://localhost:5000/employees/2</code>, Flask assigns <code>2</code> to the variable <code>id</code> and calls the function with <code>id</code> set to <code>2</code>.</p> <p>The function uses a for loop to check if an <code>id</code> matches the <code>id</code> provided through the URL. If a match is found, the function returns the employee's data in JSON format using <code>jsonify(employee)</code>. If no matching employee is found, the function returns a JSON response with an error message and a <code>404 Not Found</code> status.</p> <p>7 Create an API endpoint for updating a specific employee (PUT):</p> <pre><code>@app.route('/employees/&lt;int:id&gt;', methods=['PUT'])\ndef update_employee(id):\n    updated_data = request.json\n    for employee in employees:\n        if employee['id'] == id:\n            employee.update(updated_data)\n            return jsonify(employee)\n    return jsonify({'error': 'Employee not found'}), 404\n</code></pre> <p>Flask extracts the <code>id</code> value from the URL and passes it to the <code>update_employee(id)</code> function.</p> <p>The function uses a for loop to check if an <code>id</code> matches the <code>id</code> provided through the URL. If a match is found, the function updates the employee data and returns the updated data in JSON format using <code>jsonify(employee)</code>. If no matching employee is found, the function returns a JSON response with an error message and a <code>404 Not Found</code> status.</p> <p>8 Create an API endpoint for deleting a specific employee (DELETE):</p> <pre><code>@app.route('/employees/&lt;int:id&gt;', methods=['DELETE'])\ndef delete_employee(id):\n    employee = next((emp for emp in employees if emp['id'] == id), None)\n    if employee:\n        employees.remove(employee)\n        return '', 204\n    else:\n        return jsonify({'error': 'Employee not found'}), 404\n</code></pre> <p>Flask extracts the <code>id</code> value from the URL and passes it to the <code>delete_employee(id)</code> function.</p> <p>This line <code>employee = next((emp for emp in employees if emp['id'] == id), None)</code> uses a generator expression to find the first employee in the <code>employees</code> list whose <code>id</code> matches the given <code>id</code>. If a matching employee is found, it's assigned to the <code>employee</code> variable. If no match is found, <code>employee</code> is set to <code>None</code>.</p> <p>If a matching employee is found, it's removed from the <code>employees</code> list using the <code>remove</code> method.</p> <p>The function then returns an empty response body with a <code>204 No Content</code> status code, indicating that the deletion was successful.</p> <p>9 Run the application when the <code>employees.py</code> file is run:</p> <pre><code>if __name__ == '__main__':\n    app.run(debug=True)\n</code></pre> <p>This ensures that the Flask application runs with debugging enabled when you execute <code>employees.py</code> directly.</p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#run-the-application","title":"Run the Application","text":"<p>On Visual Studio Code, click Run for <code>employees.py</code> to run the Flask application. This will launch the server locally on 127.0.0.1, usually port 5000:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#interact-with-the-flask-employees-api","title":"Interact with the Flask Employees API","text":"<p>Once the server is up and running, you can use tools like Postman, cURL, or any other API testing tool to test the endpoints for adding, retrieving, updating, and deleting employee data.</p> <p>We'll use Postman for this walkthrough.</p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-post-request-to-add-a-new-employee","title":"Sending a POST Request to Add a New Employee","text":"<p>1 In Postman, create a new request. You can group all your requests in a collection. For example, I created a collection specific for the Employees API called Dinesh Testing Employees API:</p> <p></p> <p>2 Select the POST method from the dropdown menu.</p> <p>3 Enter the endpoint URL. For example, <code>http://127.0.0.1:5000/employees</code>.</p> <p>4 Click on the Body tab.</p> <p>5 Select the raw radio button.</p> <p>6 Choose JSON from the dropdown menu next to the raw radio button.</p> <p>7 Enter the request body in JSON format. Here's an example of what the body might look like:</p> <pre><code>{\n    \"id\": 3,\n    \"name\": \"David Williams\",\n    \"role\": \"Business Analyst\"\n}\n</code></pre> <p>8 Click Send to submit the request:</p> <p></p> <p>You will get a response in the response pane, showing the newly added employee's data and a <code>201 Created</code> status code:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-get-request-to-retrieve-all-employees","title":"Sending a GET Request to Retrieve All Employees","text":"<p>1 Create a new request.</p> <p>2 Select the GET method from the dropdown menu.</p> <p>3 Enter the endpoint URL. For example, <code>http://127.0.0.1:5000/employees</code>.</p> <p>4 Click Send.</p> <p>You will get a response showing the data of all the employees and a <code>200 OK</code> status code:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-get-request-to-retrieve-a-specific-employee","title":"Sending a GET Request to Retrieve a Specific Employee","text":"<p>1 Create a new request.</p> <p>2 Select the GET method from the dropdown menu.</p> <p>3 Enter the endpoint URL. In this case, we'll enter an endpoint URL with a specific employee ID. For example, <code>http://127.0.0.1:5000/employees/2</code>.</p> <p>4 Click Send.</p> <p>You will get a response showing the data of the employee who has an ID of 2 and a <code>200 OK</code> status code:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-put-request-to-update-an-employees-information","title":"Sending a PUT Request to Update an Employee's Information","text":"<p>1 Create a new request.</p> <p>2 Select the PUT method from the dropdown menu.</p> <p>3 Enter the endpoint URL. In this case, we'll enter an endpoint URL with a specific employee ID. For example, <code>http://127.0.0.1:5000/employees/3</code>.</p> <p>4 Click on the Body tab.</p> <p>5 Select the raw radio button.</p> <p>6 Choose JSON from the dropdown menu next to the raw radio button.</p> <p>7 Enter the request body in JSON format. Here's an example of what the body might look like:</p> <pre><code>{\n  \"id\": 3,\n  \"name\": \"David Williams\",\n  \"role\": \"Senior Business Analyst\"\n}\n</code></pre> <p>We're changing the role from Business Analyst to Senior Business Analyst.</p> <p>8 Click Send.</p> <p>You should receive a response with the updated employee data and a <code>200 OK</code> response code:</p> <p></p>"},{"location":"mytechdocs/doc9/First_REST_API_Flask.html#sending-a-delete-request-to-remove-an-employee","title":"Sending a DELETE Request to Remove an Employee","text":"<p>1 Create a new request.</p> <p>2 Select the DELETE method from the dropdown menu.</p> <p>3 Enter the endpoint URL. In this case, we'll enter an endpoint URL with a specific employee ID. For example, <code>http://127.0.0.1:5000/employees/3</code>.</p> <p>4 Click Send.</p> <p>Upon deletion, you should receive a response with no content and a <code>204 No Content</code> status code:</p> <p></p> <p>Congratulations! By following this walkthrough, we successfully created an Employees API using Flask. By handling GET, POST, PUT, and DELETE requests, this API adheres to the principles of RESTful web services.</p>"}]}